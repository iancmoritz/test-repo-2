# coding: utf-8

"""
    Astro Registry API

    Astro Registry API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictStr, conint, conlist, validator

from typing import Optional

from astronomerregistry.models.create_label_request import CreateLabelRequest
from astronomerregistry.models.label import Label
from astronomerregistry.models.labels_paginated import LabelsPaginated
from astronomerregistry.models.update_label_request import UpdateLabelRequest

from astronomerregistry.api_client import ApiClient
from astronomerregistry.api_response import ApiResponse
from astronomerregistry.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class LabelApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_label(self, org_short_name_id : Annotated[StrictStr, Field(..., description="organization FQN")], label_group : Annotated[StrictStr, Field(..., description="Group name of the label")], body : Annotated[CreateLabelRequest, Field(..., description="request body for creating a registry label")], **kwargs) -> Label:  # noqa: E501
        """Create label for registry  # noqa: E501

        Create label for registry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_label(org_short_name_id, label_group, body, async_req=True)
        >>> result = thread.get()

        :param org_short_name_id: organization FQN (required)
        :type org_short_name_id: str
        :param label_group: Group name of the label (required)
        :type label_group: str
        :param body: request body for creating a registry label (required)
        :type body: CreateLabelRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Label
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_label_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_label_with_http_info(org_short_name_id, label_group, body, **kwargs)  # noqa: E501

    @validate_arguments
    def create_label_with_http_info(self, org_short_name_id : Annotated[StrictStr, Field(..., description="organization FQN")], label_group : Annotated[StrictStr, Field(..., description="Group name of the label")], body : Annotated[CreateLabelRequest, Field(..., description="request body for creating a registry label")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create label for registry  # noqa: E501

        Create label for registry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_label_with_http_info(org_short_name_id, label_group, body, async_req=True)
        >>> result = thread.get()

        :param org_short_name_id: organization FQN (required)
        :type org_short_name_id: str
        :param label_group: Group name of the label (required)
        :type label_group: str
        :param body: request body for creating a registry label (required)
        :type body: CreateLabelRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Label, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_short_name_id',
            'label_group',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_label" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_short_name_id']:
            _path_params['orgShortNameId'] = _params['org_short_name_id']

        if _params['label_group']:
            _path_params['labelGroup'] = _params['label_group']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "Label",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{orgShortNameId}/labels/{labelGroup}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_label(self, org_short_name_id : Annotated[StrictStr, Field(..., description="organization FQN")], label_group : Annotated[StrictStr, Field(..., description="Group name of the label")], label_name : Annotated[StrictStr, Field(..., description="The name of the label")], **kwargs) -> Label:  # noqa: E501
        """Delete a label  # noqa: E501

        Delete a single label by name and version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_label(org_short_name_id, label_group, label_name, async_req=True)
        >>> result = thread.get()

        :param org_short_name_id: organization FQN (required)
        :type org_short_name_id: str
        :param label_group: Group name of the label (required)
        :type label_group: str
        :param label_name: The name of the label (required)
        :type label_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Label
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the delete_label_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.delete_label_with_http_info(org_short_name_id, label_group, label_name, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_label_with_http_info(self, org_short_name_id : Annotated[StrictStr, Field(..., description="organization FQN")], label_group : Annotated[StrictStr, Field(..., description="Group name of the label")], label_name : Annotated[StrictStr, Field(..., description="The name of the label")], **kwargs) -> ApiResponse:  # noqa: E501
        """Delete a label  # noqa: E501

        Delete a single label by name and version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_label_with_http_info(org_short_name_id, label_group, label_name, async_req=True)
        >>> result = thread.get()

        :param org_short_name_id: organization FQN (required)
        :type org_short_name_id: str
        :param label_group: Group name of the label (required)
        :type label_group: str
        :param label_name: The name of the label (required)
        :type label_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Label, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_short_name_id',
            'label_group',
            'label_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_label" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_short_name_id']:
            _path_params['orgShortNameId'] = _params['org_short_name_id']

        if _params['label_group']:
            _path_params['labelGroup'] = _params['label_group']

        if _params['label_name']:
            _path_params['labelName'] = _params['label_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "Label",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{orgShortNameId}/labels/{labelGroup}/{labelName}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_label(self, org_short_name_id : Annotated[StrictStr, Field(..., description="organization FQN")], label_group : Annotated[StrictStr, Field(..., description="Group name of the label")], label_name : Annotated[StrictStr, Field(..., description="The name of the label")], **kwargs) -> Label:  # noqa: E501
        """Get a label  # noqa: E501

        Get a single label by name and orgId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_label(org_short_name_id, label_group, label_name, async_req=True)
        >>> result = thread.get()

        :param org_short_name_id: organization FQN (required)
        :type org_short_name_id: str
        :param label_group: Group name of the label (required)
        :type label_group: str
        :param label_name: The name of the label (required)
        :type label_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Label
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_label_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_label_with_http_info(org_short_name_id, label_group, label_name, **kwargs)  # noqa: E501

    @validate_arguments
    def get_label_with_http_info(self, org_short_name_id : Annotated[StrictStr, Field(..., description="organization FQN")], label_group : Annotated[StrictStr, Field(..., description="Group name of the label")], label_name : Annotated[StrictStr, Field(..., description="The name of the label")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get a label  # noqa: E501

        Get a single label by name and orgId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_label_with_http_info(org_short_name_id, label_group, label_name, async_req=True)
        >>> result = thread.get()

        :param org_short_name_id: organization FQN (required)
        :type org_short_name_id: str
        :param label_group: Group name of the label (required)
        :type label_group: str
        :param label_name: The name of the label (required)
        :type label_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Label, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_short_name_id',
            'label_group',
            'label_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_label" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_short_name_id']:
            _path_params['orgShortNameId'] = _params['org_short_name_id']

        if _params['label_group']:
            _path_params['labelGroup'] = _params['label_group']

        if _params['label_name']:
            _path_params['labelName'] = _params['label_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "Label",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{orgShortNameId}/labels/{labelGroup}/{labelName}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_labels(self, org_short_name_id : Annotated[StrictStr, Field(..., description="organization FQN")], label_group : Annotated[StrictStr, Field(..., description="Group name of the labels")], offset : Annotated[Optional[conint(strict=True, ge=0)], Field(description="offset for pagination")] = None, limit : Annotated[Optional[conint(strict=True, ge=0)], Field(description="limit for pagination")] = None, sorts : Annotated[Optional[conlist(StrictStr)], Field(description="sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'")] = None, **kwargs) -> LabelsPaginated:  # noqa: E501
        """List labels  # noqa: E501

        List labels  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_labels(org_short_name_id, label_group, offset, limit, sorts, async_req=True)
        >>> result = thread.get()

        :param org_short_name_id: organization FQN (required)
        :type org_short_name_id: str
        :param label_group: Group name of the labels (required)
        :type label_group: str
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param sorts: sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: LabelsPaginated
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the list_labels_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.list_labels_with_http_info(org_short_name_id, label_group, offset, limit, sorts, **kwargs)  # noqa: E501

    @validate_arguments
    def list_labels_with_http_info(self, org_short_name_id : Annotated[StrictStr, Field(..., description="organization FQN")], label_group : Annotated[StrictStr, Field(..., description="Group name of the labels")], offset : Annotated[Optional[conint(strict=True, ge=0)], Field(description="offset for pagination")] = None, limit : Annotated[Optional[conint(strict=True, ge=0)], Field(description="limit for pagination")] = None, sorts : Annotated[Optional[conlist(StrictStr)], Field(description="sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List labels  # noqa: E501

        List labels  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_labels_with_http_info(org_short_name_id, label_group, offset, limit, sorts, async_req=True)
        >>> result = thread.get()

        :param org_short_name_id: organization FQN (required)
        :type org_short_name_id: str
        :param label_group: Group name of the labels (required)
        :type label_group: str
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param sorts: sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(LabelsPaginated, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_short_name_id',
            'label_group',
            'offset',
            'limit',
            'sorts'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_labels" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_short_name_id']:
            _path_params['orgShortNameId'] = _params['org_short_name_id']

        if _params['label_group']:
            _path_params['labelGroup'] = _params['label_group']


        # process the query parameters
        _query_params = []
        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('sorts') is not None:  # noqa: E501
            _query_params.append(('sorts', _params['sorts']))
            _collection_formats['sorts'] = 'csv'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "LabelsPaginated",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{orgShortNameId}/labels/{labelGroup}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_label(self, org_short_name_id : Annotated[StrictStr, Field(..., description="organization FQN")], label_group : Annotated[StrictStr, Field(..., description="Group name of the label")], label_name : Annotated[StrictStr, Field(..., description="The name of the label")], body : Annotated[UpdateLabelRequest, Field(..., description="request body for updating a registry label")], **kwargs) -> Label:  # noqa: E501
        """Update label for registry  # noqa: E501

        Update label for registry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_label(org_short_name_id, label_group, label_name, body, async_req=True)
        >>> result = thread.get()

        :param org_short_name_id: organization FQN (required)
        :type org_short_name_id: str
        :param label_group: Group name of the label (required)
        :type label_group: str
        :param label_name: The name of the label (required)
        :type label_name: str
        :param body: request body for updating a registry label (required)
        :type body: UpdateLabelRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Label
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the update_label_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.update_label_with_http_info(org_short_name_id, label_group, label_name, body, **kwargs)  # noqa: E501

    @validate_arguments
    def update_label_with_http_info(self, org_short_name_id : Annotated[StrictStr, Field(..., description="organization FQN")], label_group : Annotated[StrictStr, Field(..., description="Group name of the label")], label_name : Annotated[StrictStr, Field(..., description="The name of the label")], body : Annotated[UpdateLabelRequest, Field(..., description="request body for updating a registry label")], **kwargs) -> ApiResponse:  # noqa: E501
        """Update label for registry  # noqa: E501

        Update label for registry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_label_with_http_info(org_short_name_id, label_group, label_name, body, async_req=True)
        >>> result = thread.get()

        :param org_short_name_id: organization FQN (required)
        :type org_short_name_id: str
        :param label_group: Group name of the label (required)
        :type label_group: str
        :param label_name: The name of the label (required)
        :type label_name: str
        :param body: request body for updating a registry label (required)
        :type body: UpdateLabelRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Label, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_short_name_id',
            'label_group',
            'label_name',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_label" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_short_name_id']:
            _path_params['orgShortNameId'] = _params['org_short_name_id']

        if _params['label_group']:
            _path_params['labelGroup'] = _params['label_group']

        if _params['label_name']:
            _path_params['labelName'] = _params['label_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "Label",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{orgShortNameId}/labels/{labelGroup}/{labelName}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
