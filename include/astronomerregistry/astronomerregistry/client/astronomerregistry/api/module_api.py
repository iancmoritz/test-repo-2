# coding: utf-8

"""
    Astro Registry API

    Astro Registry API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, conint, conlist, validator

from typing import Optional

from astronomerregistry.models.create_module_request import CreateModuleRequest
from astronomerregistry.models.module import Module
from astronomerregistry.models.modules_paginated import ModulesPaginated
from astronomerregistry.models.update_module_request import UpdateModuleRequest

from astronomerregistry.api_client import ApiClient
from astronomerregistry.api_response import ApiResponse
from astronomerregistry.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ModuleApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_module(self, org_short_name_id : Annotated[StrictStr, Field(..., description="organization FQN")], provider_name : Annotated[StrictStr, Field(..., description="The name or display name of the provider")], version : Annotated[StrictStr, Field(..., description="The version of the module, or keyword 'latest' for latest version")], body : Annotated[CreateModuleRequest, Field(..., description="request body for creating a registry module")], **kwargs) -> Module:  # noqa: E501
        """Create module for registry  # noqa: E501

        Create module for registry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_module(org_short_name_id, provider_name, version, body, async_req=True)
        >>> result = thread.get()

        :param org_short_name_id: organization FQN (required)
        :type org_short_name_id: str
        :param provider_name: The name or display name of the provider (required)
        :type provider_name: str
        :param version: The version of the module, or keyword 'latest' for latest version (required)
        :type version: str
        :param body: request body for creating a registry module (required)
        :type body: CreateModuleRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Module
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_module_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_module_with_http_info(org_short_name_id, provider_name, version, body, **kwargs)  # noqa: E501

    @validate_arguments
    def create_module_with_http_info(self, org_short_name_id : Annotated[StrictStr, Field(..., description="organization FQN")], provider_name : Annotated[StrictStr, Field(..., description="The name or display name of the provider")], version : Annotated[StrictStr, Field(..., description="The version of the module, or keyword 'latest' for latest version")], body : Annotated[CreateModuleRequest, Field(..., description="request body for creating a registry module")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create module for registry  # noqa: E501

        Create module for registry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_module_with_http_info(org_short_name_id, provider_name, version, body, async_req=True)
        >>> result = thread.get()

        :param org_short_name_id: organization FQN (required)
        :type org_short_name_id: str
        :param provider_name: The name or display name of the provider (required)
        :type provider_name: str
        :param version: The version of the module, or keyword 'latest' for latest version (required)
        :type version: str
        :param body: request body for creating a registry module (required)
        :type body: CreateModuleRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Module, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_short_name_id',
            'provider_name',
            'version',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_module" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_short_name_id']:
            _path_params['orgShortNameId'] = _params['org_short_name_id']

        if _params['provider_name']:
            _path_params['providerName'] = _params['provider_name']

        if _params['version']:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "Module",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{orgShortNameId}/providers/{providerName}/versions/{version}/modules', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_module(self, org_short_name_id : Annotated[StrictStr, Field(..., description="organization FQN")], provider_name : Annotated[StrictStr, Field(..., description="The name or display name of the provider")], version : Annotated[StrictStr, Field(..., description="The version of the module, or keyword 'latest' for latest version")], module_name : Annotated[StrictStr, Field(..., description="The name of the module")], **kwargs) -> Module:  # noqa: E501
        """Delete a module  # noqa: E501

        Delete a single module by name and version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_module(org_short_name_id, provider_name, version, module_name, async_req=True)
        >>> result = thread.get()

        :param org_short_name_id: organization FQN (required)
        :type org_short_name_id: str
        :param provider_name: The name or display name of the provider (required)
        :type provider_name: str
        :param version: The version of the module, or keyword 'latest' for latest version (required)
        :type version: str
        :param module_name: The name of the module (required)
        :type module_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Module
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the delete_module_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.delete_module_with_http_info(org_short_name_id, provider_name, version, module_name, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_module_with_http_info(self, org_short_name_id : Annotated[StrictStr, Field(..., description="organization FQN")], provider_name : Annotated[StrictStr, Field(..., description="The name or display name of the provider")], version : Annotated[StrictStr, Field(..., description="The version of the module, or keyword 'latest' for latest version")], module_name : Annotated[StrictStr, Field(..., description="The name of the module")], **kwargs) -> ApiResponse:  # noqa: E501
        """Delete a module  # noqa: E501

        Delete a single module by name and version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_module_with_http_info(org_short_name_id, provider_name, version, module_name, async_req=True)
        >>> result = thread.get()

        :param org_short_name_id: organization FQN (required)
        :type org_short_name_id: str
        :param provider_name: The name or display name of the provider (required)
        :type provider_name: str
        :param version: The version of the module, or keyword 'latest' for latest version (required)
        :type version: str
        :param module_name: The name of the module (required)
        :type module_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Module, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_short_name_id',
            'provider_name',
            'version',
            'module_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_module" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_short_name_id']:
            _path_params['orgShortNameId'] = _params['org_short_name_id']

        if _params['provider_name']:
            _path_params['providerName'] = _params['provider_name']

        if _params['version']:
            _path_params['version'] = _params['version']

        if _params['module_name']:
            _path_params['moduleName'] = _params['module_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "Module",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{orgShortNameId}/providers/{providerName}/versions/{version}/modules/{moduleName}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_module(self, org_short_name_id : Annotated[StrictStr, Field(..., description="organization FQN")], provider_name : Annotated[StrictStr, Field(..., description="The name or display name of the provider")], version : Annotated[StrictStr, Field(..., description="The version of the module, or keyword 'latest' for latest version")], module_name : Annotated[StrictStr, Field(..., description="The name or display name of the module")], **kwargs) -> Module:  # noqa: E501
        """Get module  # noqa: E501

        Get a single module by moduleName and version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_module(org_short_name_id, provider_name, version, module_name, async_req=True)
        >>> result = thread.get()

        :param org_short_name_id: organization FQN (required)
        :type org_short_name_id: str
        :param provider_name: The name or display name of the provider (required)
        :type provider_name: str
        :param version: The version of the module, or keyword 'latest' for latest version (required)
        :type version: str
        :param module_name: The name or display name of the module (required)
        :type module_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Module
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_module_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_module_with_http_info(org_short_name_id, provider_name, version, module_name, **kwargs)  # noqa: E501

    @validate_arguments
    def get_module_with_http_info(self, org_short_name_id : Annotated[StrictStr, Field(..., description="organization FQN")], provider_name : Annotated[StrictStr, Field(..., description="The name or display name of the provider")], version : Annotated[StrictStr, Field(..., description="The version of the module, or keyword 'latest' for latest version")], module_name : Annotated[StrictStr, Field(..., description="The name or display name of the module")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get module  # noqa: E501

        Get a single module by moduleName and version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_module_with_http_info(org_short_name_id, provider_name, version, module_name, async_req=True)
        >>> result = thread.get()

        :param org_short_name_id: organization FQN (required)
        :type org_short_name_id: str
        :param provider_name: The name or display name of the provider (required)
        :type provider_name: str
        :param version: The version of the module, or keyword 'latest' for latest version (required)
        :type version: str
        :param module_name: The name or display name of the module (required)
        :type module_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Module, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_short_name_id',
            'provider_name',
            'version',
            'module_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_module" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_short_name_id']:
            _path_params['orgShortNameId'] = _params['org_short_name_id']

        if _params['provider_name']:
            _path_params['providerName'] = _params['provider_name']

        if _params['version']:
            _path_params['version'] = _params['version']

        if _params['module_name']:
            _path_params['moduleName'] = _params['module_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "Module",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{orgShortNameId}/providers/{providerName}/versions/{version}/modules/{moduleName}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_modules(self, org_short_name_id : Annotated[StrictStr, Field(..., description="organization FQN")], is_certified : Annotated[Optional[StrictBool], Field(description="return only certified modules")] = None, is_featured : Annotated[Optional[StrictBool], Field(description="return only featured modules")] = None, is_global : Annotated[Optional[StrictBool], Field(description="return only global modules")] = None, is_private : Annotated[Optional[StrictBool], Field(description="return only private modules")] = None, is_cloud_ide_compatible : Annotated[Optional[StrictBool], Field(description="return only cloud ide compatible modules")] = None, type_name : Annotated[Optional[conlist(StrictStr)], Field(description="Has at least one type in input filter list")] = None, tier_id : Annotated[Optional[conlist(StrictStr)], Field(description="Has at least one tier in input filter list")] = None, category_id : Annotated[Optional[conlist(StrictStr)], Field(description="Has at least one category in input filter list")] = None, badge_id : Annotated[Optional[conlist(StrictStr)], Field(description="Has at least one badge in input filter list")] = None, dag_id : Annotated[Optional[conlist(StrictStr)], Field(description="Has one id in input filter list")] = None, module_id : Annotated[Optional[conlist(StrictStr)], Field(description="Has one module in input filter list")] = None, provider_id : Annotated[Optional[conlist(StrictStr)], Field(description="Has one provider in input filter list")] = None, tier_name : Annotated[Optional[conlist(StrictStr)], Field(description="Has at least one tier name in input filter list")] = None, category_name : Annotated[Optional[conlist(StrictStr)], Field(description="Has at least one category name in input filter list")] = None, badge_name : Annotated[Optional[conlist(StrictStr)], Field(description="Has at least one badge name in input filter list")] = None, provider_name : Annotated[Optional[conlist(StrictStr)], Field(description="Has one provider name in input filter list")] = None, query : Annotated[Optional[StrictStr], Field(description="Search query for module")] = None, offset : Annotated[Optional[conint(strict=True, ge=0)], Field(description="offset for pagination")] = None, limit : Annotated[Optional[conint(strict=True, ge=0)], Field(description="limit for pagination")] = None, sorts : Annotated[Optional[conlist(StrictStr)], Field(description="sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'")] = None, **kwargs) -> ModulesPaginated:  # noqa: E501
        """List modules  # noqa: E501

        List modules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_modules(org_short_name_id, is_certified, is_featured, is_global, is_private, is_cloud_ide_compatible, type_name, tier_id, category_id, badge_id, dag_id, module_id, provider_id, tier_name, category_name, badge_name, provider_name, query, offset, limit, sorts, async_req=True)
        >>> result = thread.get()

        :param org_short_name_id: organization FQN (required)
        :type org_short_name_id: str
        :param is_certified: return only certified modules
        :type is_certified: bool
        :param is_featured: return only featured modules
        :type is_featured: bool
        :param is_global: return only global modules
        :type is_global: bool
        :param is_private: return only private modules
        :type is_private: bool
        :param is_cloud_ide_compatible: return only cloud ide compatible modules
        :type is_cloud_ide_compatible: bool
        :param type_name: Has at least one type in input filter list
        :type type_name: List[str]
        :param tier_id: Has at least one tier in input filter list
        :type tier_id: List[str]
        :param category_id: Has at least one category in input filter list
        :type category_id: List[str]
        :param badge_id: Has at least one badge in input filter list
        :type badge_id: List[str]
        :param dag_id: Has one id in input filter list
        :type dag_id: List[str]
        :param module_id: Has one module in input filter list
        :type module_id: List[str]
        :param provider_id: Has one provider in input filter list
        :type provider_id: List[str]
        :param tier_name: Has at least one tier name in input filter list
        :type tier_name: List[str]
        :param category_name: Has at least one category name in input filter list
        :type category_name: List[str]
        :param badge_name: Has at least one badge name in input filter list
        :type badge_name: List[str]
        :param provider_name: Has one provider name in input filter list
        :type provider_name: List[str]
        :param query: Search query for module
        :type query: str
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param sorts: sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ModulesPaginated
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the list_modules_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.list_modules_with_http_info(org_short_name_id, is_certified, is_featured, is_global, is_private, is_cloud_ide_compatible, type_name, tier_id, category_id, badge_id, dag_id, module_id, provider_id, tier_name, category_name, badge_name, provider_name, query, offset, limit, sorts, **kwargs)  # noqa: E501

    @validate_arguments
    def list_modules_with_http_info(self, org_short_name_id : Annotated[StrictStr, Field(..., description="organization FQN")], is_certified : Annotated[Optional[StrictBool], Field(description="return only certified modules")] = None, is_featured : Annotated[Optional[StrictBool], Field(description="return only featured modules")] = None, is_global : Annotated[Optional[StrictBool], Field(description="return only global modules")] = None, is_private : Annotated[Optional[StrictBool], Field(description="return only private modules")] = None, is_cloud_ide_compatible : Annotated[Optional[StrictBool], Field(description="return only cloud ide compatible modules")] = None, type_name : Annotated[Optional[conlist(StrictStr)], Field(description="Has at least one type in input filter list")] = None, tier_id : Annotated[Optional[conlist(StrictStr)], Field(description="Has at least one tier in input filter list")] = None, category_id : Annotated[Optional[conlist(StrictStr)], Field(description="Has at least one category in input filter list")] = None, badge_id : Annotated[Optional[conlist(StrictStr)], Field(description="Has at least one badge in input filter list")] = None, dag_id : Annotated[Optional[conlist(StrictStr)], Field(description="Has one id in input filter list")] = None, module_id : Annotated[Optional[conlist(StrictStr)], Field(description="Has one module in input filter list")] = None, provider_id : Annotated[Optional[conlist(StrictStr)], Field(description="Has one provider in input filter list")] = None, tier_name : Annotated[Optional[conlist(StrictStr)], Field(description="Has at least one tier name in input filter list")] = None, category_name : Annotated[Optional[conlist(StrictStr)], Field(description="Has at least one category name in input filter list")] = None, badge_name : Annotated[Optional[conlist(StrictStr)], Field(description="Has at least one badge name in input filter list")] = None, provider_name : Annotated[Optional[conlist(StrictStr)], Field(description="Has one provider name in input filter list")] = None, query : Annotated[Optional[StrictStr], Field(description="Search query for module")] = None, offset : Annotated[Optional[conint(strict=True, ge=0)], Field(description="offset for pagination")] = None, limit : Annotated[Optional[conint(strict=True, ge=0)], Field(description="limit for pagination")] = None, sorts : Annotated[Optional[conlist(StrictStr)], Field(description="sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List modules  # noqa: E501

        List modules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_modules_with_http_info(org_short_name_id, is_certified, is_featured, is_global, is_private, is_cloud_ide_compatible, type_name, tier_id, category_id, badge_id, dag_id, module_id, provider_id, tier_name, category_name, badge_name, provider_name, query, offset, limit, sorts, async_req=True)
        >>> result = thread.get()

        :param org_short_name_id: organization FQN (required)
        :type org_short_name_id: str
        :param is_certified: return only certified modules
        :type is_certified: bool
        :param is_featured: return only featured modules
        :type is_featured: bool
        :param is_global: return only global modules
        :type is_global: bool
        :param is_private: return only private modules
        :type is_private: bool
        :param is_cloud_ide_compatible: return only cloud ide compatible modules
        :type is_cloud_ide_compatible: bool
        :param type_name: Has at least one type in input filter list
        :type type_name: List[str]
        :param tier_id: Has at least one tier in input filter list
        :type tier_id: List[str]
        :param category_id: Has at least one category in input filter list
        :type category_id: List[str]
        :param badge_id: Has at least one badge in input filter list
        :type badge_id: List[str]
        :param dag_id: Has one id in input filter list
        :type dag_id: List[str]
        :param module_id: Has one module in input filter list
        :type module_id: List[str]
        :param provider_id: Has one provider in input filter list
        :type provider_id: List[str]
        :param tier_name: Has at least one tier name in input filter list
        :type tier_name: List[str]
        :param category_name: Has at least one category name in input filter list
        :type category_name: List[str]
        :param badge_name: Has at least one badge name in input filter list
        :type badge_name: List[str]
        :param provider_name: Has one provider name in input filter list
        :type provider_name: List[str]
        :param query: Search query for module
        :type query: str
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param sorts: sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ModulesPaginated, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_short_name_id',
            'is_certified',
            'is_featured',
            'is_global',
            'is_private',
            'is_cloud_ide_compatible',
            'type_name',
            'tier_id',
            'category_id',
            'badge_id',
            'dag_id',
            'module_id',
            'provider_id',
            'tier_name',
            'category_name',
            'badge_name',
            'provider_name',
            'query',
            'offset',
            'limit',
            'sorts'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_modules" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_short_name_id']:
            _path_params['orgShortNameId'] = _params['org_short_name_id']


        # process the query parameters
        _query_params = []
        if _params.get('is_certified') is not None:  # noqa: E501
            _query_params.append(('isCertified', _params['is_certified']))

        if _params.get('is_featured') is not None:  # noqa: E501
            _query_params.append(('isFeatured', _params['is_featured']))

        if _params.get('is_global') is not None:  # noqa: E501
            _query_params.append(('isGlobal', _params['is_global']))

        if _params.get('is_private') is not None:  # noqa: E501
            _query_params.append(('isPrivate', _params['is_private']))

        if _params.get('is_cloud_ide_compatible') is not None:  # noqa: E501
            _query_params.append(('isCloudIDECompatible', _params['is_cloud_ide_compatible']))

        if _params.get('type_name') is not None:  # noqa: E501
            _query_params.append(('typeName', _params['type_name']))
            _collection_formats['typeName'] = 'csv'

        if _params.get('tier_id') is not None:  # noqa: E501
            _query_params.append(('tierId', _params['tier_id']))
            _collection_formats['tierId'] = 'csv'

        if _params.get('category_id') is not None:  # noqa: E501
            _query_params.append(('categoryId', _params['category_id']))
            _collection_formats['categoryId'] = 'csv'

        if _params.get('badge_id') is not None:  # noqa: E501
            _query_params.append(('badgeId', _params['badge_id']))
            _collection_formats['badgeId'] = 'csv'

        if _params.get('dag_id') is not None:  # noqa: E501
            _query_params.append(('dagId', _params['dag_id']))
            _collection_formats['dagId'] = 'csv'

        if _params.get('module_id') is not None:  # noqa: E501
            _query_params.append(('moduleId', _params['module_id']))
            _collection_formats['moduleId'] = 'csv'

        if _params.get('provider_id') is not None:  # noqa: E501
            _query_params.append(('providerId', _params['provider_id']))
            _collection_formats['providerId'] = 'csv'

        if _params.get('tier_name') is not None:  # noqa: E501
            _query_params.append(('tierName', _params['tier_name']))
            _collection_formats['tierName'] = 'csv'

        if _params.get('category_name') is not None:  # noqa: E501
            _query_params.append(('categoryName', _params['category_name']))
            _collection_formats['categoryName'] = 'csv'

        if _params.get('badge_name') is not None:  # noqa: E501
            _query_params.append(('badgeName', _params['badge_name']))
            _collection_formats['badgeName'] = 'csv'

        if _params.get('provider_name') is not None:  # noqa: E501
            _query_params.append(('providerName', _params['provider_name']))
            _collection_formats['providerName'] = 'csv'

        if _params.get('query') is not None:  # noqa: E501
            _query_params.append(('query', _params['query']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('sorts') is not None:  # noqa: E501
            _query_params.append(('sorts', _params['sorts']))
            _collection_formats['sorts'] = 'csv'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "ModulesPaginated",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{orgShortNameId}/modules', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_modules_internal(self, org_short_name_id : Annotated[StrictStr, Field(..., description="organization FQN")], module_name : Annotated[StrictStr, Field(..., description="The name or display name of the module")], **kwargs) -> ModulesPaginated:  # noqa: E501
        """List any modules matching a module name  # noqa: E501

        List any modules matching a module name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_modules_internal(org_short_name_id, module_name, async_req=True)
        >>> result = thread.get()

        :param org_short_name_id: organization FQN (required)
        :type org_short_name_id: str
        :param module_name: The name or display name of the module (required)
        :type module_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ModulesPaginated
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the list_modules_internal_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.list_modules_internal_with_http_info(org_short_name_id, module_name, **kwargs)  # noqa: E501

    @validate_arguments
    def list_modules_internal_with_http_info(self, org_short_name_id : Annotated[StrictStr, Field(..., description="organization FQN")], module_name : Annotated[StrictStr, Field(..., description="The name or display name of the module")], **kwargs) -> ApiResponse:  # noqa: E501
        """List any modules matching a module name  # noqa: E501

        List any modules matching a module name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_modules_internal_with_http_info(org_short_name_id, module_name, async_req=True)
        >>> result = thread.get()

        :param org_short_name_id: organization FQN (required)
        :type org_short_name_id: str
        :param module_name: The name or display name of the module (required)
        :type module_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ModulesPaginated, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_short_name_id',
            'module_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_modules_internal" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_short_name_id']:
            _path_params['orgShortNameId'] = _params['org_short_name_id']

        if _params['module_name']:
            _path_params['moduleName'] = _params['module_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "ModulesPaginated",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{orgShortNameId}/modules/{moduleName}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_module(self, org_short_name_id : Annotated[StrictStr, Field(..., description="organization FQN")], provider_name : Annotated[StrictStr, Field(..., description="The name of the provider")], version : Annotated[StrictStr, Field(..., description="The version of the module")], module_name : Annotated[StrictStr, Field(..., description="The name of the module")], body : Annotated[UpdateModuleRequest, Field(..., description="request body for updating a registry module")], **kwargs) -> Module:  # noqa: E501
        """Update module for registry  # noqa: E501

        Update module for registry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_module(org_short_name_id, provider_name, version, module_name, body, async_req=True)
        >>> result = thread.get()

        :param org_short_name_id: organization FQN (required)
        :type org_short_name_id: str
        :param provider_name: The name of the provider (required)
        :type provider_name: str
        :param version: The version of the module (required)
        :type version: str
        :param module_name: The name of the module (required)
        :type module_name: str
        :param body: request body for updating a registry module (required)
        :type body: UpdateModuleRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Module
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the update_module_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.update_module_with_http_info(org_short_name_id, provider_name, version, module_name, body, **kwargs)  # noqa: E501

    @validate_arguments
    def update_module_with_http_info(self, org_short_name_id : Annotated[StrictStr, Field(..., description="organization FQN")], provider_name : Annotated[StrictStr, Field(..., description="The name of the provider")], version : Annotated[StrictStr, Field(..., description="The version of the module")], module_name : Annotated[StrictStr, Field(..., description="The name of the module")], body : Annotated[UpdateModuleRequest, Field(..., description="request body for updating a registry module")], **kwargs) -> ApiResponse:  # noqa: E501
        """Update module for registry  # noqa: E501

        Update module for registry  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_module_with_http_info(org_short_name_id, provider_name, version, module_name, body, async_req=True)
        >>> result = thread.get()

        :param org_short_name_id: organization FQN (required)
        :type org_short_name_id: str
        :param provider_name: The name of the provider (required)
        :type provider_name: str
        :param version: The version of the module (required)
        :type version: str
        :param module_name: The name of the module (required)
        :type module_name: str
        :param body: request body for updating a registry module (required)
        :type body: UpdateModuleRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Module, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'org_short_name_id',
            'provider_name',
            'version',
            'module_name',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_module" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['org_short_name_id']:
            _path_params['orgShortNameId'] = _params['org_short_name_id']

        if _params['provider_name']:
            _path_params['providerName'] = _params['provider_name']

        if _params['version']:
            _path_params['version'] = _params['version']

        if _params['module_name']:
            _path_params['moduleName'] = _params['module_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "Module",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{orgShortNameId}/providers/{providerName}/versions/{version}/modules/{moduleName}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
