# coding: utf-8

"""
    Astro Registry API

    Astro Registry API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from astronomerregistry.models.short_label import ShortLabel
from astronomerregistry.models.social_stats import SocialStats

class Provider(BaseModel):
    """
    Provider
    """
    badges: conlist(ShortLabel) = Field(...)
    categories: conlist(ShortLabel) = Field(...)
    created_at: StrictStr = Field(..., alias="createdAt")
    created_by: StrictStr = Field(..., alias="createdBy")
    description: StrictStr = Field(...)
    display_name: StrictStr = Field(..., alias="displayName")
    docs_url: StrictStr = Field(..., alias="docsUrl")
    github_url: StrictStr = Field(..., alias="githubUrl")
    is_certified: StrictBool = Field(..., alias="isCertified")
    is_cloud_ide_compatible: StrictBool = Field(..., alias="isCloudIDECompatible")
    is_display_name_manual: StrictBool = Field(..., alias="isDisplayNameManual")
    is_featured: StrictBool = Field(..., alias="isFeatured")
    is_global: StrictBool = Field(..., alias="isGlobal")
    is_latest_version: StrictBool = Field(..., alias="isLatestVersion")
    is_logo_manual: StrictBool = Field(..., alias="isLogoManual")
    is_private: StrictBool = Field(..., alias="isPrivate")
    logo: StrictStr = Field(...)
    name: StrictStr = Field(...)
    organization_id: StrictStr = Field(..., alias="organizationId")
    other_versions: conlist(StrictStr) = Field(..., alias="otherVersions")
    provider_id: StrictStr = Field(..., alias="providerId")
    search_rank: Optional[StrictInt] = Field(None, alias="searchRank")
    short_name_id: StrictStr = Field(..., alias="shortNameId")
    social_stats: SocialStats = Field(..., alias="socialStats")
    tiers: conlist(ShortLabel) = Field(...)
    type: StrictStr = Field(...)
    updated_at: StrictStr = Field(..., alias="updatedAt")
    updated_by: StrictStr = Field(..., alias="updatedBy")
    version: StrictStr = Field(...)
    __properties = ["badges", "categories", "createdAt", "createdBy", "description", "displayName", "docsUrl", "githubUrl", "isCertified", "isCloudIDECompatible", "isDisplayNameManual", "isFeatured", "isGlobal", "isLatestVersion", "isLogoManual", "isPrivate", "logo", "name", "organizationId", "otherVersions", "providerId", "searchRank", "shortNameId", "socialStats", "tiers", "type", "updatedAt", "updatedBy", "version"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Provider:
        """Create an instance of Provider from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in badges (list)
        _items = []
        if self.badges:
            for _item in self.badges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['badges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in categories (list)
        _items = []
        if self.categories:
            for _item in self.categories:
                if _item:
                    _items.append(_item.to_dict())
            _dict['categories'] = _items
        # override the default output from pydantic by calling `to_dict()` of social_stats
        if self.social_stats:
            _dict['socialStats'] = self.social_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tiers (list)
        _items = []
        if self.tiers:
            for _item in self.tiers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tiers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Provider:
        """Create an instance of Provider from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Provider.parse_obj(obj)

        _obj = Provider.parse_obj({
            "badges": [ShortLabel.from_dict(_item) for _item in obj.get("badges")] if obj.get("badges") is not None else None,
            "categories": [ShortLabel.from_dict(_item) for _item in obj.get("categories")] if obj.get("categories") is not None else None,
            "created_at": obj.get("createdAt"),
            "created_by": obj.get("createdBy"),
            "description": obj.get("description"),
            "display_name": obj.get("displayName"),
            "docs_url": obj.get("docsUrl"),
            "github_url": obj.get("githubUrl"),
            "is_certified": obj.get("isCertified"),
            "is_cloud_ide_compatible": obj.get("isCloudIDECompatible"),
            "is_display_name_manual": obj.get("isDisplayNameManual"),
            "is_featured": obj.get("isFeatured"),
            "is_global": obj.get("isGlobal"),
            "is_latest_version": obj.get("isLatestVersion"),
            "is_logo_manual": obj.get("isLogoManual"),
            "is_private": obj.get("isPrivate"),
            "logo": obj.get("logo"),
            "name": obj.get("name"),
            "organization_id": obj.get("organizationId"),
            "other_versions": obj.get("otherVersions"),
            "provider_id": obj.get("providerId"),
            "search_rank": obj.get("searchRank"),
            "short_name_id": obj.get("shortNameId"),
            "social_stats": SocialStats.from_dict(obj.get("socialStats")) if obj.get("socialStats") is not None else None,
            "tiers": [ShortLabel.from_dict(_item) for _item in obj.get("tiers")] if obj.get("tiers") is not None else None,
            "type": obj.get("type"),
            "updated_at": obj.get("updatedAt"),
            "updated_by": obj.get("updatedBy"),
            "version": obj.get("version")
        })
        return _obj

