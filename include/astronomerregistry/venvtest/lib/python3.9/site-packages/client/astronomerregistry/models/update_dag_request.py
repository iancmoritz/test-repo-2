# coding: utf-8

"""
    Astro Registry API

    Astro Registry API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, validator
from astronomerregistry.models.related_module_request import RelatedModuleRequest
from astronomerregistry.models.social_stats import SocialStats
from astronomerregistry.models.task_dependency_tree import TaskDependencyTree

class UpdateDagRequest(BaseModel):
    """
    UpdateDagRequest
    """
    description: Optional[StrictStr] = None
    display_name: Optional[StrictStr] = Field(None, alias="displayName", description="Name                     string               `json:\"name\" validate:\"required\"` Version                  string               `json:\"version\" validate:\"required\"`")
    documentation: Optional[StrictStr] = None
    file_path: Optional[StrictStr] = Field(None, alias="filePath")
    github_raw_dockerfile_url: Optional[StrictStr] = Field(None, alias="githubRawDockerfileUrl")
    github_raw_requirements_url: Optional[StrictStr] = Field(None, alias="githubRawRequirementsUrl")
    github_raw_source_url: Optional[StrictStr] = Field(None, alias="githubRawSourceUrl")
    github_repository_url: Optional[StrictStr] = Field(None, alias="githubRepositoryUrl")
    github_source_url: Optional[StrictStr] = Field(None, alias="githubSourceUrl")
    is_certified: Optional[StrictBool] = Field(None, alias="isCertified")
    is_cloud_ide_compatible: Optional[StrictBool] = Field(None, alias="isCloudIDECompatible")
    is_display_name_manual: Optional[StrictBool] = Field(None, alias="isDisplayNameManual")
    is_featured: Optional[StrictBool] = Field(None, alias="isFeatured")
    is_global: Optional[StrictBool] = Field(None, alias="isGlobal")
    is_logo_manual: Optional[StrictBool] = Field(None, alias="isLogoManual")
    is_private: Optional[StrictBool] = Field(None, alias="isPrivate")
    labels: Optional[conlist(StrictStr)] = None
    logo: Optional[StrictStr] = None
    related_modules: Optional[conlist(RelatedModuleRequest)] = Field(None, alias="relatedModules")
    repository_name: Optional[StrictStr] = Field(None, alias="repositoryName")
    repository_owner: Optional[StrictStr] = Field(None, alias="repositoryOwner")
    social_stats: Optional[SocialStats] = Field(None, alias="socialStats")
    task_dependency_tree: Optional[conlist(TaskDependencyTree)] = Field(None, alias="taskDependencyTree")
    type: StrictStr = Field(...)
    __properties = ["description", "displayName", "documentation", "filePath", "githubRawDockerfileUrl", "githubRawRequirementsUrl", "githubRawSourceUrl", "githubRepositoryUrl", "githubSourceUrl", "isCertified", "isCloudIDECompatible", "isDisplayNameManual", "isFeatured", "isGlobal", "isLogoManual", "isPrivate", "labels", "logo", "relatedModules", "repositoryName", "repositoryOwner", "socialStats", "taskDependencyTree", "type"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('Official', 'Core', 'Partner', 'Community'):
            raise ValueError("must be one of enum values ('Official', 'Core', 'Partner', 'Community')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateDagRequest:
        """Create an instance of UpdateDagRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in related_modules (list)
        _items = []
        if self.related_modules:
            for _item in self.related_modules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['relatedModules'] = _items
        # override the default output from pydantic by calling `to_dict()` of social_stats
        if self.social_stats:
            _dict['socialStats'] = self.social_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in task_dependency_tree (list)
        _items = []
        if self.task_dependency_tree:
            for _item in self.task_dependency_tree:
                if _item:
                    _items.append(_item.to_dict())
            _dict['taskDependencyTree'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateDagRequest:
        """Create an instance of UpdateDagRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateDagRequest.parse_obj(obj)

        _obj = UpdateDagRequest.parse_obj({
            "description": obj.get("description"),
            "display_name": obj.get("displayName"),
            "documentation": obj.get("documentation"),
            "file_path": obj.get("filePath"),
            "github_raw_dockerfile_url": obj.get("githubRawDockerfileUrl"),
            "github_raw_requirements_url": obj.get("githubRawRequirementsUrl"),
            "github_raw_source_url": obj.get("githubRawSourceUrl"),
            "github_repository_url": obj.get("githubRepositoryUrl"),
            "github_source_url": obj.get("githubSourceUrl"),
            "is_certified": obj.get("isCertified"),
            "is_cloud_ide_compatible": obj.get("isCloudIDECompatible"),
            "is_display_name_manual": obj.get("isDisplayNameManual"),
            "is_featured": obj.get("isFeatured"),
            "is_global": obj.get("isGlobal"),
            "is_logo_manual": obj.get("isLogoManual"),
            "is_private": obj.get("isPrivate"),
            "labels": obj.get("labels"),
            "logo": obj.get("logo"),
            "related_modules": [RelatedModuleRequest.from_dict(_item) for _item in obj.get("relatedModules")] if obj.get("relatedModules") is not None else None,
            "repository_name": obj.get("repositoryName"),
            "repository_owner": obj.get("repositoryOwner"),
            "social_stats": SocialStats.from_dict(obj.get("socialStats")) if obj.get("socialStats") is not None else None,
            "task_dependency_tree": [TaskDependencyTree.from_dict(_item) for _item in obj.get("taskDependencyTree")] if obj.get("taskDependencyTree") is not None else None,
            "type": obj.get("type")
        })
        return _obj

