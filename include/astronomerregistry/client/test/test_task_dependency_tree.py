# coding: utf-8

"""
    Astro Registry API

    Astro Registry API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import astronomerregistry
from astronomerregistry.models.task_dependency_tree import TaskDependencyTree  # noqa: E501
from astronomerregistry.rest import ApiException

class TestTaskDependencyTree(unittest.TestCase):
    """TaskDependencyTree unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test TaskDependencyTree
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TaskDependencyTree`
        """
        model = astronomerregistry.models.task_dependency_tree.TaskDependencyTree()  # noqa: E501
        if include_optional :
            return TaskDependencyTree(
                children = [
                    astronomerregistry.models.task_dependency_tree.TaskDependencyTree(
                        children = [
                            astronomerregistry.models.task_dependency_tree.TaskDependencyTree(
                                children = , 
                                data = astronomerregistry.models.task_dependency.TaskDependency(
                                    operator = '', 
                                    provider = '', 
                                    version = '', ), 
                                id = '', 
                                task_group = '', )
                            ], 
                        data = astronomerregistry.models.task_dependency.TaskDependency(
                            operator = '', 
                            provider = '', 
                            version = '', ), 
                        id = '', 
                        task_group = '', )
                    ], 
                data = astronomerregistry.models.task_dependency.TaskDependency(
                    operator = '', 
                    provider = '', 
                    version = '', ), 
                id = '', 
                task_group = ''
            )
        else :
            return TaskDependencyTree(
                children = [
                    astronomerregistry.models.task_dependency_tree.TaskDependencyTree(
                        children = [
                            astronomerregistry.models.task_dependency_tree.TaskDependencyTree(
                                children = , 
                                data = astronomerregistry.models.task_dependency.TaskDependency(
                                    operator = '', 
                                    provider = '', 
                                    version = '', ), 
                                id = '', 
                                task_group = '', )
                            ], 
                        data = astronomerregistry.models.task_dependency.TaskDependency(
                            operator = '', 
                            provider = '', 
                            version = '', ), 
                        id = '', 
                        task_group = '', )
                    ],
                data = astronomerregistry.models.task_dependency.TaskDependency(
                    operator = '', 
                    provider = '', 
                    version = '', ),
                id = '',
        )
        """

    def testTaskDependencyTree(self):
        """Test TaskDependencyTree"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
