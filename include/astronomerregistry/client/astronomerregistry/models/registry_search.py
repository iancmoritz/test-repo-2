# coding: utf-8

"""
    Astro Registry API

    Astro Registry API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictInt, conlist
from astronomerregistry.models.registry_search_hit import RegistrySearchHit

class RegistrySearch(BaseModel):
    """
    RegistrySearch
    """
    registry_objects: conlist(RegistrySearchHit) = Field(..., alias="registryObjects", description="@iancmoritz TODO TEMPORARY, need a way to combine the results of the three different types of searches")
    total_dag_count: StrictInt = Field(..., alias="totalDagCount")
    total_module_count: StrictInt = Field(..., alias="totalModuleCount")
    total_provider_count: StrictInt = Field(..., alias="totalProviderCount")
    __properties = ["registryObjects", "totalDagCount", "totalModuleCount", "totalProviderCount"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RegistrySearch:
        """Create an instance of RegistrySearch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in registry_objects (list)
        _items = []
        if self.registry_objects:
            for _item in self.registry_objects:
                if _item:
                    _items.append(_item.to_dict())
            _dict['registryObjects'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RegistrySearch:
        """Create an instance of RegistrySearch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RegistrySearch.parse_obj(obj)

        _obj = RegistrySearch.parse_obj({
            "registry_objects": [RegistrySearchHit.from_dict(_item) for _item in obj.get("registryObjects")] if obj.get("registryObjects") is not None else None,
            "total_dag_count": obj.get("totalDagCount"),
            "total_module_count": obj.get("totalModuleCount"),
            "total_provider_count": obj.get("totalProviderCount")
        })
        return _obj

