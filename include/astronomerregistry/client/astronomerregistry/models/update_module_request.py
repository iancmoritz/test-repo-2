# coding: utf-8

"""
    Astro Registry API

    Astro Registry API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, validator
from astronomerregistry.models.module_inherits_from import ModuleInheritsFrom
from astronomerregistry.models.social_stats import SocialStats
from astronomerregistry.models.update_module_parameter_request import UpdateModuleParameterRequest

class UpdateModuleRequest(BaseModel):
    """
    UpdateModuleRequest
    """
    description: Optional[StrictStr] = None
    display_name: Optional[StrictStr] = Field(None, alias="displayName", description="Name                 string            `json:\"name\" validate:\"required\"`")
    documentation: Optional[StrictStr] = None
    github_url: Optional[StrictStr] = Field(None, alias="githubUrl")
    import_path: Optional[StrictStr] = Field(None, alias="importPath")
    inherits_from: Optional[ModuleInheritsFrom] = Field(None, alias="inheritsFrom")
    is_certified: Optional[StrictBool] = Field(None, alias="isCertified")
    is_cloud_ide_compatible: Optional[StrictBool] = Field(None, alias="isCloudIDECompatible")
    is_display_name_manual: Optional[StrictBool] = Field(None, alias="isDisplayNameManual")
    is_featured: Optional[StrictBool] = Field(None, alias="isFeatured")
    is_global: Optional[StrictBool] = Field(None, alias="isGlobal")
    is_logo_manual: Optional[StrictBool] = Field(None, alias="isLogoManual")
    is_private: Optional[StrictBool] = Field(None, alias="isPrivate")
    labels: Optional[conlist(StrictStr)] = None
    logo: Optional[StrictStr] = None
    parameters: Optional[conlist(UpdateModuleParameterRequest)] = None
    social_stats: Optional[SocialStats] = Field(None, alias="socialStats")
    type: StrictStr = Field(...)
    __properties = ["description", "displayName", "documentation", "githubUrl", "importPath", "inheritsFrom", "isCertified", "isCloudIDECompatible", "isDisplayNameManual", "isFeatured", "isGlobal", "isLogoManual", "isPrivate", "labels", "logo", "parameters", "socialStats", "type"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('Decorators', 'Functions', 'Hooks', 'Lineage', 'Log', 'Operators', 'Notifications', 'Secrets', 'Sensors', 'Transfers', 'Triggers', 'XCom'):
            raise ValueError("must be one of enum values ('Decorators', 'Functions', 'Hooks', 'Lineage', 'Log', 'Operators', 'Notifications', 'Secrets', 'Sensors', 'Transfers', 'Triggers', 'XCom')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateModuleRequest:
        """Create an instance of UpdateModuleRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of inherits_from
        if self.inherits_from:
            _dict['inheritsFrom'] = self.inherits_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item in self.parameters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['parameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of social_stats
        if self.social_stats:
            _dict['socialStats'] = self.social_stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateModuleRequest:
        """Create an instance of UpdateModuleRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateModuleRequest.parse_obj(obj)

        _obj = UpdateModuleRequest.parse_obj({
            "description": obj.get("description"),
            "display_name": obj.get("displayName"),
            "documentation": obj.get("documentation"),
            "github_url": obj.get("githubUrl"),
            "import_path": obj.get("importPath"),
            "inherits_from": ModuleInheritsFrom.from_dict(obj.get("inheritsFrom")) if obj.get("inheritsFrom") is not None else None,
            "is_certified": obj.get("isCertified"),
            "is_cloud_ide_compatible": obj.get("isCloudIDECompatible"),
            "is_display_name_manual": obj.get("isDisplayNameManual"),
            "is_featured": obj.get("isFeatured"),
            "is_global": obj.get("isGlobal"),
            "is_logo_manual": obj.get("isLogoManual"),
            "is_private": obj.get("isPrivate"),
            "labels": obj.get("labels"),
            "logo": obj.get("logo"),
            "parameters": [UpdateModuleParameterRequest.from_dict(_item) for _item in obj.get("parameters")] if obj.get("parameters") is not None else None,
            "social_stats": SocialStats.from_dict(obj.get("socialStats")) if obj.get("socialStats") is not None else None,
            "type": obj.get("type")
        })
        return _obj

