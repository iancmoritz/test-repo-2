# coding: utf-8

"""
    Astro Registry API

    Astro Registry API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from astronomerregistry.models.label_graphics import LabelGraphics

class Label(BaseModel):
    """
    Label
    """
    created_at: StrictStr = Field(..., alias="createdAt")
    created_by: StrictStr = Field(..., alias="createdBy")
    description: Optional[StrictStr] = None
    graphics: Optional[LabelGraphics] = None
    id: StrictStr = Field(...)
    name: StrictStr = Field(...)
    organization_id: Optional[StrictStr] = Field(None, alias="organizationId")
    updated_at: StrictStr = Field(..., alias="updatedAt")
    updated_by: StrictStr = Field(..., alias="updatedBy")
    __properties = ["createdAt", "createdBy", "description", "graphics", "id", "name", "organizationId", "updatedAt", "updatedBy"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Label:
        """Create an instance of Label from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of graphics
        if self.graphics:
            _dict['graphics'] = self.graphics.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Label:
        """Create an instance of Label from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Label.parse_obj(obj)

        _obj = Label.parse_obj({
            "created_at": obj.get("createdAt"),
            "created_by": obj.get("createdBy"),
            "description": obj.get("description"),
            "graphics": LabelGraphics.from_dict(obj.get("graphics")) if obj.get("graphics") is not None else None,
            "id": obj.get("id"),
            "name": obj.get("name"),
            "organization_id": obj.get("organizationId"),
            "updated_at": obj.get("updatedAt"),
            "updated_by": obj.get("updatedBy")
        })
        return _obj

