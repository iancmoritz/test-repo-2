# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from astronomercoreapi.models.resource_option import ResourceOption

class ResourceQuotaOptions(BaseModel):
    """
    ResourceQuotaOptions
    """
    default_pod_size: ResourceOption = Field(..., alias="defaultPodSize")
    resource_quota: ResourceOption = Field(..., alias="resourceQuota")
    __properties = ["defaultPodSize", "resourceQuota"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ResourceQuotaOptions:
        """Create an instance of ResourceQuotaOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of default_pod_size
        if self.default_pod_size:
            _dict['defaultPodSize'] = self.default_pod_size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_quota
        if self.resource_quota:
            _dict['resourceQuota'] = self.resource_quota.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ResourceQuotaOptions:
        """Create an instance of ResourceQuotaOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ResourceQuotaOptions.parse_obj(obj)

        _obj = ResourceQuotaOptions.parse_obj({
            "default_pod_size": ResourceOption.from_dict(obj.get("defaultPodSize")) if obj.get("defaultPodSize") is not None else None,
            "resource_quota": ResourceOption.from_dict(obj.get("resourceQuota")) if obj.get("resourceQuota") is not None else None
        })
        return _obj

