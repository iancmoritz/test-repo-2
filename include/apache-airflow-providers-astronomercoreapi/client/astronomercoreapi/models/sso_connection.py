# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from astronomercoreapi.models.jit_policy import JitPolicy
from astronomercoreapi.models.managed_domain import ManagedDomain
from astronomercoreapi.models.sso_connection_config import SsoConnectionConfig

class SsoConnection(BaseModel):
    """
    SsoConnection
    """
    auth0_connection_id: StrictStr = Field(..., alias="auth0ConnectionId")
    auth0_connection_name: StrictStr = Field(..., alias="auth0ConnectionName")
    configuration: SsoConnectionConfig = Field(...)
    enabled: StrictBool = Field(...)
    id: StrictStr = Field(...)
    jit_policy: Optional[JitPolicy] = Field(None, alias="jitPolicy")
    managed_domains: conlist(ManagedDomain) = Field(..., alias="managedDomains")
    organization_id: StrictStr = Field(..., alias="organizationId")
    __properties = ["auth0ConnectionId", "auth0ConnectionName", "configuration", "enabled", "id", "jitPolicy", "managedDomains", "organizationId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SsoConnection:
        """Create an instance of SsoConnection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of configuration
        if self.configuration:
            _dict['configuration'] = self.configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of jit_policy
        if self.jit_policy:
            _dict['jitPolicy'] = self.jit_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in managed_domains (list)
        _items = []
        if self.managed_domains:
            for _item in self.managed_domains:
                if _item:
                    _items.append(_item.to_dict())
            _dict['managedDomains'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SsoConnection:
        """Create an instance of SsoConnection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SsoConnection.parse_obj(obj)

        _obj = SsoConnection.parse_obj({
            "auth0_connection_id": obj.get("auth0ConnectionId"),
            "auth0_connection_name": obj.get("auth0ConnectionName"),
            "configuration": SsoConnectionConfig.from_dict(obj.get("configuration")) if obj.get("configuration") is not None else None,
            "enabled": obj.get("enabled"),
            "id": obj.get("id"),
            "jit_policy": JitPolicy.from_dict(obj.get("jitPolicy")) if obj.get("jitPolicy") is not None else None,
            "managed_domains": [ManagedDomain.from_dict(_item) for _item in obj.get("managedDomains")] if obj.get("managedDomains") is not None else None,
            "organization_id": obj.get("organizationId")
        })
        return _obj

