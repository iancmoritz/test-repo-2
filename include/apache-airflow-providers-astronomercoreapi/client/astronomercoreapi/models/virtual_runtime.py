# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from astronomercoreapi.models.basic_subject_profile import BasicSubjectProfile
from astronomercoreapi.models.connection import Connection
from astronomercoreapi.models.vr_variable import VRVariable

class VirtualRuntime(BaseModel):
    """
    VirtualRuntime
    """
    base_image: Optional[StrictStr] = Field(None, alias="baseImage")
    cluster_id: Optional[StrictStr] = Field(None, alias="clusterId")
    connections: Optional[conlist(Connection)] = None
    created_at: datetime = Field(..., alias="createdAt")
    created_by_user: BasicSubjectProfile = Field(..., alias="createdByUser")
    deleted_at: Optional[datetime] = Field(None, alias="deletedAt")
    description: StrictStr = Field(...)
    id: StrictStr = Field(...)
    name: StrictStr = Field(...)
    organization_id: Optional[StrictStr] = Field(None, alias="organizationId")
    organization_name: Optional[StrictStr] = Field(None, alias="organizationName")
    organization_short_name: Optional[StrictStr] = Field(None, alias="organizationShortName")
    release_name: StrictStr = Field(..., alias="releaseName")
    requirements: Optional[conlist(StrictStr)] = None
    requirements_validate_status: Optional[StrictStr] = Field(None, alias="requirementsValidateStatus")
    runtime_version: Optional[StrictStr] = Field(None, alias="runtimeVersion")
    task_mem_gib: Union[StrictFloat, StrictInt] = Field(..., alias="taskMemGib")
    updated_at: datetime = Field(..., alias="updatedAt")
    updated_by_user: BasicSubjectProfile = Field(..., alias="updatedByUser")
    variables: Optional[conlist(VRVariable)] = None
    web_server_ingress_hostname: Optional[StrictStr] = Field(None, alias="webServerIngressHostname")
    web_server_url: Optional[StrictStr] = Field(None, alias="webServerUrl")
    workspace_id: StrictStr = Field(..., alias="workspaceId")
    workspace_name: Optional[StrictStr] = Field(None, alias="workspaceName")
    __properties = ["baseImage", "clusterId", "connections", "createdAt", "createdByUser", "deletedAt", "description", "id", "name", "organizationId", "organizationName", "organizationShortName", "releaseName", "requirements", "requirementsValidateStatus", "runtimeVersion", "taskMemGib", "updatedAt", "updatedByUser", "variables", "webServerIngressHostname", "webServerUrl", "workspaceId", "workspaceName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VirtualRuntime:
        """Create an instance of VirtualRuntime from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in connections (list)
        _items = []
        if self.connections:
            for _item in self.connections:
                if _item:
                    _items.append(_item.to_dict())
            _dict['connections'] = _items
        # override the default output from pydantic by calling `to_dict()` of created_by_user
        if self.created_by_user:
            _dict['createdByUser'] = self.created_by_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_by_user
        if self.updated_by_user:
            _dict['updatedByUser'] = self.updated_by_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in variables (list)
        _items = []
        if self.variables:
            for _item in self.variables:
                if _item:
                    _items.append(_item.to_dict())
            _dict['variables'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VirtualRuntime:
        """Create an instance of VirtualRuntime from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VirtualRuntime.parse_obj(obj)

        _obj = VirtualRuntime.parse_obj({
            "base_image": obj.get("baseImage"),
            "cluster_id": obj.get("clusterId"),
            "connections": [Connection.from_dict(_item) for _item in obj.get("connections")] if obj.get("connections") is not None else None,
            "created_at": obj.get("createdAt"),
            "created_by_user": BasicSubjectProfile.from_dict(obj.get("createdByUser")) if obj.get("createdByUser") is not None else None,
            "deleted_at": obj.get("deletedAt"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "organization_id": obj.get("organizationId"),
            "organization_name": obj.get("organizationName"),
            "organization_short_name": obj.get("organizationShortName"),
            "release_name": obj.get("releaseName"),
            "requirements": obj.get("requirements"),
            "requirements_validate_status": obj.get("requirementsValidateStatus"),
            "runtime_version": obj.get("runtimeVersion"),
            "task_mem_gib": obj.get("taskMemGib"),
            "updated_at": obj.get("updatedAt"),
            "updated_by_user": BasicSubjectProfile.from_dict(obj.get("updatedByUser")) if obj.get("updatedByUser") is not None else None,
            "variables": [VRVariable.from_dict(_item) for _item in obj.get("variables")] if obj.get("variables") is not None else None,
            "web_server_ingress_hostname": obj.get("webServerIngressHostname"),
            "web_server_url": obj.get("webServerUrl"),
            "workspace_id": obj.get("workspaceId"),
            "workspace_name": obj.get("workspaceName")
        })
        return _obj

