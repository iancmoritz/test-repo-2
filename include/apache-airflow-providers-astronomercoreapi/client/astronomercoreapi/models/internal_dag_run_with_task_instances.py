# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from astronomercoreapi.models.internal_task_instances_inner import InternalTaskInstancesInner

class InternalDagRunWithTaskInstances(BaseModel):
    """
    InternalDagRunWithTaskInstances
    """
    data_interval_end: Optional[StrictStr] = Field(None, alias="dataIntervalEnd")
    data_interval_start: Optional[StrictStr] = Field(None, alias="dataIntervalStart")
    end_date: Optional[StrictStr] = Field(None, alias="endDate")
    logical_date: Optional[StrictStr] = Field(None, alias="logicalDate")
    run_id: Optional[StrictStr] = Field(None, alias="runId")
    run_type: Optional[StrictStr] = Field(None, alias="runType")
    start_date: Optional[StrictStr] = Field(None, alias="startDate")
    state: Optional[StrictStr] = None
    task_instances: Optional[conlist(InternalTaskInstancesInner)] = Field(None, alias="taskInstances")
    __properties = ["dataIntervalEnd", "dataIntervalStart", "endDate", "logicalDate", "runId", "runType", "startDate", "state", "taskInstances"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InternalDagRunWithTaskInstances:
        """Create an instance of InternalDagRunWithTaskInstances from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in task_instances (list)
        _items = []
        if self.task_instances:
            for _item in self.task_instances:
                if _item:
                    _items.append(_item.to_dict())
            _dict['taskInstances'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InternalDagRunWithTaskInstances:
        """Create an instance of InternalDagRunWithTaskInstances from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InternalDagRunWithTaskInstances.parse_obj(obj)

        _obj = InternalDagRunWithTaskInstances.parse_obj({
            "data_interval_end": obj.get("dataIntervalEnd"),
            "data_interval_start": obj.get("dataIntervalStart"),
            "end_date": obj.get("endDate"),
            "logical_date": obj.get("logicalDate"),
            "run_id": obj.get("runId"),
            "run_type": obj.get("runType"),
            "start_date": obj.get("startDate"),
            "state": obj.get("state"),
            "task_instances": [InternalTaskInstancesInner.from_dict(_item) for _item in obj.get("taskInstances")] if obj.get("taskInstances") is not None else None
        })
        return _obj

