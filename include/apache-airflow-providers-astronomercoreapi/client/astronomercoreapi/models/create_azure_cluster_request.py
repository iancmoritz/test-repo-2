# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, validator
from astronomercoreapi.models.cluster_tag import ClusterTag
from astronomercoreapi.models.create_node_pool_request import CreateNodePoolRequest

class CreateAzureClusterRequest(BaseModel):
    """
    CreateAzureClusterRequest
    """
    db_instance_type: StrictStr = Field(..., alias="dbInstanceType")
    is_dry_run: Optional[StrictBool] = Field(None, alias="isDryRun")
    k8s_tags: Optional[conlist(ClusterTag)] = Field(None, alias="k8sTags")
    name: StrictStr = Field(...)
    node_pools: Optional[conlist(CreateNodePoolRequest)] = Field(None, alias="nodePools")
    provider_account: Optional[StrictStr] = Field(None, alias="providerAccount")
    region: StrictStr = Field(...)
    template_version: StrictStr = Field(..., alias="templateVersion")
    tenant_id: Optional[StrictStr] = Field(None, alias="tenantId")
    type: StrictStr = Field(...)
    vpc_subnet_range: StrictStr = Field(..., alias="vpcSubnetRange")
    __properties = ["dbInstanceType", "isDryRun", "k8sTags", "name", "nodePools", "providerAccount", "region", "templateVersion", "tenantId", "type", "vpcSubnetRange"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('HOSTED', 'BRING_YOUR_OWN_CLOUD', 'VIRTUAL_RUNTIMES', 'SHARED'):
            raise ValueError("must be one of enum values ('HOSTED', 'BRING_YOUR_OWN_CLOUD', 'VIRTUAL_RUNTIMES', 'SHARED')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateAzureClusterRequest:
        """Create an instance of CreateAzureClusterRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in k8s_tags (list)
        _items = []
        if self.k8s_tags:
            for _item in self.k8s_tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict['k8sTags'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in node_pools (list)
        _items = []
        if self.node_pools:
            for _item in self.node_pools:
                if _item:
                    _items.append(_item.to_dict())
            _dict['nodePools'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateAzureClusterRequest:
        """Create an instance of CreateAzureClusterRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateAzureClusterRequest.parse_obj(obj)

        _obj = CreateAzureClusterRequest.parse_obj({
            "db_instance_type": obj.get("dbInstanceType"),
            "is_dry_run": obj.get("isDryRun"),
            "k8s_tags": [ClusterTag.from_dict(_item) for _item in obj.get("k8sTags")] if obj.get("k8sTags") is not None else None,
            "name": obj.get("name"),
            "node_pools": [CreateNodePoolRequest.from_dict(_item) for _item in obj.get("nodePools")] if obj.get("nodePools") is not None else None,
            "provider_account": obj.get("providerAccount"),
            "region": obj.get("region"),
            "template_version": obj.get("templateVersion"),
            "tenant_id": obj.get("tenantId"),
            "type": obj.get("type"),
            "vpc_subnet_range": obj.get("vpcSubnetRange")
        })
        return _obj

