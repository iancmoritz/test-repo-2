# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class TeamMember(BaseModel):
    """
    TeamMember
    """
    avatar_url: Optional[StrictStr] = Field(None, alias="avatarUrl")
    created_at: Optional[StrictStr] = Field(None, alias="createdAt")
    full_name: Optional[StrictStr] = Field(None, alias="fullName")
    user_id: StrictStr = Field(..., alias="userId")
    username: StrictStr = Field(...)
    __properties = ["avatarUrl", "createdAt", "fullName", "userId", "username"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TeamMember:
        """Create an instance of TeamMember from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TeamMember:
        """Create an instance of TeamMember from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TeamMember.parse_obj(obj)

        _obj = TeamMember.parse_obj({
            "avatar_url": obj.get("avatarUrl"),
            "created_at": obj.get("createdAt"),
            "full_name": obj.get("fullName"),
            "user_id": obj.get("userId"),
            "username": obj.get("username")
        })
        return _obj

