# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class CreatePipelineRequest(BaseModel):
    """
    CreatePipelineRequest
    """
    description: Optional[StrictStr] = None
    name: StrictStr = Field(...)
    schedule_interval: Optional[StrictStr] = Field(None, alias="scheduleInterval")
    start_date: Optional[StrictStr] = Field(None, alias="startDate")
    timezone: Optional[StrictStr] = None
    __properties = ["description", "name", "scheduleInterval", "startDate", "timezone"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreatePipelineRequest:
        """Create an instance of CreatePipelineRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreatePipelineRequest:
        """Create an instance of CreatePipelineRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreatePipelineRequest.parse_obj(obj)

        _obj = CreatePipelineRequest.parse_obj({
            "description": obj.get("description"),
            "name": obj.get("name"),
            "schedule_interval": obj.get("scheduleInterval"),
            "start_date": obj.get("startDate"),
            "timezone": obj.get("timezone")
        })
        return _obj

