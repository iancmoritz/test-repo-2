# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from astronomercoreapi.models.invite import Invite
from astronomercoreapi.models.user_role import UserRole

class User(BaseModel):
    """
    User
    """
    avatar_url: StrictStr = Field(..., alias="avatarUrl")
    color_mode_preference: Optional[StrictStr] = Field(None, alias="colorModePreference")
    created_at: datetime = Field(..., alias="createdAt")
    full_name: StrictStr = Field(..., alias="fullName")
    id: StrictStr = Field(...)
    invites: Optional[conlist(Invite)] = None
    last_login: Optional[StrictStr] = Field(None, alias="lastLogin", description="Only shown if admin listing users")
    last_login_connection_name: Optional[StrictStr] = Field(None, alias="lastLoginConnectionName", description="Only shown if admin listing users")
    last_login_connection_type: Optional[StrictStr] = Field(None, alias="lastLoginConnectionType", description="Only shown if admin listing users")
    org_count: Optional[StrictInt] = Field(None, alias="orgCount", description="Only shown if admin listing users")
    org_role: Optional[StrictStr] = Field(None, alias="orgRole", description="Only shown if listing org users")
    org_user_relation_is_idp_managed: Optional[StrictBool] = Field(None, alias="orgUserRelationIsIdpManaged", description="Only shown if listing org users")
    roles: Optional[conlist(UserRole)] = Field(None, description="Only shown if admin listing users")
    status: StrictStr = Field(...)
    system_role: Optional[StrictStr] = Field(None, alias="systemRole", description="Only shown if admin listing users")
    updated_at: datetime = Field(..., alias="updatedAt")
    username: StrictStr = Field(...)
    workspace_count: Optional[StrictInt] = Field(None, alias="workspaceCount", description="Only shown if admin listing users")
    workspace_role: Optional[StrictStr] = Field(None, alias="workspaceRole", description="Only shown if listing workspace users")
    __properties = ["avatarUrl", "colorModePreference", "createdAt", "fullName", "id", "invites", "lastLogin", "lastLoginConnectionName", "lastLoginConnectionType", "orgCount", "orgRole", "orgUserRelationIsIdpManaged", "roles", "status", "systemRole", "updatedAt", "username", "workspaceCount", "workspaceRole"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> User:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in invites (list)
        _items = []
        if self.invites:
            for _item in self.invites:
                if _item:
                    _items.append(_item.to_dict())
            _dict['invites'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in roles (list)
        _items = []
        if self.roles:
            for _item in self.roles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['roles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> User:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return User.parse_obj(obj)

        _obj = User.parse_obj({
            "avatar_url": obj.get("avatarUrl"),
            "color_mode_preference": obj.get("colorModePreference"),
            "created_at": obj.get("createdAt"),
            "full_name": obj.get("fullName"),
            "id": obj.get("id"),
            "invites": [Invite.from_dict(_item) for _item in obj.get("invites")] if obj.get("invites") is not None else None,
            "last_login": obj.get("lastLogin"),
            "last_login_connection_name": obj.get("lastLoginConnectionName"),
            "last_login_connection_type": obj.get("lastLoginConnectionType"),
            "org_count": obj.get("orgCount"),
            "org_role": obj.get("orgRole"),
            "org_user_relation_is_idp_managed": obj.get("orgUserRelationIsIdpManaged"),
            "roles": [UserRole.from_dict(_item) for _item in obj.get("roles")] if obj.get("roles") is not None else None,
            "status": obj.get("status"),
            "system_role": obj.get("systemRole"),
            "updated_at": obj.get("updatedAt"),
            "username": obj.get("username"),
            "workspace_count": obj.get("workspaceCount"),
            "workspace_role": obj.get("workspaceRole")
        })
        return _obj

