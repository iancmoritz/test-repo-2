# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictStr, validator

class Entitlement(BaseModel):
    """
    Entitlement
    """
    enabled: StrictBool = Field(...)
    required_tier: StrictStr = Field(..., alias="requiredTier")
    __properties = ["enabled", "requiredTier"]

    @validator('required_tier')
    def required_tier_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('TRIAL', 'BASIC', 'STANDARD', 'PREMIUM', 'BUSINESS_CRITICAL'):
            raise ValueError("must be one of enum values ('TRIAL', 'BASIC', 'STANDARD', 'PREMIUM', 'BUSINESS_CRITICAL')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Entitlement:
        """Create an instance of Entitlement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Entitlement:
        """Create an instance of Entitlement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Entitlement.parse_obj(obj)

        _obj = Entitlement.parse_obj({
            "enabled": obj.get("enabled"),
            "required_tier": obj.get("requiredTier")
        })
        return _obj

