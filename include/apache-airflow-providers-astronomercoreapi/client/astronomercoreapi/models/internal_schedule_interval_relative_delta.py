# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictInt

class InternalScheduleIntervalRelativeDelta(BaseModel):
    """
    InternalScheduleIntervalRelativeDelta
    """
    day: Optional[StrictInt] = None
    days: Optional[StrictInt] = None
    hour: Optional[StrictInt] = None
    hours: Optional[StrictInt] = None
    leapdays: Optional[StrictInt] = None
    microsecond: Optional[StrictInt] = None
    microseconds: Optional[StrictInt] = None
    minute: Optional[StrictInt] = None
    minutes: Optional[StrictInt] = None
    month: Optional[StrictInt] = None
    months: Optional[StrictInt] = None
    second: Optional[StrictInt] = None
    seconds: Optional[StrictInt] = None
    week: Optional[StrictInt] = None
    weeks: Optional[StrictInt] = None
    year: Optional[StrictInt] = None
    years: Optional[StrictInt] = None
    __properties = ["day", "days", "hour", "hours", "leapdays", "microsecond", "microseconds", "minute", "minutes", "month", "months", "second", "seconds", "week", "weeks", "year", "years"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InternalScheduleIntervalRelativeDelta:
        """Create an instance of InternalScheduleIntervalRelativeDelta from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InternalScheduleIntervalRelativeDelta:
        """Create an instance of InternalScheduleIntervalRelativeDelta from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InternalScheduleIntervalRelativeDelta.parse_obj(obj)

        _obj = InternalScheduleIntervalRelativeDelta.parse_obj({
            "day": obj.get("day"),
            "days": obj.get("days"),
            "hour": obj.get("hour"),
            "hours": obj.get("hours"),
            "leapdays": obj.get("leapdays"),
            "microsecond": obj.get("microsecond"),
            "microseconds": obj.get("microseconds"),
            "minute": obj.get("minute"),
            "minutes": obj.get("minutes"),
            "month": obj.get("month"),
            "months": obj.get("months"),
            "second": obj.get("second"),
            "seconds": obj.get("seconds"),
            "week": obj.get("week"),
            "weeks": obj.get("weeks"),
            "year": obj.get("year"),
            "years": obj.get("years")
        })
        return _obj

