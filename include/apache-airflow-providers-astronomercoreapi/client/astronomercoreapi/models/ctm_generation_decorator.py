# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist

class CtmGenerationDecorator(BaseModel):
    """
    CtmGenerationDecorator
    """
    decorator_arg_configs: Optional[conlist(StrictStr)] = Field(None, alias="decoratorArgConfigs", description="The cell type configs that will be passed as keyword arguments to the decorator")
    decorator_function_params: Optional[conlist(StrictStr)] = Field(None, alias="decoratorFunctionParams", description="Positional function parameters that are added by the decorator")
    decorator_name: StrictStr = Field(..., alias="decoratorName", description="The name of the decorator")
    function_arg_configs: Optional[conlist(StrictStr)] = Field(None, alias="functionArgConfigs", description="The cell type configs that will be passed as keyword arguments to the function")
    function_code_config: StrictStr = Field(..., alias="functionCodeConfig", description="The cell type config that will contain the function code")
    imports: Optional[conlist(StrictStr)] = Field(None, description="Import statements for the decorator cell type")
    include_implicit_deps: Optional[StrictBool] = Field(None, alias="includeImplicitDeps", description="Whether to pass implicit dependencies as positional arguments to the function")
    include_task_id_as_decorator_arg: Optional[StrictBool] = Field(None, alias="includeTaskIdAsDecoratorArg", description="Whether to pass the task id as a keyword argument to the decorator")
    include_task_id_as_function_arg: Optional[StrictBool] = Field(None, alias="includeTaskIdAsFunctionArg", description="Whether to pass the task id as a keyword argument to the function")
    __properties = ["decoratorArgConfigs", "decoratorFunctionParams", "decoratorName", "functionArgConfigs", "functionCodeConfig", "imports", "includeImplicitDeps", "includeTaskIdAsDecoratorArg", "includeTaskIdAsFunctionArg"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CtmGenerationDecorator:
        """Create an instance of CtmGenerationDecorator from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CtmGenerationDecorator:
        """Create an instance of CtmGenerationDecorator from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CtmGenerationDecorator.parse_obj(obj)

        _obj = CtmGenerationDecorator.parse_obj({
            "decorator_arg_configs": obj.get("decoratorArgConfigs"),
            "decorator_function_params": obj.get("decoratorFunctionParams"),
            "decorator_name": obj.get("decoratorName"),
            "function_arg_configs": obj.get("functionArgConfigs"),
            "function_code_config": obj.get("functionCodeConfig"),
            "imports": obj.get("imports"),
            "include_implicit_deps": obj.get("includeImplicitDeps"),
            "include_task_id_as_decorator_arg": obj.get("includeTaskIdAsDecoratorArg"),
            "include_task_id_as_function_arg": obj.get("includeTaskIdAsFunctionArg")
        })
        return _obj

