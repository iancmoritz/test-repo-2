# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class InstantMetricPerPoolStatus(BaseModel):
    """
    InstantMetricPerPoolStatus
    """
    deployment_id: StrictStr = Field(..., alias="deploymentId")
    pool: StrictStr = Field(...)
    release_name: StrictStr = Field(..., alias="releaseName")
    status: StrictStr = Field(...)
    value: Union[StrictFloat, StrictInt] = Field(...)
    workspace_id: StrictStr = Field(..., alias="workspaceId")
    __properties = ["deploymentId", "pool", "releaseName", "status", "value", "workspaceId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InstantMetricPerPoolStatus:
        """Create an instance of InstantMetricPerPoolStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InstantMetricPerPoolStatus:
        """Create an instance of InstantMetricPerPoolStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InstantMetricPerPoolStatus.parse_obj(obj)

        _obj = InstantMetricPerPoolStatus.parse_obj({
            "deployment_id": obj.get("deploymentId"),
            "pool": obj.get("pool"),
            "release_name": obj.get("releaseName"),
            "status": obj.get("status"),
            "value": obj.get("value"),
            "workspace_id": obj.get("workspaceId")
        })
        return _obj

