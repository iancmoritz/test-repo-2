# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist

class NodePool(BaseModel):
    """
    NodePool
    """
    cloud_provider: StrictStr = Field(..., alias="cloudProvider")
    cluster_id: StrictStr = Field(..., alias="clusterId")
    created_at: datetime = Field(..., alias="createdAt")
    id: StrictStr = Field(...)
    is_default: StrictBool = Field(..., alias="isDefault")
    max_node_count: StrictInt = Field(..., alias="maxNodeCount")
    name: StrictStr = Field(...)
    node_instance_type: StrictStr = Field(..., alias="nodeInstanceType")
    supported_astro_machines: Optional[conlist(StrictStr)] = Field(None, alias="supportedAstroMachines")
    updated_at: datetime = Field(..., alias="updatedAt")
    __properties = ["cloudProvider", "clusterId", "createdAt", "id", "isDefault", "maxNodeCount", "name", "nodeInstanceType", "supportedAstroMachines", "updatedAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NodePool:
        """Create an instance of NodePool from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NodePool:
        """Create an instance of NodePool from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NodePool.parse_obj(obj)

        _obj = NodePool.parse_obj({
            "cloud_provider": obj.get("cloudProvider"),
            "cluster_id": obj.get("clusterId"),
            "created_at": obj.get("createdAt"),
            "id": obj.get("id"),
            "is_default": obj.get("isDefault"),
            "max_node_count": obj.get("maxNodeCount"),
            "name": obj.get("name"),
            "node_instance_type": obj.get("nodeInstanceType"),
            "supported_astro_machines": obj.get("supportedAstroMachines"),
            "updated_at": obj.get("updatedAt")
        })
        return _obj

