# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator

class ManagedDomain(BaseModel):
    """
    ManagedDomain
    """
    created_at: datetime = Field(..., alias="createdAt")
    enforced_logins: Optional[conlist(StrictStr)] = Field(None, alias="enforcedLogins")
    id: StrictStr = Field(...)
    name: StrictStr = Field(...)
    organization_id: StrictStr = Field(..., alias="organizationId")
    status: StrictStr = Field(...)
    updated_at: datetime = Field(..., alias="updatedAt")
    __properties = ["createdAt", "enforcedLogins", "id", "name", "organizationId", "status", "updatedAt"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('PENDING', 'VERIFIED'):
            raise ValueError("must be one of enum values ('PENDING', 'VERIFIED')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ManagedDomain:
        """Create an instance of ManagedDomain from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ManagedDomain:
        """Create an instance of ManagedDomain from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ManagedDomain.parse_obj(obj)

        _obj = ManagedDomain.parse_obj({
            "created_at": obj.get("createdAt"),
            "enforced_logins": obj.get("enforcedLogins"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "organization_id": obj.get("organizationId"),
            "status": obj.get("status"),
            "updated_at": obj.get("updatedAt")
        })
        return _obj

