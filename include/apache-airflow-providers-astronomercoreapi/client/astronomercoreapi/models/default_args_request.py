# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint, conlist

class DefaultArgsRequest(BaseModel):
    """
    DefaultArgsRequest
    """
    depends_on_past: Optional[StrictBool] = Field(None, alias="dependsOnPast")
    email: Optional[conlist(StrictStr, unique_items=True)] = None
    email_on_failure: Optional[StrictBool] = Field(None, alias="emailOnFailure")
    email_on_retry: Optional[StrictBool] = Field(None, alias="emailOnRetry")
    execution_timeout_seconds: Optional[conint(strict=True, ge=0)] = Field(None, alias="executionTimeoutSeconds")
    max_retry_delay_seconds: Optional[conint(strict=True, ge=0)] = Field(None, alias="maxRetryDelaySeconds")
    queue: Optional[StrictStr] = None
    retries: Optional[conint(strict=True, ge=0)] = None
    retry_delay_seconds: Optional[conint(strict=True, ge=0)] = Field(None, alias="retryDelaySeconds")
    retry_exponential_backoff: Optional[StrictBool] = Field(None, alias="retryExponentialBackoff")
    sla_seconds: Optional[conint(strict=True, ge=0)] = Field(None, alias="slaSeconds")
    task_concurrency: Optional[conint(strict=True, ge=0)] = Field(None, alias="taskConcurrency")
    trigger_rule: Optional[StrictStr] = Field(None, alias="triggerRule")
    __properties = ["dependsOnPast", "email", "emailOnFailure", "emailOnRetry", "executionTimeoutSeconds", "maxRetryDelaySeconds", "queue", "retries", "retryDelaySeconds", "retryExponentialBackoff", "slaSeconds", "taskConcurrency", "triggerRule"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DefaultArgsRequest:
        """Create an instance of DefaultArgsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DefaultArgsRequest:
        """Create an instance of DefaultArgsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DefaultArgsRequest.parse_obj(obj)

        _obj = DefaultArgsRequest.parse_obj({
            "depends_on_past": obj.get("dependsOnPast"),
            "email": obj.get("email"),
            "email_on_failure": obj.get("emailOnFailure"),
            "email_on_retry": obj.get("emailOnRetry"),
            "execution_timeout_seconds": obj.get("executionTimeoutSeconds"),
            "max_retry_delay_seconds": obj.get("maxRetryDelaySeconds"),
            "queue": obj.get("queue"),
            "retries": obj.get("retries"),
            "retry_delay_seconds": obj.get("retryDelaySeconds"),
            "retry_exponential_backoff": obj.get("retryExponentialBackoff"),
            "sla_seconds": obj.get("slaSeconds"),
            "task_concurrency": obj.get("taskConcurrency"),
            "trigger_rule": obj.get("triggerRule")
        })
        return _obj

