# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from astronomercoreapi.models.deployment_instance_spec_request import DeploymentInstanceSpecRequest

class CreateDeploymentRequest(BaseModel):
    """
    CreateDeploymentRequest
    """
    astro_runtime_version: StrictStr = Field(..., alias="astroRuntimeVersion")
    cluster_id: StrictStr = Field(..., alias="clusterId")
    description: Optional[StrictStr] = None
    executor: StrictStr = Field(...)
    name: StrictStr = Field(...)
    scheduler: DeploymentInstanceSpecRequest = Field(...)
    __properties = ["astroRuntimeVersion", "clusterId", "description", "executor", "name", "scheduler"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateDeploymentRequest:
        """Create an instance of CreateDeploymentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of scheduler
        if self.scheduler:
            _dict['scheduler'] = self.scheduler.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateDeploymentRequest:
        """Create an instance of CreateDeploymentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateDeploymentRequest.parse_obj(obj)

        _obj = CreateDeploymentRequest.parse_obj({
            "astro_runtime_version": obj.get("astroRuntimeVersion"),
            "cluster_id": obj.get("clusterId"),
            "description": obj.get("description"),
            "executor": obj.get("executor"),
            "name": obj.get("name"),
            "scheduler": DeploymentInstanceSpecRequest.from_dict(obj.get("scheduler")) if obj.get("scheduler") is not None else None
        })
        return _obj

