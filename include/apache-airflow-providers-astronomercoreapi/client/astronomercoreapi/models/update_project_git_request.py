# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator
from astronomercoreapi.models.update_project_git_vendor_attributes_request import UpdateProjectGitVendorAttributesRequest

class UpdateProjectGitRequest(BaseModel):
    """
    UpdateProjectGitRequest
    """
    branch: Optional[StrictStr] = None
    dags_path: Optional[StrictStr] = Field(None, alias="dagsPath")
    git_vendor_attributes: Optional[UpdateProjectGitVendorAttributesRequest] = Field(None, alias="gitVendorAttributes")
    repo: Optional[StrictStr] = None
    token: Optional[StrictStr] = None
    vendor: Optional[StrictStr] = None
    __properties = ["branch", "dagsPath", "gitVendorAttributes", "repo", "token", "vendor"]

    @validator('vendor')
    def vendor_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('github', 'gitlab', 'azurerepos'):
            raise ValueError("must be one of enum values ('github', 'gitlab', 'azurerepos')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateProjectGitRequest:
        """Create an instance of UpdateProjectGitRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of git_vendor_attributes
        if self.git_vendor_attributes:
            _dict['gitVendorAttributes'] = self.git_vendor_attributes.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateProjectGitRequest:
        """Create an instance of UpdateProjectGitRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateProjectGitRequest.parse_obj(obj)

        _obj = UpdateProjectGitRequest.parse_obj({
            "branch": obj.get("branch"),
            "dags_path": obj.get("dagsPath"),
            "git_vendor_attributes": UpdateProjectGitVendorAttributesRequest.from_dict(obj.get("gitVendorAttributes")) if obj.get("gitVendorAttributes") is not None else None,
            "repo": obj.get("repo"),
            "token": obj.get("token"),
            "vendor": obj.get("vendor")
        })
        return _obj

