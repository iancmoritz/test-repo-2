# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class SsoConnectionConfig(BaseModel):
    """
    SsoConnectionConfig
    """
    azure_client_id: Optional[StrictStr] = Field(None, alias="azureClientId")
    azure_client_secret: Optional[StrictStr] = Field(None, alias="azureClientSecret")
    azure_domain_name: Optional[StrictStr] = Field(None, alias="azureDomainName")
    saml_sign_in_url: Optional[StrictStr] = Field(None, alias="samlSignInUrl")
    saml_sign_out_url: Optional[StrictStr] = Field(None, alias="samlSignOutUrl")
    saml_signing_cert: Optional[StrictStr] = Field(None, alias="samlSigningCert")
    strategy: StrictStr = Field(...)
    __properties = ["azureClientId", "azureClientSecret", "azureDomainName", "samlSignInUrl", "samlSignOutUrl", "samlSigningCert", "strategy"]

    @validator('strategy')
    def strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('samlp', 'waad'):
            raise ValueError("must be one of enum values ('samlp', 'waad')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SsoConnectionConfig:
        """Create an instance of SsoConnectionConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SsoConnectionConfig:
        """Create an instance of SsoConnectionConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SsoConnectionConfig.parse_obj(obj)

        _obj = SsoConnectionConfig.parse_obj({
            "azure_client_id": obj.get("azureClientId"),
            "azure_client_secret": obj.get("azureClientSecret"),
            "azure_domain_name": obj.get("azureDomainName"),
            "saml_sign_in_url": obj.get("samlSignInUrl"),
            "saml_sign_out_url": obj.get("samlSignOutUrl"),
            "saml_signing_cert": obj.get("samlSigningCert"),
            "strategy": obj.get("strategy")
        })
        return _obj

