# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from astronomercoreapi.models.provider_instance_type import ProviderInstanceType
from astronomercoreapi.models.provider_region import ProviderRegion
from astronomercoreapi.models.template_version import TemplateVersion

class ClusterOptions(BaseModel):
    """
    ClusterOptions
    """
    database_instances: conlist(ProviderInstanceType) = Field(..., alias="databaseInstances")
    default_database_instance: ProviderInstanceType = Field(..., alias="defaultDatabaseInstance")
    default_node_instance: ProviderInstanceType = Field(..., alias="defaultNodeInstance")
    default_pod_subnet_range: Optional[StrictStr] = Field(None, alias="defaultPodSubnetRange")
    default_region: ProviderRegion = Field(..., alias="defaultRegion")
    default_service_peering_range: Optional[StrictStr] = Field(None, alias="defaultServicePeeringRange")
    default_service_subnet_range: Optional[StrictStr] = Field(None, alias="defaultServiceSubnetRange")
    default_vpc_subnet_range: StrictStr = Field(..., alias="defaultVpcSubnetRange")
    node_count_default: StrictInt = Field(..., alias="nodeCountDefault")
    node_count_max: StrictInt = Field(..., alias="nodeCountMax")
    node_count_min: StrictInt = Field(..., alias="nodeCountMin")
    node_instances: conlist(ProviderInstanceType) = Field(..., alias="nodeInstances")
    provider: StrictStr = Field(...)
    regions: conlist(ProviderRegion) = Field(...)
    template_versions: conlist(TemplateVersion) = Field(..., alias="templateVersions")
    __properties = ["databaseInstances", "defaultDatabaseInstance", "defaultNodeInstance", "defaultPodSubnetRange", "defaultRegion", "defaultServicePeeringRange", "defaultServiceSubnetRange", "defaultVpcSubnetRange", "nodeCountDefault", "nodeCountMax", "nodeCountMin", "nodeInstances", "provider", "regions", "templateVersions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClusterOptions:
        """Create an instance of ClusterOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in database_instances (list)
        _items = []
        if self.database_instances:
            for _item in self.database_instances:
                if _item:
                    _items.append(_item.to_dict())
            _dict['databaseInstances'] = _items
        # override the default output from pydantic by calling `to_dict()` of default_database_instance
        if self.default_database_instance:
            _dict['defaultDatabaseInstance'] = self.default_database_instance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_node_instance
        if self.default_node_instance:
            _dict['defaultNodeInstance'] = self.default_node_instance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_region
        if self.default_region:
            _dict['defaultRegion'] = self.default_region.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in node_instances (list)
        _items = []
        if self.node_instances:
            for _item in self.node_instances:
                if _item:
                    _items.append(_item.to_dict())
            _dict['nodeInstances'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in regions (list)
        _items = []
        if self.regions:
            for _item in self.regions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['regions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in template_versions (list)
        _items = []
        if self.template_versions:
            for _item in self.template_versions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['templateVersions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClusterOptions:
        """Create an instance of ClusterOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClusterOptions.parse_obj(obj)

        _obj = ClusterOptions.parse_obj({
            "database_instances": [ProviderInstanceType.from_dict(_item) for _item in obj.get("databaseInstances")] if obj.get("databaseInstances") is not None else None,
            "default_database_instance": ProviderInstanceType.from_dict(obj.get("defaultDatabaseInstance")) if obj.get("defaultDatabaseInstance") is not None else None,
            "default_node_instance": ProviderInstanceType.from_dict(obj.get("defaultNodeInstance")) if obj.get("defaultNodeInstance") is not None else None,
            "default_pod_subnet_range": obj.get("defaultPodSubnetRange"),
            "default_region": ProviderRegion.from_dict(obj.get("defaultRegion")) if obj.get("defaultRegion") is not None else None,
            "default_service_peering_range": obj.get("defaultServicePeeringRange"),
            "default_service_subnet_range": obj.get("defaultServiceSubnetRange"),
            "default_vpc_subnet_range": obj.get("defaultVpcSubnetRange"),
            "node_count_default": obj.get("nodeCountDefault"),
            "node_count_max": obj.get("nodeCountMax"),
            "node_count_min": obj.get("nodeCountMin"),
            "node_instances": [ProviderInstanceType.from_dict(_item) for _item in obj.get("nodeInstances")] if obj.get("nodeInstances") is not None else None,
            "provider": obj.get("provider"),
            "regions": [ProviderRegion.from_dict(_item) for _item in obj.get("regions")] if obj.get("regions") is not None else None,
            "template_versions": [TemplateVersion.from_dict(_item) for _item in obj.get("templateVersions")] if obj.get("templateVersions") is not None else None
        })
        return _obj

