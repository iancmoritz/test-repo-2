# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator

class DagRun(BaseModel):
    """
    DagRun
    """
    conf: Optional[Dict[str, Any]] = None
    dag_id: StrictStr = Field(..., alias="dagId")
    dag_run_id: StrictStr = Field(..., alias="dagRunId", description="Deprecated: DagRunId has been replaced with Id")
    data_interval_end: Optional[StrictStr] = Field(None, alias="dataIntervalEnd")
    data_interval_start: Optional[StrictStr] = Field(None, alias="dataIntervalStart")
    end_date: Optional[StrictStr] = Field(None, alias="endDate")
    execution_date: Optional[StrictStr] = Field(None, alias="executionDate")
    external_trigger: Optional[StrictBool] = Field(None, alias="externalTrigger")
    id: StrictStr = Field(...)
    last_pickled: Optional[StrictStr] = Field(None, alias="lastPickled")
    logical_date: Optional[StrictStr] = Field(None, alias="logicalDate")
    note: Optional[StrictStr] = None
    run_type: Optional[StrictStr] = Field(None, alias="runType", description="Deprecated: RunType has been replaced with Type")
    start_date: Optional[StrictStr] = Field(None, alias="startDate")
    state: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    __properties = ["conf", "dagId", "dagRunId", "dataIntervalEnd", "dataIntervalStart", "endDate", "executionDate", "externalTrigger", "id", "lastPickled", "logicalDate", "note", "runType", "startDate", "state", "type"]

    @validator('run_type')
    def run_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('backfill', 'manual', 'scheduled', 'datasetTriggered'):
            raise ValueError("must be one of enum values ('backfill', 'manual', 'scheduled', 'datasetTriggered')")
        return value

    @validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('queued', 'running', 'success', 'failed'):
            raise ValueError("must be one of enum values ('queued', 'running', 'success', 'failed')")
        return value

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('backfill', 'manual', 'scheduled', 'datasetTriggered'):
            raise ValueError("must be one of enum values ('backfill', 'manual', 'scheduled', 'datasetTriggered')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DagRun:
        """Create an instance of DagRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DagRun:
        """Create an instance of DagRun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DagRun.parse_obj(obj)

        _obj = DagRun.parse_obj({
            "conf": obj.get("conf"),
            "dag_id": obj.get("dagId"),
            "dag_run_id": obj.get("dagRunId"),
            "data_interval_end": obj.get("dataIntervalEnd"),
            "data_interval_start": obj.get("dataIntervalStart"),
            "end_date": obj.get("endDate"),
            "execution_date": obj.get("executionDate"),
            "external_trigger": obj.get("externalTrigger"),
            "id": obj.get("id"),
            "last_pickled": obj.get("lastPickled"),
            "logical_date": obj.get("logicalDate"),
            "note": obj.get("note"),
            "run_type": obj.get("runType"),
            "start_date": obj.get("startDate"),
            "state": obj.get("state"),
            "type": obj.get("type")
        })
        return _obj

