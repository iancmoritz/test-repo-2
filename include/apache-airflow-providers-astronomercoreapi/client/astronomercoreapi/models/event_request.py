# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, StrictStr

class EventRequest(BaseModel):
    """
    EventRequest
    """
    body: Optional[Dict[str, Any]] = None
    geoip: Optional[Dict[str, Any]] = None
    hostname: Optional[StrictStr] = None
    ip: Optional[StrictStr] = None
    language: Optional[StrictStr] = None
    method: Optional[StrictStr] = None
    query: Optional[Dict[str, Any]] = None
    user_agent: Optional[StrictStr] = None
    __properties = ["body", "geoip", "hostname", "ip", "language", "method", "query", "user_agent"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EventRequest:
        """Create an instance of EventRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EventRequest:
        """Create an instance of EventRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EventRequest.parse_obj(obj)

        _obj = EventRequest.parse_obj({
            "body": obj.get("body"),
            "geoip": obj.get("geoip"),
            "hostname": obj.get("hostname"),
            "ip": obj.get("ip"),
            "language": obj.get("language"),
            "method": obj.get("method"),
            "query": obj.get("query"),
            "user_agent": obj.get("user_agent")
        })
        return _obj

