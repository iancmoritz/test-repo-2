# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist

class ClearTaskInstancesRequest(BaseModel):
    """
    ClearTaskInstancesRequest
    """
    dag_run_id: Optional[StrictStr] = Field(None, alias="dagRunId")
    end_date: Optional[StrictStr] = Field(None, alias="endDate")
    include_downstream: Optional[StrictBool] = Field(None, alias="includeDownstream")
    include_future: Optional[StrictBool] = Field(None, alias="includeFuture")
    include_parent_dags: Optional[StrictBool] = Field(None, alias="includeParentDags")
    include_past: Optional[StrictBool] = Field(None, alias="includePast")
    include_sub_dags: Optional[StrictBool] = Field(None, alias="includeSubDags")
    include_upstream: Optional[StrictBool] = Field(None, alias="includeUpstream")
    is_dry_run: Optional[StrictBool] = Field(None, alias="isDryRun")
    only_failed: Optional[StrictBool] = Field(None, alias="onlyFailed")
    only_running: Optional[StrictBool] = Field(None, alias="onlyRunning")
    reset_dag_runs: Optional[StrictBool] = Field(None, alias="resetDagRuns")
    start_date: Optional[StrictStr] = Field(None, alias="startDate")
    task_ids: Optional[conlist(StrictStr)] = Field(None, alias="taskIds")
    __properties = ["dagRunId", "endDate", "includeDownstream", "includeFuture", "includeParentDags", "includePast", "includeSubDags", "includeUpstream", "isDryRun", "onlyFailed", "onlyRunning", "resetDagRuns", "startDate", "taskIds"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClearTaskInstancesRequest:
        """Create an instance of ClearTaskInstancesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClearTaskInstancesRequest:
        """Create an instance of ClearTaskInstancesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClearTaskInstancesRequest.parse_obj(obj)

        _obj = ClearTaskInstancesRequest.parse_obj({
            "dag_run_id": obj.get("dagRunId"),
            "end_date": obj.get("endDate"),
            "include_downstream": obj.get("includeDownstream"),
            "include_future": obj.get("includeFuture"),
            "include_parent_dags": obj.get("includeParentDags"),
            "include_past": obj.get("includePast"),
            "include_sub_dags": obj.get("includeSubDags"),
            "include_upstream": obj.get("includeUpstream"),
            "is_dry_run": obj.get("isDryRun"),
            "only_failed": obj.get("onlyFailed"),
            "only_running": obj.get("onlyRunning"),
            "reset_dag_runs": obj.get("resetDagRuns"),
            "start_date": obj.get("startDate"),
            "task_ids": obj.get("taskIds")
        })
        return _obj

