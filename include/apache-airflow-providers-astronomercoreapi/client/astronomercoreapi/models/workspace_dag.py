# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from astronomercoreapi.models.dag_schedule import DagSchedule
from astronomercoreapi.models.workspace_dag_run import WorkspaceDagRun

class WorkspaceDag(BaseModel):
    """
    WorkspaceDag
    """
    dag_id: StrictStr = Field(..., alias="dagId")
    deployment_id: StrictStr = Field(..., alias="deploymentId")
    is_active: Optional[StrictBool] = Field(None, alias="isActive")
    is_paused: StrictBool = Field(..., alias="isPaused")
    next_run_at: Optional[StrictStr] = Field(None, alias="nextRunAt")
    owners: Optional[conlist(StrictStr)] = None
    runs: Optional[conlist(WorkspaceDagRun)] = None
    schedule: Optional[DagSchedule] = None
    tags: Optional[conlist(StrictStr)] = None
    timetable_description: Optional[StrictStr] = Field(None, alias="timetableDescription")
    __properties = ["dagId", "deploymentId", "isActive", "isPaused", "nextRunAt", "owners", "runs", "schedule", "tags", "timetableDescription"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorkspaceDag:
        """Create an instance of WorkspaceDag from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in runs (list)
        _items = []
        if self.runs:
            for _item in self.runs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['runs'] = _items
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['schedule'] = self.schedule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorkspaceDag:
        """Create an instance of WorkspaceDag from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkspaceDag.parse_obj(obj)

        _obj = WorkspaceDag.parse_obj({
            "dag_id": obj.get("dagId"),
            "deployment_id": obj.get("deploymentId"),
            "is_active": obj.get("isActive"),
            "is_paused": obj.get("isPaused"),
            "next_run_at": obj.get("nextRunAt"),
            "owners": obj.get("owners"),
            "runs": [WorkspaceDagRun.from_dict(_item) for _item in obj.get("runs")] if obj.get("runs") is not None else None,
            "schedule": DagSchedule.from_dict(obj.get("schedule")) if obj.get("schedule") is not None else None,
            "tags": obj.get("tags"),
            "timetable_description": obj.get("timetableDescription")
        })
        return _obj

