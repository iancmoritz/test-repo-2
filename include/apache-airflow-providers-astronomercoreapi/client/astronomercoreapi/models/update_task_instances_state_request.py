# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator

class UpdateTaskInstancesStateRequest(BaseModel):
    """
    UpdateTaskInstancesStateRequest
    """
    dag_run_id: Optional[StrictStr] = Field(None, alias="dagRunId")
    execution_date: Optional[StrictStr] = Field(None, alias="executionDate")
    include_downstream: Optional[StrictBool] = Field(None, alias="includeDownstream")
    include_future: Optional[StrictBool] = Field(None, alias="includeFuture")
    include_past: Optional[StrictBool] = Field(None, alias="includePast")
    include_upstream: Optional[StrictBool] = Field(None, alias="includeUpstream")
    is_dry_run: Optional[StrictBool] = Field(None, alias="isDryRun")
    state: Optional[StrictStr] = None
    task_id: Optional[StrictStr] = Field(None, alias="taskId")
    __properties = ["dagRunId", "executionDate", "includeDownstream", "includeFuture", "includePast", "includeUpstream", "isDryRun", "state", "taskId"]

    @validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('success', 'running', 'failed', 'upstreamFailed', 'skipped', 'upForRetry', 'upForReschedule', 'queued', 'none', 'scheduled', 'deferred', 'removed', 'restarting'):
            raise ValueError("must be one of enum values ('success', 'running', 'failed', 'upstreamFailed', 'skipped', 'upForRetry', 'upForReschedule', 'queued', 'none', 'scheduled', 'deferred', 'removed', 'restarting')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateTaskInstancesStateRequest:
        """Create an instance of UpdateTaskInstancesStateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateTaskInstancesStateRequest:
        """Create an instance of UpdateTaskInstancesStateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateTaskInstancesStateRequest.parse_obj(obj)

        _obj = UpdateTaskInstancesStateRequest.parse_obj({
            "dag_run_id": obj.get("dagRunId"),
            "execution_date": obj.get("executionDate"),
            "include_downstream": obj.get("includeDownstream"),
            "include_future": obj.get("includeFuture"),
            "include_past": obj.get("includePast"),
            "include_upstream": obj.get("includeUpstream"),
            "is_dry_run": obj.get("isDryRun"),
            "state": obj.get("state"),
            "task_id": obj.get("taskId")
        })
        return _obj

