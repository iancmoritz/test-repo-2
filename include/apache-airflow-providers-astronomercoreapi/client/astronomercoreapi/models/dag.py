# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist

class Dag(BaseModel):
    """
    Dag
    """
    average_dag_run_duration: Union[StrictFloat, StrictInt] = Field(..., alias="averageDagRunDuration")
    dag_id: StrictStr = Field(..., alias="dagId")
    dag_run_duration_history: conlist(Union[StrictFloat, StrictInt]) = Field(..., alias="dagRunDurationHistory")
    dag_run_start_history: conlist(Union[StrictFloat, StrictInt]) = Field(..., alias="dagRunStartHistory")
    dag_run_status_history: conlist(StrictStr) = Field(..., alias="dagRunStatusHistory")
    dag_url: StrictStr = Field(..., alias="dagUrl")
    deployment_id: StrictStr = Field(..., alias="deploymentId")
    deployment_name: StrictStr = Field(..., alias="deploymentName")
    latest_dag_run_duration: Union[StrictFloat, StrictInt] = Field(..., alias="latestDagRunDuration")
    latest_dag_run_end: Union[StrictFloat, StrictInt] = Field(..., alias="latestDagRunEnd")
    latest_dag_run_status: StrictStr = Field(..., alias="latestDagRunStatus")
    next_dag_run: Union[StrictFloat, StrictInt] = Field(..., alias="nextDagRun")
    release_name: StrictStr = Field(..., alias="releaseName")
    __properties = ["averageDagRunDuration", "dagId", "dagRunDurationHistory", "dagRunStartHistory", "dagRunStatusHistory", "dagUrl", "deploymentId", "deploymentName", "latestDagRunDuration", "latestDagRunEnd", "latestDagRunStatus", "nextDagRun", "releaseName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Dag:
        """Create an instance of Dag from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Dag:
        """Create an instance of Dag from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Dag.parse_obj(obj)

        _obj = Dag.parse_obj({
            "average_dag_run_duration": obj.get("averageDagRunDuration"),
            "dag_id": obj.get("dagId"),
            "dag_run_duration_history": obj.get("dagRunDurationHistory"),
            "dag_run_start_history": obj.get("dagRunStartHistory"),
            "dag_run_status_history": obj.get("dagRunStatusHistory"),
            "dag_url": obj.get("dagUrl"),
            "deployment_id": obj.get("deploymentId"),
            "deployment_name": obj.get("deploymentName"),
            "latest_dag_run_duration": obj.get("latestDagRunDuration"),
            "latest_dag_run_end": obj.get("latestDagRunEnd"),
            "latest_dag_run_status": obj.get("latestDagRunStatus"),
            "next_dag_run": obj.get("nextDagRun"),
            "release_name": obj.get("releaseName")
        })
        return _obj

