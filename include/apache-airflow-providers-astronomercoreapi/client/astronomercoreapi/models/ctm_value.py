# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from astronomercoreapi.models.ctm_value_duration import CtmValueDuration
from astronomercoreapi.models.ctm_value_file import CtmValueFile
from astronomercoreapi.models.ctm_value_table import CtmValueTable

class CtmValue(BaseModel):
    """
    CtmValue
    """
    boolean: Optional[StrictBool] = None
    duration: Optional[CtmValueDuration] = None
    file: Optional[CtmValueFile] = None
    float: Optional[Union[StrictFloat, StrictInt]] = None
    integer: Optional[StrictInt] = None
    string: Optional[StrictStr] = None
    string_list: Optional[conlist(StrictStr)] = Field(None, alias="stringList")
    string_list_map: Optional[Dict[str, conlist(StrictStr)]] = Field(None, alias="stringListMap")
    string_map: Optional[Dict[str, StrictStr]] = Field(None, alias="stringMap")
    string_map_list: Optional[conlist(Dict[str, StrictStr])] = Field(None, alias="stringMapList")
    string_set: Optional[Dict[str, StrictBool]] = Field(None, alias="stringSet")
    table: Optional[CtmValueTable] = None
    __properties = ["boolean", "duration", "file", "float", "integer", "string", "stringList", "stringListMap", "stringMap", "stringMapList", "stringSet", "table"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CtmValue:
        """Create an instance of CtmValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of duration
        if self.duration:
            _dict['duration'] = self.duration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of file
        if self.file:
            _dict['file'] = self.file.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in string_list_map (dict of array)
        _field_dict_of_array = {}
        if self.string_list_map:
            for _key in self.string_list_map:
                if self.string_list_map[_key]:
                    _field_dict_of_array[_key] = [
                        _item.to_dict() for _item in self.string_list_map[_key]
                    ]
            _dict['stringListMap'] = _field_dict_of_array
        # override the default output from pydantic by calling `to_dict()` of table
        if self.table:
            _dict['table'] = self.table.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CtmValue:
        """Create an instance of CtmValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CtmValue.parse_obj(obj)

        _obj = CtmValue.parse_obj({
            "boolean": obj.get("boolean"),
            "duration": CtmValueDuration.from_dict(obj.get("duration")) if obj.get("duration") is not None else None,
            "file": CtmValueFile.from_dict(obj.get("file")) if obj.get("file") is not None else None,
            "float": obj.get("float"),
            "integer": obj.get("integer"),
            "string": obj.get("string"),
            "string_list": obj.get("stringList"),
            "string_list_map": obj.get("stringListMap"),
            "string_map": obj.get("stringMap"),
            "string_map_list": obj.get("stringMapList"),
            "string_set": obj.get("stringSet"),
            "table": CtmValueTable.from_dict(obj.get("table")) if obj.get("table") is not None else None
        })
        return _obj

