# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, conint, conlist, validator

from typing import Optional

from astronomercoreapi.models.cell import Cell
from astronomercoreapi.models.cells_paginated import CellsPaginated
from astronomercoreapi.models.create_cell import CreateCell
from astronomercoreapi.models.create_cell_request import CreateCellRequest
from astronomercoreapi.models.duplicate_cell import DuplicateCell
from astronomercoreapi.models.duplicate_cell_request import DuplicateCellRequest
from astronomercoreapi.models.update_cell_request import UpdateCellRequest

from astronomercoreapi.api_client import ApiClient
from astronomercoreapi.api_response import ApiResponse
from astronomercoreapi.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class CloudIDECellApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_cell(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="project ID")], pipeline_id : Annotated[StrictStr, Field(..., description="pipeline ID")], data : Annotated[CreateCellRequest, Field(..., description="request body for creating a new cell")], **kwargs) -> CreateCell:  # noqa: E501
        """Create a new cell  # noqa: E501

        Create a new cell  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_cell(organization_id, workspace_id, project_id, pipeline_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: project ID (required)
        :type project_id: str
        :param pipeline_id: pipeline ID (required)
        :type pipeline_id: str
        :param data: request body for creating a new cell (required)
        :type data: CreateCellRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateCell
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_cell_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_cell_with_http_info(organization_id, workspace_id, project_id, pipeline_id, data, **kwargs)  # noqa: E501

    @validate_arguments
    def create_cell_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="project ID")], pipeline_id : Annotated[StrictStr, Field(..., description="pipeline ID")], data : Annotated[CreateCellRequest, Field(..., description="request body for creating a new cell")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create a new cell  # noqa: E501

        Create a new cell  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_cell_with_http_info(organization_id, workspace_id, project_id, pipeline_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: project ID (required)
        :type project_id: str
        :param pipeline_id: pipeline ID (required)
        :type pipeline_id: str
        :param data: request body for creating a new cell (required)
        :type data: CreateCellRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateCell, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id',
            'pipeline_id',
            'data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_cell" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']

        if _params['pipeline_id']:
            _path_params['pipelineId'] = _params['pipeline_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['data'] is not None:
            _body_params = _params['data']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "CreateCell",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}/pipelines/{pipelineId}/cells', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_cell(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="ID of the workspace")], project_id : Annotated[StrictStr, Field(..., description="ID of the project")], pipeline_id : Annotated[StrictStr, Field(..., description="ID of the pipeline")], cell_id : Annotated[StrictStr, Field(..., description="ID of the cell")], **kwargs) -> None:  # noqa: E501
        """Delete a cell  # noqa: E501

        Delete a cell  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_cell(organization_id, workspace_id, project_id, pipeline_id, cell_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param project_id: ID of the project (required)
        :type project_id: str
        :param pipeline_id: ID of the pipeline (required)
        :type pipeline_id: str
        :param cell_id: ID of the cell (required)
        :type cell_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the delete_cell_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.delete_cell_with_http_info(organization_id, workspace_id, project_id, pipeline_id, cell_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_cell_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="ID of the workspace")], project_id : Annotated[StrictStr, Field(..., description="ID of the project")], pipeline_id : Annotated[StrictStr, Field(..., description="ID of the pipeline")], cell_id : Annotated[StrictStr, Field(..., description="ID of the cell")], **kwargs) -> ApiResponse:  # noqa: E501
        """Delete a cell  # noqa: E501

        Delete a cell  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_cell_with_http_info(organization_id, workspace_id, project_id, pipeline_id, cell_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param project_id: ID of the project (required)
        :type project_id: str
        :param pipeline_id: ID of the pipeline (required)
        :type pipeline_id: str
        :param cell_id: ID of the cell (required)
        :type cell_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id',
            'pipeline_id',
            'cell_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cell" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']

        if _params['pipeline_id']:
            _path_params['pipelineId'] = _params['pipeline_id']

        if _params['cell_id']:
            _path_params['cellId'] = _params['cell_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}/pipelines/{pipelineId}/cells/{cellId}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def duplicate_cell(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="ID of the workspace")], project_id : Annotated[StrictStr, Field(..., description="ID of the project")], pipeline_id : Annotated[StrictStr, Field(..., description="ID of the pipeline")], cell_id : Annotated[StrictStr, Field(..., description="ID of the cell")], data : Annotated[DuplicateCellRequest, Field(..., description="request body for duplicating a cell")], **kwargs) -> DuplicateCell:  # noqa: E501
        """Duplicate a cell  # noqa: E501

        Duplicate a cell  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.duplicate_cell(organization_id, workspace_id, project_id, pipeline_id, cell_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param project_id: ID of the project (required)
        :type project_id: str
        :param pipeline_id: ID of the pipeline (required)
        :type pipeline_id: str
        :param cell_id: ID of the cell (required)
        :type cell_id: str
        :param data: request body for duplicating a cell (required)
        :type data: DuplicateCellRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DuplicateCell
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the duplicate_cell_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.duplicate_cell_with_http_info(organization_id, workspace_id, project_id, pipeline_id, cell_id, data, **kwargs)  # noqa: E501

    @validate_arguments
    def duplicate_cell_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="ID of the workspace")], project_id : Annotated[StrictStr, Field(..., description="ID of the project")], pipeline_id : Annotated[StrictStr, Field(..., description="ID of the pipeline")], cell_id : Annotated[StrictStr, Field(..., description="ID of the cell")], data : Annotated[DuplicateCellRequest, Field(..., description="request body for duplicating a cell")], **kwargs) -> ApiResponse:  # noqa: E501
        """Duplicate a cell  # noqa: E501

        Duplicate a cell  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.duplicate_cell_with_http_info(organization_id, workspace_id, project_id, pipeline_id, cell_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param project_id: ID of the project (required)
        :type project_id: str
        :param pipeline_id: ID of the pipeline (required)
        :type pipeline_id: str
        :param cell_id: ID of the cell (required)
        :type cell_id: str
        :param data: request body for duplicating a cell (required)
        :type data: DuplicateCellRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DuplicateCell, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id',
            'pipeline_id',
            'cell_id',
            'data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method duplicate_cell" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']

        if _params['pipeline_id']:
            _path_params['pipelineId'] = _params['pipeline_id']

        if _params['cell_id']:
            _path_params['cellId'] = _params['cell_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['data'] is not None:
            _body_params = _params['data']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "DuplicateCell",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}/pipelines/{pipelineId}/cells/{cellId}/duplicate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_cell(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], pipeline_id : Annotated[StrictStr, Field(..., description="The ID of the pipeline")], cell_id : Annotated[StrictStr, Field(..., description="ID of the cell")], **kwargs) -> Cell:  # noqa: E501
        """Get a cell  # noqa: E501

        Get a cell  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cell(organization_id, workspace_id, project_id, pipeline_id, cell_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param pipeline_id: The ID of the pipeline (required)
        :type pipeline_id: str
        :param cell_id: ID of the cell (required)
        :type cell_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Cell
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_cell_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_cell_with_http_info(organization_id, workspace_id, project_id, pipeline_id, cell_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_cell_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], pipeline_id : Annotated[StrictStr, Field(..., description="The ID of the pipeline")], cell_id : Annotated[StrictStr, Field(..., description="ID of the cell")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get a cell  # noqa: E501

        Get a cell  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cell_with_http_info(organization_id, workspace_id, project_id, pipeline_id, cell_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param pipeline_id: The ID of the pipeline (required)
        :type pipeline_id: str
        :param cell_id: ID of the cell (required)
        :type cell_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Cell, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id',
            'pipeline_id',
            'cell_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cell" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']

        if _params['pipeline_id']:
            _path_params['pipelineId'] = _params['pipeline_id']

        if _params['cell_id']:
            _path_params['cellId'] = _params['cell_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "Cell",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}/pipelines/{pipelineId}/cells/{cellId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_cells(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], pipeline_id : Annotated[StrictStr, Field(..., description="The ID of the pipeline")], offset : Annotated[Optional[conint(strict=True, ge=0)], Field(description="offset for pagination")] = None, limit : Annotated[Optional[conint(strict=True, ge=0)], Field(description="limit for pagination")] = None, sorts : Annotated[Optional[conlist(StrictStr)], Field(description="sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'")] = None, include_cell_types : Annotated[Optional[StrictBool], Field(description="include cell types in response")] = None, pipeline_session_id : Annotated[Optional[StrictStr], Field(description="pipeline session ID")] = None, **kwargs) -> CellsPaginated:  # noqa: E501
        """List cells for a project  # noqa: E501

        List cells for a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_cells(organization_id, workspace_id, project_id, pipeline_id, offset, limit, sorts, include_cell_types, pipeline_session_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param pipeline_id: The ID of the pipeline (required)
        :type pipeline_id: str
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param sorts: sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param include_cell_types: include cell types in response
        :type include_cell_types: bool
        :param pipeline_session_id: pipeline session ID
        :type pipeline_session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CellsPaginated
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the list_cells_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.list_cells_with_http_info(organization_id, workspace_id, project_id, pipeline_id, offset, limit, sorts, include_cell_types, pipeline_session_id, **kwargs)  # noqa: E501

    @validate_arguments
    def list_cells_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], pipeline_id : Annotated[StrictStr, Field(..., description="The ID of the pipeline")], offset : Annotated[Optional[conint(strict=True, ge=0)], Field(description="offset for pagination")] = None, limit : Annotated[Optional[conint(strict=True, ge=0)], Field(description="limit for pagination")] = None, sorts : Annotated[Optional[conlist(StrictStr)], Field(description="sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'")] = None, include_cell_types : Annotated[Optional[StrictBool], Field(description="include cell types in response")] = None, pipeline_session_id : Annotated[Optional[StrictStr], Field(description="pipeline session ID")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List cells for a project  # noqa: E501

        List cells for a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_cells_with_http_info(organization_id, workspace_id, project_id, pipeline_id, offset, limit, sorts, include_cell_types, pipeline_session_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param pipeline_id: The ID of the pipeline (required)
        :type pipeline_id: str
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param sorts: sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param include_cell_types: include cell types in response
        :type include_cell_types: bool
        :param pipeline_session_id: pipeline session ID
        :type pipeline_session_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CellsPaginated, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id',
            'pipeline_id',
            'offset',
            'limit',
            'sorts',
            'include_cell_types',
            'pipeline_session_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_cells" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']

        if _params['pipeline_id']:
            _path_params['pipelineId'] = _params['pipeline_id']


        # process the query parameters
        _query_params = []
        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('sorts') is not None:  # noqa: E501
            _query_params.append(('sorts', _params['sorts']))
            _collection_formats['sorts'] = 'multi'

        if _params.get('include_cell_types') is not None:  # noqa: E501
            _query_params.append(('includeCellTypes', _params['include_cell_types']))

        if _params.get('pipeline_session_id') is not None:  # noqa: E501
            _query_params.append(('pipelineSessionId', _params['pipeline_session_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "CellsPaginated",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}/pipelines/{pipelineId}/cells', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_cell(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="ID of the workspace")], project_id : Annotated[StrictStr, Field(..., description="ID of the project")], pipeline_id : Annotated[StrictStr, Field(..., description="ID of the pipeline")], cell_id : Annotated[StrictStr, Field(..., description="ID of the cell")], data : Annotated[UpdateCellRequest, Field(..., description="request body for updating a cell")], **kwargs) -> None:  # noqa: E501
        """Update a cell  # noqa: E501

        Update a cell  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_cell(organization_id, workspace_id, project_id, pipeline_id, cell_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param project_id: ID of the project (required)
        :type project_id: str
        :param pipeline_id: ID of the pipeline (required)
        :type pipeline_id: str
        :param cell_id: ID of the cell (required)
        :type cell_id: str
        :param data: request body for updating a cell (required)
        :type data: UpdateCellRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the update_cell_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.update_cell_with_http_info(organization_id, workspace_id, project_id, pipeline_id, cell_id, data, **kwargs)  # noqa: E501

    @validate_arguments
    def update_cell_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="ID of the workspace")], project_id : Annotated[StrictStr, Field(..., description="ID of the project")], pipeline_id : Annotated[StrictStr, Field(..., description="ID of the pipeline")], cell_id : Annotated[StrictStr, Field(..., description="ID of the cell")], data : Annotated[UpdateCellRequest, Field(..., description="request body for updating a cell")], **kwargs) -> ApiResponse:  # noqa: E501
        """Update a cell  # noqa: E501

        Update a cell  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_cell_with_http_info(organization_id, workspace_id, project_id, pipeline_id, cell_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param project_id: ID of the project (required)
        :type project_id: str
        :param pipeline_id: ID of the pipeline (required)
        :type pipeline_id: str
        :param cell_id: ID of the cell (required)
        :type cell_id: str
        :param data: request body for updating a cell (required)
        :type data: UpdateCellRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id',
            'pipeline_id',
            'cell_id',
            'data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_cell" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']

        if _params['pipeline_id']:
            _path_params['pipelineId'] = _params['pipeline_id']

        if _params['cell_id']:
            _path_params['cellId'] = _params['cell_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['data'] is not None:
            _body_params = _params['data']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}/pipelines/{pipelineId}/cells/{cellId}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
