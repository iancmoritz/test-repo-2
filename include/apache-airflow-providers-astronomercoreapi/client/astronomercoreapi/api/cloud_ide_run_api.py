# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr

from typing import Optional

from astronomercoreapi.models.cell_run import CellRun
from astronomercoreapi.models.cell_run_task_figures import CellRunTaskFigures
from astronomercoreapi.models.cell_run_task_logs import CellRunTaskLogs
from astronomercoreapi.models.cell_run_task_results import CellRunTaskResults
from astronomercoreapi.models.create_cell_run import CreateCellRun
from astronomercoreapi.models.create_cell_run_request import CreateCellRunRequest
from astronomercoreapi.models.create_pipeline_session import CreatePipelineSession

from astronomercoreapi.api_client import ApiClient
from astronomercoreapi.api_response import ApiResponse
from astronomercoreapi.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class CloudIDERunApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_cell_run(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="project ID")], pipeline_id : Annotated[StrictStr, Field(..., description="pipeline ID")], cell_id : Annotated[StrictStr, Field(..., description="cell ID")], data : Annotated[CreateCellRunRequest, Field(..., description="request body for creating a new cell run")], **kwargs) -> CreateCellRun:  # noqa: E501
        """Create a new cell run  # noqa: E501

        Create a new cell run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_cell_run(organization_id, workspace_id, project_id, pipeline_id, cell_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: project ID (required)
        :type project_id: str
        :param pipeline_id: pipeline ID (required)
        :type pipeline_id: str
        :param cell_id: cell ID (required)
        :type cell_id: str
        :param data: request body for creating a new cell run (required)
        :type data: CreateCellRunRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateCellRun
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_cell_run_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_cell_run_with_http_info(organization_id, workspace_id, project_id, pipeline_id, cell_id, data, **kwargs)  # noqa: E501

    @validate_arguments
    def create_cell_run_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="project ID")], pipeline_id : Annotated[StrictStr, Field(..., description="pipeline ID")], cell_id : Annotated[StrictStr, Field(..., description="cell ID")], data : Annotated[CreateCellRunRequest, Field(..., description="request body for creating a new cell run")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create a new cell run  # noqa: E501

        Create a new cell run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_cell_run_with_http_info(organization_id, workspace_id, project_id, pipeline_id, cell_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: project ID (required)
        :type project_id: str
        :param pipeline_id: pipeline ID (required)
        :type pipeline_id: str
        :param cell_id: cell ID (required)
        :type cell_id: str
        :param data: request body for creating a new cell run (required)
        :type data: CreateCellRunRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateCellRun, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id',
            'pipeline_id',
            'cell_id',
            'data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_cell_run" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']

        if _params['pipeline_id']:
            _path_params['pipelineId'] = _params['pipeline_id']

        if _params['cell_id']:
            _path_params['cellId'] = _params['cell_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['data'] is not None:
            _body_params = _params['data']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "CreateCellRun",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}/pipelines/{pipelineId}/cells/{cellId}/runs', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_pipeline_session(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="project ID")], pipeline_id : Annotated[StrictStr, Field(..., description="pipeline ID")], **kwargs) -> CreatePipelineSession:  # noqa: E501
        """Create a new pipeline session  # noqa: E501

        Create a new pipeline session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_pipeline_session(organization_id, workspace_id, project_id, pipeline_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: project ID (required)
        :type project_id: str
        :param pipeline_id: pipeline ID (required)
        :type pipeline_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreatePipelineSession
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_pipeline_session_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_pipeline_session_with_http_info(organization_id, workspace_id, project_id, pipeline_id, **kwargs)  # noqa: E501

    @validate_arguments
    def create_pipeline_session_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="project ID")], pipeline_id : Annotated[StrictStr, Field(..., description="pipeline ID")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create a new pipeline session  # noqa: E501

        Create a new pipeline session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_pipeline_session_with_http_info(organization_id, workspace_id, project_id, pipeline_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: project ID (required)
        :type project_id: str
        :param pipeline_id: pipeline ID (required)
        :type pipeline_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreatePipelineSession, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id',
            'pipeline_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_pipeline_session" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']

        if _params['pipeline_id']:
            _path_params['pipelineId'] = _params['pipeline_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "CreatePipelineSession",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}/pipelines/{pipelineId}/sessions', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_cell_run(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], pipeline_id : Annotated[StrictStr, Field(..., description="The ID of the pipeline")], cell_id : Annotated[StrictStr, Field(..., description="ID of the cell")], cell_run_id : Annotated[StrictStr, Field(..., description="ID of the cell run")], **kwargs) -> CellRun:  # noqa: E501
        """Get a cell run  # noqa: E501

        Get a cell run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cell_run(organization_id, workspace_id, project_id, pipeline_id, cell_id, cell_run_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param pipeline_id: The ID of the pipeline (required)
        :type pipeline_id: str
        :param cell_id: ID of the cell (required)
        :type cell_id: str
        :param cell_run_id: ID of the cell run (required)
        :type cell_run_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CellRun
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_cell_run_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_cell_run_with_http_info(organization_id, workspace_id, project_id, pipeline_id, cell_id, cell_run_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_cell_run_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], pipeline_id : Annotated[StrictStr, Field(..., description="The ID of the pipeline")], cell_id : Annotated[StrictStr, Field(..., description="ID of the cell")], cell_run_id : Annotated[StrictStr, Field(..., description="ID of the cell run")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get a cell run  # noqa: E501

        Get a cell run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cell_run_with_http_info(organization_id, workspace_id, project_id, pipeline_id, cell_id, cell_run_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param pipeline_id: The ID of the pipeline (required)
        :type pipeline_id: str
        :param cell_id: ID of the cell (required)
        :type cell_id: str
        :param cell_run_id: ID of the cell run (required)
        :type cell_run_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CellRun, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id',
            'pipeline_id',
            'cell_id',
            'cell_run_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cell_run" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']

        if _params['pipeline_id']:
            _path_params['pipelineId'] = _params['pipeline_id']

        if _params['cell_id']:
            _path_params['cellId'] = _params['cell_id']

        if _params['cell_run_id']:
            _path_params['cellRunId'] = _params['cell_run_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "CellRun",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}/pipelines/{pipelineId}/cells/{cellId}/runs/{cellRunId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_cell_run_task_figures(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], pipeline_id : Annotated[StrictStr, Field(..., description="The ID of the pipeline")], cell_id : Annotated[StrictStr, Field(..., description="ID of the cell")], cell_run_id : Annotated[StrictStr, Field(..., description="ID of the cell run")], task_id : Annotated[StrictStr, Field(..., description="ID of the task")], **kwargs) -> CellRunTaskFigures:  # noqa: E501
        """Get the figures for a cell run's task  # noqa: E501

        Get the figures for a cell run's task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cell_run_task_figures(organization_id, workspace_id, project_id, pipeline_id, cell_id, cell_run_id, task_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param pipeline_id: The ID of the pipeline (required)
        :type pipeline_id: str
        :param cell_id: ID of the cell (required)
        :type cell_id: str
        :param cell_run_id: ID of the cell run (required)
        :type cell_run_id: str
        :param task_id: ID of the task (required)
        :type task_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CellRunTaskFigures
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_cell_run_task_figures_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_cell_run_task_figures_with_http_info(organization_id, workspace_id, project_id, pipeline_id, cell_id, cell_run_id, task_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_cell_run_task_figures_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], pipeline_id : Annotated[StrictStr, Field(..., description="The ID of the pipeline")], cell_id : Annotated[StrictStr, Field(..., description="ID of the cell")], cell_run_id : Annotated[StrictStr, Field(..., description="ID of the cell run")], task_id : Annotated[StrictStr, Field(..., description="ID of the task")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get the figures for a cell run's task  # noqa: E501

        Get the figures for a cell run's task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cell_run_task_figures_with_http_info(organization_id, workspace_id, project_id, pipeline_id, cell_id, cell_run_id, task_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param pipeline_id: The ID of the pipeline (required)
        :type pipeline_id: str
        :param cell_id: ID of the cell (required)
        :type cell_id: str
        :param cell_run_id: ID of the cell run (required)
        :type cell_run_id: str
        :param task_id: ID of the task (required)
        :type task_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CellRunTaskFigures, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id',
            'pipeline_id',
            'cell_id',
            'cell_run_id',
            'task_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cell_run_task_figures" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']

        if _params['pipeline_id']:
            _path_params['pipelineId'] = _params['pipeline_id']

        if _params['cell_id']:
            _path_params['cellId'] = _params['cell_id']

        if _params['cell_run_id']:
            _path_params['cellRunId'] = _params['cell_run_id']

        if _params['task_id']:
            _path_params['taskId'] = _params['task_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "CellRunTaskFigures",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}/pipelines/{pipelineId}/cells/{cellId}/runs/{cellRunId}/tasks/{taskId}/figures', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_cell_run_task_logs(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], pipeline_id : Annotated[StrictStr, Field(..., description="The ID of the pipeline")], cell_id : Annotated[StrictStr, Field(..., description="ID of the cell")], cell_run_id : Annotated[StrictStr, Field(..., description="ID of the cell run")], task_id : Annotated[StrictStr, Field(..., description="ID of the task")], var_from : Annotated[Optional[StrictInt], Field(description="The line number to start from")] = None, **kwargs) -> CellRunTaskLogs:  # noqa: E501
        """Get the logs for a cell run's task  # noqa: E501

        Get the logs for a cell run's task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cell_run_task_logs(organization_id, workspace_id, project_id, pipeline_id, cell_id, cell_run_id, task_id, var_from, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param pipeline_id: The ID of the pipeline (required)
        :type pipeline_id: str
        :param cell_id: ID of the cell (required)
        :type cell_id: str
        :param cell_run_id: ID of the cell run (required)
        :type cell_run_id: str
        :param task_id: ID of the task (required)
        :type task_id: str
        :param var_from: The line number to start from
        :type var_from: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CellRunTaskLogs
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_cell_run_task_logs_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_cell_run_task_logs_with_http_info(organization_id, workspace_id, project_id, pipeline_id, cell_id, cell_run_id, task_id, var_from, **kwargs)  # noqa: E501

    @validate_arguments
    def get_cell_run_task_logs_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], pipeline_id : Annotated[StrictStr, Field(..., description="The ID of the pipeline")], cell_id : Annotated[StrictStr, Field(..., description="ID of the cell")], cell_run_id : Annotated[StrictStr, Field(..., description="ID of the cell run")], task_id : Annotated[StrictStr, Field(..., description="ID of the task")], var_from : Annotated[Optional[StrictInt], Field(description="The line number to start from")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get the logs for a cell run's task  # noqa: E501

        Get the logs for a cell run's task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cell_run_task_logs_with_http_info(organization_id, workspace_id, project_id, pipeline_id, cell_id, cell_run_id, task_id, var_from, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param pipeline_id: The ID of the pipeline (required)
        :type pipeline_id: str
        :param cell_id: ID of the cell (required)
        :type cell_id: str
        :param cell_run_id: ID of the cell run (required)
        :type cell_run_id: str
        :param task_id: ID of the task (required)
        :type task_id: str
        :param var_from: The line number to start from
        :type var_from: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CellRunTaskLogs, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id',
            'pipeline_id',
            'cell_id',
            'cell_run_id',
            'task_id',
            'var_from'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cell_run_task_logs" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']

        if _params['pipeline_id']:
            _path_params['pipelineId'] = _params['pipeline_id']

        if _params['cell_id']:
            _path_params['cellId'] = _params['cell_id']

        if _params['cell_run_id']:
            _path_params['cellRunId'] = _params['cell_run_id']

        if _params['task_id']:
            _path_params['taskId'] = _params['task_id']


        # process the query parameters
        _query_params = []
        if _params.get('var_from') is not None:  # noqa: E501
            _query_params.append(('from', _params['var_from']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "CellRunTaskLogs",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}/pipelines/{pipelineId}/cells/{cellId}/runs/{cellRunId}/tasks/{taskId}/logs', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_cell_run_task_results(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], pipeline_id : Annotated[StrictStr, Field(..., description="The ID of the pipeline")], cell_id : Annotated[StrictStr, Field(..., description="ID of the cell")], cell_run_id : Annotated[StrictStr, Field(..., description="ID of the cell run")], task_id : Annotated[StrictStr, Field(..., description="ID of the task")], **kwargs) -> CellRunTaskResults:  # noqa: E501
        """Get the results for a cell run's task  # noqa: E501

        Get the results for a cell run's task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cell_run_task_results(organization_id, workspace_id, project_id, pipeline_id, cell_id, cell_run_id, task_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param pipeline_id: The ID of the pipeline (required)
        :type pipeline_id: str
        :param cell_id: ID of the cell (required)
        :type cell_id: str
        :param cell_run_id: ID of the cell run (required)
        :type cell_run_id: str
        :param task_id: ID of the task (required)
        :type task_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CellRunTaskResults
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_cell_run_task_results_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_cell_run_task_results_with_http_info(organization_id, workspace_id, project_id, pipeline_id, cell_id, cell_run_id, task_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_cell_run_task_results_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], pipeline_id : Annotated[StrictStr, Field(..., description="The ID of the pipeline")], cell_id : Annotated[StrictStr, Field(..., description="ID of the cell")], cell_run_id : Annotated[StrictStr, Field(..., description="ID of the cell run")], task_id : Annotated[StrictStr, Field(..., description="ID of the task")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get the results for a cell run's task  # noqa: E501

        Get the results for a cell run's task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cell_run_task_results_with_http_info(organization_id, workspace_id, project_id, pipeline_id, cell_id, cell_run_id, task_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param pipeline_id: The ID of the pipeline (required)
        :type pipeline_id: str
        :param cell_id: ID of the cell (required)
        :type cell_id: str
        :param cell_run_id: ID of the cell run (required)
        :type cell_run_id: str
        :param task_id: ID of the task (required)
        :type task_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CellRunTaskResults, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id',
            'pipeline_id',
            'cell_id',
            'cell_run_id',
            'task_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cell_run_task_results" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']

        if _params['pipeline_id']:
            _path_params['pipelineId'] = _params['pipeline_id']

        if _params['cell_id']:
            _path_params['cellId'] = _params['cell_id']

        if _params['cell_run_id']:
            _path_params['cellRunId'] = _params['cell_run_id']

        if _params['task_id']:
            _path_params['taskId'] = _params['task_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "CellRunTaskResults",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}/pipelines/{pipelineId}/cells/{cellId}/runs/{cellRunId}/tasks/{taskId}/results', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
