# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictStr, conint, conlist, validator

from typing import Optional

from astronomercoreapi.models.cluster import Cluster
from astronomercoreapi.models.cluster_detailed import ClusterDetailed
from astronomercoreapi.models.clusters_paginated import ClustersPaginated
from astronomercoreapi.models.create_aws_cluster_request import CreateAwsClusterRequest
from astronomercoreapi.models.create_azure_cluster_request import CreateAzureClusterRequest
from astronomercoreapi.models.create_gcp_cluster_request import CreateGcpClusterRequest
from astronomercoreapi.models.shared_cluster import SharedCluster
from astronomercoreapi.models.update_aws_cluster_request import UpdateAwsClusterRequest
from astronomercoreapi.models.update_azure_cluster_request import UpdateAzureClusterRequest
from astronomercoreapi.models.update_gcp_cluster_request import UpdateGcpClusterRequest

from astronomercoreapi.api_client import ApiClient
from astronomercoreapi.api_response import ApiResponse
from astronomercoreapi.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ClusterApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_aws_cluster(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], body : Annotated[CreateAwsClusterRequest, Field(..., description="request body for creating a new AWS cluster")], **kwargs) -> Cluster:  # noqa: E501
        """Create AWS cluster  # noqa: E501

        Create AWS cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_aws_cluster(organization_id, body, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param body: request body for creating a new AWS cluster (required)
        :type body: CreateAwsClusterRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Cluster
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_aws_cluster_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_aws_cluster_with_http_info(organization_id, body, **kwargs)  # noqa: E501

    @validate_arguments
    def create_aws_cluster_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], body : Annotated[CreateAwsClusterRequest, Field(..., description="request body for creating a new AWS cluster")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create AWS cluster  # noqa: E501

        Create AWS cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_aws_cluster_with_http_info(organization_id, body, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param body: request body for creating a new AWS cluster (required)
        :type body: CreateAwsClusterRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Cluster, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_aws_cluster" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "Cluster",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '412': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/clusters/aws', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_azure_cluster(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], body : Annotated[CreateAzureClusterRequest, Field(..., description="request body for creating a new Azure cluster")], **kwargs) -> Cluster:  # noqa: E501
        """Create Azure cluster  # noqa: E501

        Create Azure cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_azure_cluster(organization_id, body, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param body: request body for creating a new Azure cluster (required)
        :type body: CreateAzureClusterRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Cluster
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_azure_cluster_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_azure_cluster_with_http_info(organization_id, body, **kwargs)  # noqa: E501

    @validate_arguments
    def create_azure_cluster_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], body : Annotated[CreateAzureClusterRequest, Field(..., description="request body for creating a new Azure cluster")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create Azure cluster  # noqa: E501

        Create Azure cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_azure_cluster_with_http_info(organization_id, body, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param body: request body for creating a new Azure cluster (required)
        :type body: CreateAzureClusterRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Cluster, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_azure_cluster" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "Cluster",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '412': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/clusters/azure', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_gcp_cluster(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], body : Annotated[CreateGcpClusterRequest, Field(..., description="request body for creating a new GCP cluster")], **kwargs) -> Cluster:  # noqa: E501
        """Create GCP cluster  # noqa: E501

        Create GCP cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_gcp_cluster(organization_id, body, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param body: request body for creating a new GCP cluster (required)
        :type body: CreateGcpClusterRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Cluster
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_gcp_cluster_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_gcp_cluster_with_http_info(organization_id, body, **kwargs)  # noqa: E501

    @validate_arguments
    def create_gcp_cluster_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], body : Annotated[CreateGcpClusterRequest, Field(..., description="request body for creating a new GCP cluster")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create GCP cluster  # noqa: E501

        Create GCP cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_gcp_cluster_with_http_info(organization_id, body, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param body: request body for creating a new GCP cluster (required)
        :type body: CreateGcpClusterRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Cluster, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_gcp_cluster" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "Cluster",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '412': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/clusters/gcp', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_cluster(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], cluster_id : Annotated[StrictStr, Field(..., description="cluster ID")], **kwargs) -> None:  # noqa: E501
        """Delete cluster  # noqa: E501

        Delete cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_cluster(organization_id, cluster_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param cluster_id: cluster ID (required)
        :type cluster_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the delete_cluster_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.delete_cluster_with_http_info(organization_id, cluster_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_cluster_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], cluster_id : Annotated[StrictStr, Field(..., description="cluster ID")], **kwargs) -> ApiResponse:  # noqa: E501
        """Delete cluster  # noqa: E501

        Delete cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_cluster_with_http_info(organization_id, cluster_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param cluster_id: cluster ID (required)
        :type cluster_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'cluster_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cluster" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['cluster_id']:
            _path_params['clusterId'] = _params['cluster_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/organizations/{organizationId}/clusters/{clusterId}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_cluster(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], cluster_id : Annotated[StrictStr, Field(..., description="cluster ID to fetch")], **kwargs) -> ClusterDetailed:  # noqa: E501
        """Get a cluster  # noqa: E501

        Get a cluster in an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cluster(organization_id, cluster_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param cluster_id: cluster ID to fetch (required)
        :type cluster_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ClusterDetailed
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_cluster_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_cluster_with_http_info(organization_id, cluster_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_cluster_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], cluster_id : Annotated[StrictStr, Field(..., description="cluster ID to fetch")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get a cluster  # noqa: E501

        Get a cluster in an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cluster_with_http_info(organization_id, cluster_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param cluster_id: cluster ID to fetch (required)
        :type cluster_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ClusterDetailed, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'cluster_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cluster" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['cluster_id']:
            _path_params['clusterId'] = _params['cluster_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "ClusterDetailed",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/clusters/{clusterId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_shared_cluster(self, region : Annotated[StrictStr, Field(..., description="region")], cloud_provider : Annotated[StrictStr, Field(..., description="cloud provider")], **kwargs) -> SharedCluster:  # noqa: E501
        """Get a shared cluster for a given provider/region  # noqa: E501

        Get a shared cluster for a given provider/region  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_shared_cluster(region, cloud_provider, async_req=True)
        >>> result = thread.get()

        :param region: region (required)
        :type region: str
        :param cloud_provider: cloud provider (required)
        :type cloud_provider: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SharedCluster
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_shared_cluster_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_shared_cluster_with_http_info(region, cloud_provider, **kwargs)  # noqa: E501

    @validate_arguments
    def get_shared_cluster_with_http_info(self, region : Annotated[StrictStr, Field(..., description="region")], cloud_provider : Annotated[StrictStr, Field(..., description="cloud provider")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get a shared cluster for a given provider/region  # noqa: E501

        Get a shared cluster for a given provider/region  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_shared_cluster_with_http_info(region, cloud_provider, async_req=True)
        >>> result = thread.get()

        :param region: region (required)
        :type region: str
        :param cloud_provider: cloud provider (required)
        :type cloud_provider: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SharedCluster, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'region',
            'cloud_provider'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_shared_cluster" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('region') is not None:  # noqa: E501
            _query_params.append(('region', _params['region']))

        if _params.get('cloud_provider') is not None:  # noqa: E501
            _query_params.append(('cloudProvider', _params['cloud_provider']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "SharedCluster",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/clusters/shared', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_clusters(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], provider : Annotated[Optional[StrictStr], Field(description="cloud provider to filter clusters on")] = None, types : Annotated[Optional[conlist(StrictStr)], Field(description="type to filter clusters on")] = None, status : Annotated[Optional[StrictStr], Field(description="status to filter clusters on")] = None, search : Annotated[Optional[StrictStr], Field(description="string to search for when listing clusters")] = None, offset : Annotated[Optional[conint(strict=True, ge=0)], Field(description="offset for pagination")] = None, limit : Annotated[Optional[conint(strict=True, ge=0)], Field(description="limit for pagination")] = None, sorts : Annotated[Optional[conlist(StrictStr)], Field(description="sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'")] = None, **kwargs) -> ClustersPaginated:  # noqa: E501
        """List clusters  # noqa: E501

        List clusters in an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_clusters(organization_id, provider, types, status, search, offset, limit, sorts, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param provider: cloud provider to filter clusters on
        :type provider: str
        :param types: type to filter clusters on
        :type types: List[str]
        :param status: status to filter clusters on
        :type status: str
        :param search: string to search for when listing clusters
        :type search: str
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param sorts: sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ClustersPaginated
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the list_clusters_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.list_clusters_with_http_info(organization_id, provider, types, status, search, offset, limit, sorts, **kwargs)  # noqa: E501

    @validate_arguments
    def list_clusters_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], provider : Annotated[Optional[StrictStr], Field(description="cloud provider to filter clusters on")] = None, types : Annotated[Optional[conlist(StrictStr)], Field(description="type to filter clusters on")] = None, status : Annotated[Optional[StrictStr], Field(description="status to filter clusters on")] = None, search : Annotated[Optional[StrictStr], Field(description="string to search for when listing clusters")] = None, offset : Annotated[Optional[conint(strict=True, ge=0)], Field(description="offset for pagination")] = None, limit : Annotated[Optional[conint(strict=True, ge=0)], Field(description="limit for pagination")] = None, sorts : Annotated[Optional[conlist(StrictStr)], Field(description="sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List clusters  # noqa: E501

        List clusters in an organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_clusters_with_http_info(organization_id, provider, types, status, search, offset, limit, sorts, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param provider: cloud provider to filter clusters on
        :type provider: str
        :param types: type to filter clusters on
        :type types: List[str]
        :param status: status to filter clusters on
        :type status: str
        :param search: string to search for when listing clusters
        :type search: str
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param sorts: sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ClustersPaginated, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'provider',
            'types',
            'status',
            'search',
            'offset',
            'limit',
            'sorts'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_clusters" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']


        # process the query parameters
        _query_params = []
        if _params.get('provider') is not None:  # noqa: E501
            _query_params.append(('provider', _params['provider']))

        if _params.get('types') is not None:  # noqa: E501
            _query_params.append(('types', _params['types']))
            _collection_formats['types'] = 'multi'

        if _params.get('status') is not None:  # noqa: E501
            _query_params.append(('status', _params['status']))

        if _params.get('search') is not None:  # noqa: E501
            _query_params.append(('search', _params['search']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('sorts') is not None:  # noqa: E501
            _query_params.append(('sorts', _params['sorts']))
            _collection_formats['sorts'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "ClustersPaginated",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/clusters', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_aws_cluster(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], cluster_id : Annotated[StrictStr, Field(..., description="cluster ID")], body : Annotated[UpdateAwsClusterRequest, Field(..., description="request body for updating an AWS cluster")], **kwargs) -> Cluster:  # noqa: E501
        """Update AWS cluster  # noqa: E501

        Update AWS cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_aws_cluster(organization_id, cluster_id, body, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param cluster_id: cluster ID (required)
        :type cluster_id: str
        :param body: request body for updating an AWS cluster (required)
        :type body: UpdateAwsClusterRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Cluster
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the update_aws_cluster_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.update_aws_cluster_with_http_info(organization_id, cluster_id, body, **kwargs)  # noqa: E501

    @validate_arguments
    def update_aws_cluster_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], cluster_id : Annotated[StrictStr, Field(..., description="cluster ID")], body : Annotated[UpdateAwsClusterRequest, Field(..., description="request body for updating an AWS cluster")], **kwargs) -> ApiResponse:  # noqa: E501
        """Update AWS cluster  # noqa: E501

        Update AWS cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_aws_cluster_with_http_info(organization_id, cluster_id, body, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param cluster_id: cluster ID (required)
        :type cluster_id: str
        :param body: request body for updating an AWS cluster (required)
        :type body: UpdateAwsClusterRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Cluster, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'cluster_id',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_aws_cluster" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['cluster_id']:
            _path_params['clusterId'] = _params['cluster_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "Cluster",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '412': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/clusters/aws/{clusterId}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_azure_cluster(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], cluster_id : Annotated[StrictStr, Field(..., description="cluster ID")], body : Annotated[UpdateAzureClusterRequest, Field(..., description="request body for updating an Azure cluster")], **kwargs) -> Cluster:  # noqa: E501
        """Update Azure cluster  # noqa: E501

        Update Azure cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_azure_cluster(organization_id, cluster_id, body, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param cluster_id: cluster ID (required)
        :type cluster_id: str
        :param body: request body for updating an Azure cluster (required)
        :type body: UpdateAzureClusterRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Cluster
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the update_azure_cluster_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.update_azure_cluster_with_http_info(organization_id, cluster_id, body, **kwargs)  # noqa: E501

    @validate_arguments
    def update_azure_cluster_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], cluster_id : Annotated[StrictStr, Field(..., description="cluster ID")], body : Annotated[UpdateAzureClusterRequest, Field(..., description="request body for updating an Azure cluster")], **kwargs) -> ApiResponse:  # noqa: E501
        """Update Azure cluster  # noqa: E501

        Update Azure cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_azure_cluster_with_http_info(organization_id, cluster_id, body, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param cluster_id: cluster ID (required)
        :type cluster_id: str
        :param body: request body for updating an Azure cluster (required)
        :type body: UpdateAzureClusterRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Cluster, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'cluster_id',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_azure_cluster" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['cluster_id']:
            _path_params['clusterId'] = _params['cluster_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "Cluster",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '412': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/clusters/azure/{clusterId}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_gcp_cluster(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], cluster_id : Annotated[StrictStr, Field(..., description="cluster ID")], body : Annotated[UpdateGcpClusterRequest, Field(..., description="request body for updating a GCP cluster")], **kwargs) -> Cluster:  # noqa: E501
        """Update GCP cluster  # noqa: E501

        Update GCP cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_gcp_cluster(organization_id, cluster_id, body, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param cluster_id: cluster ID (required)
        :type cluster_id: str
        :param body: request body for updating a GCP cluster (required)
        :type body: UpdateGcpClusterRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Cluster
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the update_gcp_cluster_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.update_gcp_cluster_with_http_info(organization_id, cluster_id, body, **kwargs)  # noqa: E501

    @validate_arguments
    def update_gcp_cluster_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], cluster_id : Annotated[StrictStr, Field(..., description="cluster ID")], body : Annotated[UpdateGcpClusterRequest, Field(..., description="request body for updating a GCP cluster")], **kwargs) -> ApiResponse:  # noqa: E501
        """Update GCP cluster  # noqa: E501

        Update GCP cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_gcp_cluster_with_http_info(organization_id, cluster_id, body, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param cluster_id: cluster ID (required)
        :type cluster_id: str
        :param body: request body for updating a GCP cluster (required)
        :type body: UpdateGcpClusterRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Cluster, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'cluster_id',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_gcp_cluster" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['cluster_id']:
            _path_params['clusterId'] = _params['cluster_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "Cluster",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '412': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/clusters/gcp/{clusterId}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
