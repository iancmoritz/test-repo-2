# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictStr

from typing import Optional

from astronomercoreapi.models.create_cell_type import CreateCellType
from astronomercoreapi.models.create_cell_type_request import CreateCellTypeRequest
from astronomercoreapi.models.get_cell_type import GetCellType
from astronomercoreapi.models.list_cell_types import ListCellTypes
from astronomercoreapi.models.update_cell_type_request import UpdateCellTypeRequest
from astronomercoreapi.models.validate_cell_type import ValidateCellType
from astronomercoreapi.models.validate_cell_type_request import ValidateCellTypeRequest

from astronomercoreapi.api_client import ApiClient
from astronomercoreapi.api_response import ApiResponse
from astronomercoreapi.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class CloudIDECellTypeApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_cell_type(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="project ID")], data : Annotated[CreateCellTypeRequest, Field(..., description="request body for creating a new cell type")], **kwargs) -> CreateCellType:  # noqa: E501
        """Create a new cell type  # noqa: E501

        Create a new cell type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_cell_type(organization_id, workspace_id, project_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: project ID (required)
        :type project_id: str
        :param data: request body for creating a new cell type (required)
        :type data: CreateCellTypeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateCellType
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_cell_type_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_cell_type_with_http_info(organization_id, workspace_id, project_id, data, **kwargs)  # noqa: E501

    @validate_arguments
    def create_cell_type_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="project ID")], data : Annotated[CreateCellTypeRequest, Field(..., description="request body for creating a new cell type")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create a new cell type  # noqa: E501

        Create a new cell type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_cell_type_with_http_info(organization_id, workspace_id, project_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: project ID (required)
        :type project_id: str
        :param data: request body for creating a new cell type (required)
        :type data: CreateCellTypeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateCellType, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id',
            'data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_cell_type" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['data'] is not None:
            _body_params = _params['data']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "CreateCellType",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}/cell-types', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_cell_type(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="project ID")], cell_type_name : Annotated[StrictStr, Field(..., description="cell type name")], **kwargs) -> None:  # noqa: E501
        """Delete a cell type  # noqa: E501

        Delete a cell type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_cell_type(organization_id, workspace_id, project_id, cell_type_name, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: project ID (required)
        :type project_id: str
        :param cell_type_name: cell type name (required)
        :type cell_type_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the delete_cell_type_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.delete_cell_type_with_http_info(organization_id, workspace_id, project_id, cell_type_name, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_cell_type_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="project ID")], cell_type_name : Annotated[StrictStr, Field(..., description="cell type name")], **kwargs) -> ApiResponse:  # noqa: E501
        """Delete a cell type  # noqa: E501

        Delete a cell type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_cell_type_with_http_info(organization_id, workspace_id, project_id, cell_type_name, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: project ID (required)
        :type project_id: str
        :param cell_type_name: cell type name (required)
        :type cell_type_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id',
            'cell_type_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cell_type" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']

        if _params['cell_type_name']:
            _path_params['cellTypeName'] = _params['cell_type_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}/cell-types/{cellTypeName}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_cell_type(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="project ID")], cell_type_name : Annotated[StrictStr, Field(..., description="cell type name")], **kwargs) -> GetCellType:  # noqa: E501
        """Get a cell type  # noqa: E501

        Get a cell type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cell_type(organization_id, workspace_id, project_id, cell_type_name, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: project ID (required)
        :type project_id: str
        :param cell_type_name: cell type name (required)
        :type cell_type_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetCellType
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_cell_type_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_cell_type_with_http_info(organization_id, workspace_id, project_id, cell_type_name, **kwargs)  # noqa: E501

    @validate_arguments
    def get_cell_type_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="project ID")], cell_type_name : Annotated[StrictStr, Field(..., description="cell type name")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get a cell type  # noqa: E501

        Get a cell type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cell_type_with_http_info(organization_id, workspace_id, project_id, cell_type_name, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: project ID (required)
        :type project_id: str
        :param cell_type_name: cell type name (required)
        :type cell_type_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetCellType, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id',
            'cell_type_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cell_type" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']

        if _params['cell_type_name']:
            _path_params['cellTypeName'] = _params['cell_type_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "GetCellType",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}/cell-types/{cellTypeName}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_cell_types(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="project ID")], names : Annotated[Optional[StrictStr], Field(description="cell type names to filter by, comma-separated")] = None, **kwargs) -> ListCellTypes:  # noqa: E501
        """List cell types  # noqa: E501

        List cell types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_cell_types(organization_id, workspace_id, project_id, names, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: project ID (required)
        :type project_id: str
        :param names: cell type names to filter by, comma-separated
        :type names: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListCellTypes
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the list_cell_types_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.list_cell_types_with_http_info(organization_id, workspace_id, project_id, names, **kwargs)  # noqa: E501

    @validate_arguments
    def list_cell_types_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="project ID")], names : Annotated[Optional[StrictStr], Field(description="cell type names to filter by, comma-separated")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List cell types  # noqa: E501

        List cell types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_cell_types_with_http_info(organization_id, workspace_id, project_id, names, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: project ID (required)
        :type project_id: str
        :param names: cell type names to filter by, comma-separated
        :type names: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListCellTypes, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id',
            'names'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_cell_types" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']


        # process the query parameters
        _query_params = []
        if _params.get('names') is not None:  # noqa: E501
            _query_params.append(('names', _params['names']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "ListCellTypes",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}/cell-types', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_cell_type(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="project ID")], cell_type_name : Annotated[StrictStr, Field(..., description="cell type name")], data : Annotated[UpdateCellTypeRequest, Field(..., description="request body for updating a cell type")], **kwargs) -> None:  # noqa: E501
        """Update a cell type  # noqa: E501

        Update a cell type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_cell_type(organization_id, workspace_id, project_id, cell_type_name, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: project ID (required)
        :type project_id: str
        :param cell_type_name: cell type name (required)
        :type cell_type_name: str
        :param data: request body for updating a cell type (required)
        :type data: UpdateCellTypeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the update_cell_type_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.update_cell_type_with_http_info(organization_id, workspace_id, project_id, cell_type_name, data, **kwargs)  # noqa: E501

    @validate_arguments
    def update_cell_type_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="project ID")], cell_type_name : Annotated[StrictStr, Field(..., description="cell type name")], data : Annotated[UpdateCellTypeRequest, Field(..., description="request body for updating a cell type")], **kwargs) -> ApiResponse:  # noqa: E501
        """Update a cell type  # noqa: E501

        Update a cell type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_cell_type_with_http_info(organization_id, workspace_id, project_id, cell_type_name, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: project ID (required)
        :type project_id: str
        :param cell_type_name: cell type name (required)
        :type cell_type_name: str
        :param data: request body for updating a cell type (required)
        :type data: UpdateCellTypeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id',
            'cell_type_name',
            'data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_cell_type" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']

        if _params['cell_type_name']:
            _path_params['cellTypeName'] = _params['cell_type_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['data'] is not None:
            _body_params = _params['data']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}/cell-types/{cellTypeName}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def validate_cell_type(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="project ID")], data : Annotated[ValidateCellTypeRequest, Field(..., description="request body for validating a cell type")], **kwargs) -> ValidateCellType:  # noqa: E501
        """Validate a cell type  # noqa: E501

        Validate a cell type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.validate_cell_type(organization_id, workspace_id, project_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: project ID (required)
        :type project_id: str
        :param data: request body for validating a cell type (required)
        :type data: ValidateCellTypeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ValidateCellType
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the validate_cell_type_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.validate_cell_type_with_http_info(organization_id, workspace_id, project_id, data, **kwargs)  # noqa: E501

    @validate_arguments
    def validate_cell_type_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="project ID")], data : Annotated[ValidateCellTypeRequest, Field(..., description="request body for validating a cell type")], **kwargs) -> ApiResponse:  # noqa: E501
        """Validate a cell type  # noqa: E501

        Validate a cell type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.validate_cell_type_with_http_info(organization_id, workspace_id, project_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: project ID (required)
        :type project_id: str
        :param data: request body for validating a cell type (required)
        :type data: ValidateCellTypeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ValidateCellType, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id',
            'data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_cell_type" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['data'] is not None:
            _body_params = _params['data']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "ValidateCellType",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}/validate-cell-type', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
