# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import datetime

from pydantic import Field, StrictStr, conint, conlist, validator

from typing import Any, Dict, Optional

from astronomercoreapi.models.create_deployment_request import CreateDeploymentRequest
from astronomercoreapi.models.deployment import Deployment
from astronomercoreapi.models.deployment_log import DeploymentLog
from astronomercoreapi.models.deployments_paginated import DeploymentsPaginated
from astronomercoreapi.models.internal_dag_structure import InternalDagStructure
from astronomercoreapi.models.internal_pagination_result_dag_run_with_task_instances import InternalPaginationResultDagRunWithTaskInstances
from astronomercoreapi.models.update_deployment_request import UpdateDeploymentRequest

from astronomercoreapi.api_client import ApiClient
from astronomercoreapi.api_response import ApiResponse
from astronomercoreapi.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DeploymentApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_deployment(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="ID of the workspace")], body : Annotated[CreateDeploymentRequest, Field(..., description="request body for create a deployment")], **kwargs) -> Deployment:  # noqa: E501
        """Create deployment  # noqa: E501

        Create deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_deployment(organization_id, workspace_id, body, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param body: request body for create a deployment (required)
        :type body: CreateDeploymentRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Deployment
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_deployment_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_deployment_with_http_info(organization_id, workspace_id, body, **kwargs)  # noqa: E501

    @validate_arguments
    def create_deployment_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="ID of the workspace")], body : Annotated[CreateDeploymentRequest, Field(..., description="request body for create a deployment")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create deployment  # noqa: E501

        Create deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_deployment_with_http_info(organization_id, workspace_id, body, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param body: request body for create a deployment (required)
        :type body: CreateDeploymentRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Deployment, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_deployment" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "Deployment",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/deployments', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_deployment_dag_runs(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], deployment_id : Annotated[StrictStr, Field(..., description="deployment ID to query for dags structure")], dag_id : Annotated[StrictStr, Field(..., description="dagId of the dags")], page_size : Annotated[Optional[conint(strict=True, le=100, ge=1)], Field(description="page size, default of 20")] = None, cursor : Annotated[Optional[StrictStr], Field(description="pagination cursor")] = None, run_id : Annotated[Optional[StrictStr], Field(description="filter by ID of the dags run")] = None, logical_date__lt : Annotated[Optional[datetime], Field(description="filter by logical date (aka execution date)  of  the  dags  run  less     than  (RFC3339 format)")] = None, logical_date__gt : Annotated[Optional[datetime], Field(description="filter by logical date (aka execution date)  of  the  dags  run  greater  than  (RFC3339 format)")] = None, start_date__lt : Annotated[Optional[datetime], Field(description="filter by start date of the dags run less than (RFC3339 format)")] = None, start_date__gt : Annotated[Optional[datetime], Field(description="filter by start date of the dags run greater than (RFC3339 format)")] = None, end_date__lt : Annotated[Optional[datetime], Field(description="filter by end date of the dags run less than (RFC3339 format)")] = None, end_date__gt : Annotated[Optional[datetime], Field(description="filter by end date of the dags run greater than (RFC3339 format)")] = None, state : Annotated[Optional[conlist(StrictStr)], Field(description="filter by dags runs with any of these run states")] = None, run_type__in : Annotated[Optional[conlist(StrictStr)], Field(description="filter by dags runs with any of these run types")] = None, **kwargs) -> InternalPaginationResultDagRunWithTaskInstances:  # noqa: E501
        """Get dags runs  # noqa: E501

        Get paginated dags runs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployment_dag_runs(organization_id, deployment_id, dag_id, page_size, cursor, run_id, logical_date__lt, logical_date__gt, start_date__lt, start_date__gt, end_date__lt, end_date__gt, state, run_type__in, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID to query for dags structure (required)
        :type deployment_id: str
        :param dag_id: dagId of the dags (required)
        :type dag_id: str
        :param page_size: page size, default of 20
        :type page_size: int
        :param cursor: pagination cursor
        :type cursor: str
        :param run_id: filter by ID of the dags run
        :type run_id: str
        :param logical_date__lt: filter by logical date (aka execution date)  of  the  dags  run  less     than  (RFC3339 format)
        :type logical_date__lt: datetime
        :param logical_date__gt: filter by logical date (aka execution date)  of  the  dags  run  greater  than  (RFC3339 format)
        :type logical_date__gt: datetime
        :param start_date__lt: filter by start date of the dags run less than (RFC3339 format)
        :type start_date__lt: datetime
        :param start_date__gt: filter by start date of the dags run greater than (RFC3339 format)
        :type start_date__gt: datetime
        :param end_date__lt: filter by end date of the dags run less than (RFC3339 format)
        :type end_date__lt: datetime
        :param end_date__gt: filter by end date of the dags run greater than (RFC3339 format)
        :type end_date__gt: datetime
        :param state: filter by dags runs with any of these run states
        :type state: List[str]
        :param run_type__in: filter by dags runs with any of these run types
        :type run_type__in: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InternalPaginationResultDagRunWithTaskInstances
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_deployment_dag_runs_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_deployment_dag_runs_with_http_info(organization_id, deployment_id, dag_id, page_size, cursor, run_id, logical_date__lt, logical_date__gt, start_date__lt, start_date__gt, end_date__lt, end_date__gt, state, run_type__in, **kwargs)  # noqa: E501

    @validate_arguments
    def get_deployment_dag_runs_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], deployment_id : Annotated[StrictStr, Field(..., description="deployment ID to query for dags structure")], dag_id : Annotated[StrictStr, Field(..., description="dagId of the dags")], page_size : Annotated[Optional[conint(strict=True, le=100, ge=1)], Field(description="page size, default of 20")] = None, cursor : Annotated[Optional[StrictStr], Field(description="pagination cursor")] = None, run_id : Annotated[Optional[StrictStr], Field(description="filter by ID of the dags run")] = None, logical_date__lt : Annotated[Optional[datetime], Field(description="filter by logical date (aka execution date)  of  the  dags  run  less     than  (RFC3339 format)")] = None, logical_date__gt : Annotated[Optional[datetime], Field(description="filter by logical date (aka execution date)  of  the  dags  run  greater  than  (RFC3339 format)")] = None, start_date__lt : Annotated[Optional[datetime], Field(description="filter by start date of the dags run less than (RFC3339 format)")] = None, start_date__gt : Annotated[Optional[datetime], Field(description="filter by start date of the dags run greater than (RFC3339 format)")] = None, end_date__lt : Annotated[Optional[datetime], Field(description="filter by end date of the dags run less than (RFC3339 format)")] = None, end_date__gt : Annotated[Optional[datetime], Field(description="filter by end date of the dags run greater than (RFC3339 format)")] = None, state : Annotated[Optional[conlist(StrictStr)], Field(description="filter by dags runs with any of these run states")] = None, run_type__in : Annotated[Optional[conlist(StrictStr)], Field(description="filter by dags runs with any of these run types")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get dags runs  # noqa: E501

        Get paginated dags runs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployment_dag_runs_with_http_info(organization_id, deployment_id, dag_id, page_size, cursor, run_id, logical_date__lt, logical_date__gt, start_date__lt, start_date__gt, end_date__lt, end_date__gt, state, run_type__in, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID to query for dags structure (required)
        :type deployment_id: str
        :param dag_id: dagId of the dags (required)
        :type dag_id: str
        :param page_size: page size, default of 20
        :type page_size: int
        :param cursor: pagination cursor
        :type cursor: str
        :param run_id: filter by ID of the dags run
        :type run_id: str
        :param logical_date__lt: filter by logical date (aka execution date)  of  the  dags  run  less     than  (RFC3339 format)
        :type logical_date__lt: datetime
        :param logical_date__gt: filter by logical date (aka execution date)  of  the  dags  run  greater  than  (RFC3339 format)
        :type logical_date__gt: datetime
        :param start_date__lt: filter by start date of the dags run less than (RFC3339 format)
        :type start_date__lt: datetime
        :param start_date__gt: filter by start date of the dags run greater than (RFC3339 format)
        :type start_date__gt: datetime
        :param end_date__lt: filter by end date of the dags run less than (RFC3339 format)
        :type end_date__lt: datetime
        :param end_date__gt: filter by end date of the dags run greater than (RFC3339 format)
        :type end_date__gt: datetime
        :param state: filter by dags runs with any of these run states
        :type state: List[str]
        :param run_type__in: filter by dags runs with any of these run types
        :type run_type__in: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InternalPaginationResultDagRunWithTaskInstances, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'deployment_id',
            'dag_id',
            'page_size',
            'cursor',
            'run_id',
            'logical_date__lt',
            'logical_date__gt',
            'start_date__lt',
            'start_date__gt',
            'end_date__lt',
            'end_date__gt',
            'state',
            'run_type__in'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployment_dag_runs" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['deployment_id']:
            _path_params['deploymentId'] = _params['deployment_id']

        if _params['dag_id']:
            _path_params['dagId'] = _params['dag_id']


        # process the query parameters
        _query_params = []
        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('cursor') is not None:  # noqa: E501
            _query_params.append(('cursor', _params['cursor']))

        if _params.get('run_id') is not None:  # noqa: E501
            _query_params.append(('runId', _params['run_id']))

        if _params.get('logical_date__lt') is not None:  # noqa: E501
            if isinstance(_params['logical_date__lt'], datetime):
                _query_params.append(('logicalDate__lt', _params['logical_date__lt'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('logicalDate__lt', _params['logical_date__lt']))

        if _params.get('logical_date__gt') is not None:  # noqa: E501
            if isinstance(_params['logical_date__gt'], datetime):
                _query_params.append(('logicalDate__gt', _params['logical_date__gt'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('logicalDate__gt', _params['logical_date__gt']))

        if _params.get('start_date__lt') is not None:  # noqa: E501
            if isinstance(_params['start_date__lt'], datetime):
                _query_params.append(('startDate__lt', _params['start_date__lt'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('startDate__lt', _params['start_date__lt']))

        if _params.get('start_date__gt') is not None:  # noqa: E501
            if isinstance(_params['start_date__gt'], datetime):
                _query_params.append(('startDate__gt', _params['start_date__gt'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('startDate__gt', _params['start_date__gt']))

        if _params.get('end_date__lt') is not None:  # noqa: E501
            if isinstance(_params['end_date__lt'], datetime):
                _query_params.append(('endDate__lt', _params['end_date__lt'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('endDate__lt', _params['end_date__lt']))

        if _params.get('end_date__gt') is not None:  # noqa: E501
            if isinstance(_params['end_date__gt'], datetime):
                _query_params.append(('endDate__gt', _params['end_date__gt'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('endDate__gt', _params['end_date__gt']))

        if _params.get('state') is not None:  # noqa: E501
            _query_params.append(('state', _params['state']))
            _collection_formats['state'] = 'csv'

        if _params.get('run_type__in') is not None:  # noqa: E501
            _query_params.append(('runType__in', _params['run_type__in']))
            _collection_formats['runType__in'] = 'csv'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "InternalPaginationResultDagRunWithTaskInstances",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/deployments/{deploymentId}/dags/{dagId}/runs', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_deployment_dag_structure(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], deployment_id : Annotated[StrictStr, Field(..., description="deployment ID to query for dag structure")], dag_id : Annotated[StrictStr, Field(..., description="dagId of the dag")], **kwargs) -> InternalDagStructure:  # noqa: E501
        """Get dags structure  # noqa: E501

        Get the graph structure of a dag's tasks and task groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployment_dag_structure(organization_id, deployment_id, dag_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID to query for dag structure (required)
        :type deployment_id: str
        :param dag_id: dagId of the dag (required)
        :type dag_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InternalDagStructure
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_deployment_dag_structure_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_deployment_dag_structure_with_http_info(organization_id, deployment_id, dag_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_deployment_dag_structure_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], deployment_id : Annotated[StrictStr, Field(..., description="deployment ID to query for dag structure")], dag_id : Annotated[StrictStr, Field(..., description="dagId of the dag")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get dags structure  # noqa: E501

        Get the graph structure of a dag's tasks and task groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployment_dag_structure_with_http_info(organization_id, deployment_id, dag_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID to query for dag structure (required)
        :type deployment_id: str
        :param dag_id: dagId of the dag (required)
        :type dag_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InternalDagStructure, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'deployment_id',
            'dag_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployment_dag_structure" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['deployment_id']:
            _path_params['deploymentId'] = _params['deployment_id']

        if _params['dag_id']:
            _path_params['dagId'] = _params['dag_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "InternalDagStructure",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/deployments/{deploymentId}/dags/{dagId}/structure', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_deployment_health(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], deployment_id : Annotated[StrictStr, Field(..., description="deployment ID for which to return health information")], **kwargs) -> Dict[str, object]:  # noqa: E501
        """Get deployment health  # noqa: E501

        Get deployment health report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployment_health(organization_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID for which to return health information (required)
        :type deployment_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Dict[str, object]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_deployment_health_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_deployment_health_with_http_info(organization_id, deployment_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_deployment_health_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], deployment_id : Annotated[StrictStr, Field(..., description="deployment ID for which to return health information")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get deployment health  # noqa: E501

        Get deployment health report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployment_health_with_http_info(organization_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID for which to return health information (required)
        :type deployment_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Dict[str, object], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'deployment_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployment_health" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['deployment_id']:
            _path_params['deploymentId'] = _params['deployment_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "Dict[str, object]",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/deployments/{deploymentId}/health', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_deployment_logs(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], deployment_id : Annotated[StrictStr, Field(..., description="deployment ID to get logs from")], sources : Annotated[conlist(StrictStr), Field(..., description="log sources to select logs from")], limit : Annotated[Optional[conint(strict=True, ge=1)], Field(description="limit of the count of the logs")] = None, offset : Annotated[Optional[conint(strict=True, ge=0)], Field(description="offset of the log entries")] = None, range : Annotated[Optional[conint(strict=True, ge=60)], Field(description="range of the log search in seconds")] = None, max_num_results : Annotated[Optional[conint(strict=True, ge=1)], Field(description="maximum number of results across all pages")] = None, search_id : Annotated[Optional[StrictStr], Field(description="searchId to get logs from")] = None, search_text : Annotated[Optional[StrictStr], Field(description="an exact text search param used to filter the data on")] = None, **kwargs) -> DeploymentLog:  # noqa: E501
        """Get deployment Logs  # noqa: E501

        Get deployment Logs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployment_logs(organization_id, deployment_id, sources, limit, offset, range, max_num_results, search_id, search_text, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID to get logs from (required)
        :type deployment_id: str
        :param sources: log sources to select logs from (required)
        :type sources: List[str]
        :param limit: limit of the count of the logs
        :type limit: int
        :param offset: offset of the log entries
        :type offset: int
        :param range: range of the log search in seconds
        :type range: int
        :param max_num_results: maximum number of results across all pages
        :type max_num_results: int
        :param search_id: searchId to get logs from
        :type search_id: str
        :param search_text: an exact text search param used to filter the data on
        :type search_text: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DeploymentLog
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_deployment_logs_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_deployment_logs_with_http_info(organization_id, deployment_id, sources, limit, offset, range, max_num_results, search_id, search_text, **kwargs)  # noqa: E501

    @validate_arguments
    def get_deployment_logs_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], deployment_id : Annotated[StrictStr, Field(..., description="deployment ID to get logs from")], sources : Annotated[conlist(StrictStr), Field(..., description="log sources to select logs from")], limit : Annotated[Optional[conint(strict=True, ge=1)], Field(description="limit of the count of the logs")] = None, offset : Annotated[Optional[conint(strict=True, ge=0)], Field(description="offset of the log entries")] = None, range : Annotated[Optional[conint(strict=True, ge=60)], Field(description="range of the log search in seconds")] = None, max_num_results : Annotated[Optional[conint(strict=True, ge=1)], Field(description="maximum number of results across all pages")] = None, search_id : Annotated[Optional[StrictStr], Field(description="searchId to get logs from")] = None, search_text : Annotated[Optional[StrictStr], Field(description="an exact text search param used to filter the data on")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get deployment Logs  # noqa: E501

        Get deployment Logs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployment_logs_with_http_info(organization_id, deployment_id, sources, limit, offset, range, max_num_results, search_id, search_text, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID to get logs from (required)
        :type deployment_id: str
        :param sources: log sources to select logs from (required)
        :type sources: List[str]
        :param limit: limit of the count of the logs
        :type limit: int
        :param offset: offset of the log entries
        :type offset: int
        :param range: range of the log search in seconds
        :type range: int
        :param max_num_results: maximum number of results across all pages
        :type max_num_results: int
        :param search_id: searchId to get logs from
        :type search_id: str
        :param search_text: an exact text search param used to filter the data on
        :type search_text: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DeploymentLog, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'deployment_id',
            'sources',
            'limit',
            'offset',
            'range',
            'max_num_results',
            'search_id',
            'search_text'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployment_logs" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['deployment_id']:
            _path_params['deploymentId'] = _params['deployment_id']


        # process the query parameters
        _query_params = []
        if _params.get('sources') is not None:  # noqa: E501
            _query_params.append(('sources', _params['sources']))
            _collection_formats['sources'] = 'multi'

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('range') is not None:  # noqa: E501
            _query_params.append(('range', _params['range']))

        if _params.get('max_num_results') is not None:  # noqa: E501
            _query_params.append(('maxNumResults', _params['max_num_results']))

        if _params.get('search_id') is not None:  # noqa: E501
            _query_params.append(('searchId', _params['search_id']))

        if _params.get('search_text') is not None:  # noqa: E501
            _query_params.append(('searchText', _params['search_text']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "DeploymentLog",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/deployments/{deploymentId}/logs', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_deployments(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], deployment_ids : Annotated[Optional[conlist(StrictStr)], Field(description="IDs that define the deployments")] = None, workspace_ids : Annotated[Optional[conlist(StrictStr)], Field(description="IDs that define the workspaces where deployments belong to")] = None, offset : Annotated[Optional[conint(strict=True, ge=0)], Field(description="offset for pagination")] = None, limit : Annotated[Optional[conint(strict=True, ge=0)], Field(description="limit for pagination")] = None, sorts : Annotated[Optional[conlist(StrictStr)], Field(description="sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'")] = None, **kwargs) -> DeploymentsPaginated:  # noqa: E501
        """List deployments  # noqa: E501

        List deployments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_deployments(organization_id, deployment_ids, workspace_ids, offset, limit, sorts, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_ids: IDs that define the deployments
        :type deployment_ids: List[str]
        :param workspace_ids: IDs that define the workspaces where deployments belong to
        :type workspace_ids: List[str]
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param sorts: sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DeploymentsPaginated
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the list_deployments_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.list_deployments_with_http_info(organization_id, deployment_ids, workspace_ids, offset, limit, sorts, **kwargs)  # noqa: E501

    @validate_arguments
    def list_deployments_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], deployment_ids : Annotated[Optional[conlist(StrictStr)], Field(description="IDs that define the deployments")] = None, workspace_ids : Annotated[Optional[conlist(StrictStr)], Field(description="IDs that define the workspaces where deployments belong to")] = None, offset : Annotated[Optional[conint(strict=True, ge=0)], Field(description="offset for pagination")] = None, limit : Annotated[Optional[conint(strict=True, ge=0)], Field(description="limit for pagination")] = None, sorts : Annotated[Optional[conlist(StrictStr)], Field(description="sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List deployments  # noqa: E501

        List deployments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_deployments_with_http_info(organization_id, deployment_ids, workspace_ids, offset, limit, sorts, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_ids: IDs that define the deployments
        :type deployment_ids: List[str]
        :param workspace_ids: IDs that define the workspaces where deployments belong to
        :type workspace_ids: List[str]
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param sorts: sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DeploymentsPaginated, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'deployment_ids',
            'workspace_ids',
            'offset',
            'limit',
            'sorts'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_deployments" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']


        # process the query parameters
        _query_params = []
        if _params.get('deployment_ids') is not None:  # noqa: E501
            _query_params.append(('deploymentIds', _params['deployment_ids']))
            _collection_formats['deploymentIds'] = 'multi'

        if _params.get('workspace_ids') is not None:  # noqa: E501
            _query_params.append(('workspaceIds', _params['workspace_ids']))
            _collection_formats['workspaceIds'] = 'multi'

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('sorts') is not None:  # noqa: E501
            _query_params.append(('sorts', _params['sorts']))
            _collection_formats['sorts'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "DeploymentsPaginated",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/deployments', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_deployment(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="ID of the workspace")], deployment_id : Annotated[StrictStr, Field(..., description="ID of the deployment")], body : Annotated[UpdateDeploymentRequest, Field(..., description="request body for updating a deployment")], **kwargs) -> Deployment:  # noqa: E501
        """EXPERIMENTAL - Transfer deployment across workspaces  # noqa: E501

        EXPERIMENTAL: update deployment is only used to transfer deployments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_deployment(organization_id, workspace_id, deployment_id, body, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param deployment_id: ID of the deployment (required)
        :type deployment_id: str
        :param body: request body for updating a deployment (required)
        :type body: UpdateDeploymentRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Deployment
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the update_deployment_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.update_deployment_with_http_info(organization_id, workspace_id, deployment_id, body, **kwargs)  # noqa: E501

    @validate_arguments
    def update_deployment_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="ID of the workspace")], deployment_id : Annotated[StrictStr, Field(..., description="ID of the deployment")], body : Annotated[UpdateDeploymentRequest, Field(..., description="request body for updating a deployment")], **kwargs) -> ApiResponse:  # noqa: E501
        """EXPERIMENTAL - Transfer deployment across workspaces  # noqa: E501

        EXPERIMENTAL: update deployment is only used to transfer deployments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_deployment_with_http_info(organization_id, workspace_id, deployment_id, body, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param deployment_id: ID of the deployment (required)
        :type deployment_id: str
        :param body: request body for updating a deployment (required)
        :type body: UpdateDeploymentRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Deployment, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'deployment_id',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_deployment" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['deployment_id']:
            _path_params['deploymentId'] = _params['deployment_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "Deployment",
            '400': "Error",
            '401': "Error",
            '403': "Error",
            '404': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/deployments/{deploymentId}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
