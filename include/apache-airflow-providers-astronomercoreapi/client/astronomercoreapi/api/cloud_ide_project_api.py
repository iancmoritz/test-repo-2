# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, conint, conlist, validator

from typing import Optional

from astronomercoreapi.models.create_project import CreateProject
from astronomercoreapi.models.create_project_git_branch_request import CreateProjectGitBranchRequest
from astronomercoreapi.models.create_project_git_commit_request import CreateProjectGitCommitRequest
from astronomercoreapi.models.create_project_request import CreateProjectRequest
from astronomercoreapi.models.project import Project
from astronomercoreapi.models.project_git_branch import ProjectGitBranch
from astronomercoreapi.models.project_git_branches_paginated import ProjectGitBranchesPaginated
from astronomercoreapi.models.project_git_commit import ProjectGitCommit
from astronomercoreapi.models.project_git_commits_paginated import ProjectGitCommitsPaginated
from astronomercoreapi.models.project_git_comparison import ProjectGitComparison
from astronomercoreapi.models.projects_paginated import ProjectsPaginated
from astronomercoreapi.models.test_connection import TestConnection
from astronomercoreapi.models.test_connection_request import TestConnectionRequest
from astronomercoreapi.models.update_project_request import UpdateProjectRequest

from astronomercoreapi.api_client import ApiClient
from astronomercoreapi.api_response import ApiResponse
from astronomercoreapi.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class CloudIDEProjectApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_project(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], data : Annotated[CreateProjectRequest, Field(..., description="request body for creating a new project")], **kwargs) -> CreateProject:  # noqa: E501
        """Create a new project  # noqa: E501

        Create a new project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_project(organization_id, workspace_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param data: request body for creating a new project (required)
        :type data: CreateProjectRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateProject
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_project_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_project_with_http_info(organization_id, workspace_id, data, **kwargs)  # noqa: E501

    @validate_arguments
    def create_project_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], data : Annotated[CreateProjectRequest, Field(..., description="request body for creating a new project")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create a new project  # noqa: E501

        Create a new project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_project_with_http_info(organization_id, workspace_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param data: request body for creating a new project (required)
        :type data: CreateProjectRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateProject, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_project" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['data'] is not None:
            _body_params = _params['data']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "CreateProject",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_project_git_branch(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], data : Annotated[CreateProjectGitBranchRequest, Field(..., description="request body for creating a new branch")], **kwargs) -> ProjectGitBranch:  # noqa: E501
        """Create a new Git branch for the project repository  # noqa: E501

        Create a new Git branch for the project repository  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_project_git_branch(organization_id, workspace_id, project_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param data: request body for creating a new branch (required)
        :type data: CreateProjectGitBranchRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ProjectGitBranch
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_project_git_branch_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_project_git_branch_with_http_info(organization_id, workspace_id, project_id, data, **kwargs)  # noqa: E501

    @validate_arguments
    def create_project_git_branch_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], data : Annotated[CreateProjectGitBranchRequest, Field(..., description="request body for creating a new branch")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create a new Git branch for the project repository  # noqa: E501

        Create a new Git branch for the project repository  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_project_git_branch_with_http_info(organization_id, workspace_id, project_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param data: request body for creating a new branch (required)
        :type data: CreateProjectGitBranchRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ProjectGitBranch, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id',
            'data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_project_git_branch" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['data'] is not None:
            _body_params = _params['data']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "ProjectGitBranch",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}/git/branches', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_project_git_commit(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], data : Annotated[CreateProjectGitCommitRequest, Field(..., description="request body for creating a new commit")], **kwargs) -> ProjectGitCommit:  # noqa: E501
        """Create a new Git commit for the project  # noqa: E501

        Create a new Git commit for the project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_project_git_commit(organization_id, workspace_id, project_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param data: request body for creating a new commit (required)
        :type data: CreateProjectGitCommitRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ProjectGitCommit
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_project_git_commit_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_project_git_commit_with_http_info(organization_id, workspace_id, project_id, data, **kwargs)  # noqa: E501

    @validate_arguments
    def create_project_git_commit_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], data : Annotated[CreateProjectGitCommitRequest, Field(..., description="request body for creating a new commit")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create a new Git commit for the project  # noqa: E501

        Create a new Git commit for the project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_project_git_commit_with_http_info(organization_id, workspace_id, project_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param data: request body for creating a new commit (required)
        :type data: CreateProjectGitCommitRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ProjectGitCommit, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id',
            'data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_project_git_commit" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['data'] is not None:
            _body_params = _params['data']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "ProjectGitCommit",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}/git/commits', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_project(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], **kwargs) -> None:  # noqa: E501
        """Delete a project  # noqa: E501

        Delete a single project by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_project(organization_id, workspace_id, project_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the delete_project_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.delete_project_with_http_info(organization_id, workspace_id, project_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_project_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], **kwargs) -> ApiResponse:  # noqa: E501
        """Delete a project  # noqa: E501

        Delete a single project by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_project_with_http_info(organization_id, workspace_id, project_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_project" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_project(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], include_pipeline_count : Annotated[Optional[StrictBool], Field(description="Include pipeline count for the project")] = None, **kwargs) -> Project:  # noqa: E501
        """Get project  # noqa: E501

        Get a single project by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_project(organization_id, workspace_id, project_id, include_pipeline_count, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param include_pipeline_count: Include pipeline count for the project
        :type include_pipeline_count: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Project
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_project_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_project_with_http_info(organization_id, workspace_id, project_id, include_pipeline_count, **kwargs)  # noqa: E501

    @validate_arguments
    def get_project_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], include_pipeline_count : Annotated[Optional[StrictBool], Field(description="Include pipeline count for the project")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get project  # noqa: E501

        Get a single project by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_project_with_http_info(organization_id, workspace_id, project_id, include_pipeline_count, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param include_pipeline_count: Include pipeline count for the project
        :type include_pipeline_count: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Project, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id',
            'include_pipeline_count'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']


        # process the query parameters
        _query_params = []
        if _params.get('include_pipeline_count') is not None:  # noqa: E501
            _query_params.append(('includePipelineCount', _params['include_pipeline_count']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "Project",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_project_git_comparison(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], branch : Annotated[Optional[StrictStr], Field(description="The branch to compare against, if different to the project's branch")] = None, exclude_config : Annotated[Optional[StrictBool], Field(description="Whether to exclude config files from the comparison")] = None, pipeline_id : Annotated[Optional[StrictStr], Field(description="only include changes for this pipeline")] = None, **kwargs) -> ProjectGitComparison:  # noqa: E501
        """Get project Git comparison  # noqa: E501

        Get a comparison between the project and its associated Git branch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_project_git_comparison(organization_id, workspace_id, project_id, branch, exclude_config, pipeline_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param branch: The branch to compare against, if different to the project's branch
        :type branch: str
        :param exclude_config: Whether to exclude config files from the comparison
        :type exclude_config: bool
        :param pipeline_id: only include changes for this pipeline
        :type pipeline_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ProjectGitComparison
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_project_git_comparison_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.get_project_git_comparison_with_http_info(organization_id, workspace_id, project_id, branch, exclude_config, pipeline_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_project_git_comparison_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], branch : Annotated[Optional[StrictStr], Field(description="The branch to compare against, if different to the project's branch")] = None, exclude_config : Annotated[Optional[StrictBool], Field(description="Whether to exclude config files from the comparison")] = None, pipeline_id : Annotated[Optional[StrictStr], Field(description="only include changes for this pipeline")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get project Git comparison  # noqa: E501

        Get a comparison between the project and its associated Git branch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_project_git_comparison_with_http_info(organization_id, workspace_id, project_id, branch, exclude_config, pipeline_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param branch: The branch to compare against, if different to the project's branch
        :type branch: str
        :param exclude_config: Whether to exclude config files from the comparison
        :type exclude_config: bool
        :param pipeline_id: only include changes for this pipeline
        :type pipeline_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ProjectGitComparison, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id',
            'branch',
            'exclude_config',
            'pipeline_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_project_git_comparison" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']


        # process the query parameters
        _query_params = []
        if _params.get('branch') is not None:  # noqa: E501
            _query_params.append(('branch', _params['branch']))

        if _params.get('exclude_config') is not None:  # noqa: E501
            _query_params.append(('excludeConfig', _params['exclude_config']))

        if _params.get('pipeline_id') is not None:  # noqa: E501
            _query_params.append(('pipelineId', _params['pipeline_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "ProjectGitComparison",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}/git/comparison', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_project_git_branches(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="Workspace ID that the project belong to")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], repo : Annotated[Optional[StrictStr], Field(description="a repo to override the project's repo")] = None, vendor : Annotated[Optional[StrictStr], Field(description="a vendor to override the project's git vendor")] = None, azure_dev_ops_organization : Annotated[Optional[StrictStr], Field(description="an Azure DevOps organization to override the project's git vendor attributes")] = None, azure_dev_ops_project_id : Annotated[Optional[StrictStr], Field(description="an Azure DevOps project ID to override the project's git vendor attributes")] = None, page : Annotated[Optional[conint(strict=True, ge=1)], Field(description="page number for pagination")] = None, per_page : Annotated[Optional[conint(strict=True, ge=1)], Field(description="page size for pagination")] = None, x_git_token : Annotated[Optional[StrictStr], Field(description="a token to override the project's token")] = None, **kwargs) -> ProjectGitBranchesPaginated:  # noqa: E501
        """List project Git branches  # noqa: E501

        List project Git branches  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_project_git_branches(organization_id, workspace_id, project_id, repo, vendor, azure_dev_ops_organization, azure_dev_ops_project_id, page, per_page, x_git_token, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: Workspace ID that the project belong to (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param repo: a repo to override the project's repo
        :type repo: str
        :param vendor: a vendor to override the project's git vendor
        :type vendor: str
        :param azure_dev_ops_organization: an Azure DevOps organization to override the project's git vendor attributes
        :type azure_dev_ops_organization: str
        :param azure_dev_ops_project_id: an Azure DevOps project ID to override the project's git vendor attributes
        :type azure_dev_ops_project_id: str
        :param page: page number for pagination
        :type page: int
        :param per_page: page size for pagination
        :type per_page: int
        :param x_git_token: a token to override the project's token
        :type x_git_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ProjectGitBranchesPaginated
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the list_project_git_branches_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.list_project_git_branches_with_http_info(organization_id, workspace_id, project_id, repo, vendor, azure_dev_ops_organization, azure_dev_ops_project_id, page, per_page, x_git_token, **kwargs)  # noqa: E501

    @validate_arguments
    def list_project_git_branches_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="Workspace ID that the project belong to")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], repo : Annotated[Optional[StrictStr], Field(description="a repo to override the project's repo")] = None, vendor : Annotated[Optional[StrictStr], Field(description="a vendor to override the project's git vendor")] = None, azure_dev_ops_organization : Annotated[Optional[StrictStr], Field(description="an Azure DevOps organization to override the project's git vendor attributes")] = None, azure_dev_ops_project_id : Annotated[Optional[StrictStr], Field(description="an Azure DevOps project ID to override the project's git vendor attributes")] = None, page : Annotated[Optional[conint(strict=True, ge=1)], Field(description="page number for pagination")] = None, per_page : Annotated[Optional[conint(strict=True, ge=1)], Field(description="page size for pagination")] = None, x_git_token : Annotated[Optional[StrictStr], Field(description="a token to override the project's token")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List project Git branches  # noqa: E501

        List project Git branches  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_project_git_branches_with_http_info(organization_id, workspace_id, project_id, repo, vendor, azure_dev_ops_organization, azure_dev_ops_project_id, page, per_page, x_git_token, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: Workspace ID that the project belong to (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param repo: a repo to override the project's repo
        :type repo: str
        :param vendor: a vendor to override the project's git vendor
        :type vendor: str
        :param azure_dev_ops_organization: an Azure DevOps organization to override the project's git vendor attributes
        :type azure_dev_ops_organization: str
        :param azure_dev_ops_project_id: an Azure DevOps project ID to override the project's git vendor attributes
        :type azure_dev_ops_project_id: str
        :param page: page number for pagination
        :type page: int
        :param per_page: page size for pagination
        :type per_page: int
        :param x_git_token: a token to override the project's token
        :type x_git_token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ProjectGitBranchesPaginated, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id',
            'repo',
            'vendor',
            'azure_dev_ops_organization',
            'azure_dev_ops_project_id',
            'page',
            'per_page',
            'x_git_token'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_project_git_branches" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']


        # process the query parameters
        _query_params = []
        if _params.get('repo') is not None:  # noqa: E501
            _query_params.append(('repo', _params['repo']))

        if _params.get('vendor') is not None:  # noqa: E501
            _query_params.append(('vendor', _params['vendor']))

        if _params.get('azure_dev_ops_organization') is not None:  # noqa: E501
            _query_params.append(('azureDevOpsOrganization', _params['azure_dev_ops_organization']))

        if _params.get('azure_dev_ops_project_id') is not None:  # noqa: E501
            _query_params.append(('azureDevOpsProjectId', _params['azure_dev_ops_project_id']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('per_page') is not None:  # noqa: E501
            _query_params.append(('perPage', _params['per_page']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_git_token']:
            _header_params['X-Git-Token'] = _params['x_git_token']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "ProjectGitBranchesPaginated",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}/git/branches', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_project_git_commits(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="Workspace ID that the project belong to")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], branch : Annotated[Optional[StrictStr], Field(description="The branch to list commits for, if different to the project's branch")] = None, page : Annotated[Optional[conint(strict=True, ge=1)], Field(description="page number for pagination")] = None, per_page : Annotated[Optional[conint(strict=True, ge=1)], Field(description="page size for pagination")] = None, **kwargs) -> ProjectGitCommitsPaginated:  # noqa: E501
        """List project Git commits  # noqa: E501

        List project Git commits  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_project_git_commits(organization_id, workspace_id, project_id, branch, page, per_page, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: Workspace ID that the project belong to (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param branch: The branch to list commits for, if different to the project's branch
        :type branch: str
        :param page: page number for pagination
        :type page: int
        :param per_page: page size for pagination
        :type per_page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ProjectGitCommitsPaginated
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the list_project_git_commits_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.list_project_git_commits_with_http_info(organization_id, workspace_id, project_id, branch, page, per_page, **kwargs)  # noqa: E501

    @validate_arguments
    def list_project_git_commits_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="Workspace ID that the project belong to")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], branch : Annotated[Optional[StrictStr], Field(description="The branch to list commits for, if different to the project's branch")] = None, page : Annotated[Optional[conint(strict=True, ge=1)], Field(description="page number for pagination")] = None, per_page : Annotated[Optional[conint(strict=True, ge=1)], Field(description="page size for pagination")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List project Git commits  # noqa: E501

        List project Git commits  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_project_git_commits_with_http_info(organization_id, workspace_id, project_id, branch, page, per_page, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: Workspace ID that the project belong to (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param branch: The branch to list commits for, if different to the project's branch
        :type branch: str
        :param page: page number for pagination
        :type page: int
        :param per_page: page size for pagination
        :type per_page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ProjectGitCommitsPaginated, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id',
            'branch',
            'page',
            'per_page'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_project_git_commits" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']


        # process the query parameters
        _query_params = []
        if _params.get('branch') is not None:  # noqa: E501
            _query_params.append(('branch', _params['branch']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('per_page') is not None:  # noqa: E501
            _query_params.append(('perPage', _params['per_page']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "ProjectGitCommitsPaginated",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}/git/commits', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_projects(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_ids : Annotated[Optional[conlist(StrictStr)], Field(description="Workspace IDs that projects belong to")] = None, include_pipeline_counts : Annotated[Optional[StrictBool], Field(description="Include pipeline counts for each project")] = None, offset : Annotated[Optional[conint(strict=True, ge=0)], Field(description="offset for pagination")] = None, limit : Annotated[Optional[conint(strict=True, ge=0)], Field(description="limit for pagination")] = None, search : Annotated[Optional[StrictStr], Field(description="search string across name and description")] = None, sorts : Annotated[Optional[conlist(StrictStr)], Field(description="sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'")] = None, **kwargs) -> ProjectsPaginated:  # noqa: E501
        """List projects  # noqa: E501

        List projects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_projects(organization_id, workspace_ids, include_pipeline_counts, offset, limit, search, sorts, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_ids: Workspace IDs that projects belong to
        :type workspace_ids: List[str]
        :param include_pipeline_counts: Include pipeline counts for each project
        :type include_pipeline_counts: bool
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param search: search string across name and description
        :type search: str
        :param sorts: sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ProjectsPaginated
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the list_projects_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.list_projects_with_http_info(organization_id, workspace_ids, include_pipeline_counts, offset, limit, search, sorts, **kwargs)  # noqa: E501

    @validate_arguments
    def list_projects_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_ids : Annotated[Optional[conlist(StrictStr)], Field(description="Workspace IDs that projects belong to")] = None, include_pipeline_counts : Annotated[Optional[StrictBool], Field(description="Include pipeline counts for each project")] = None, offset : Annotated[Optional[conint(strict=True, ge=0)], Field(description="offset for pagination")] = None, limit : Annotated[Optional[conint(strict=True, ge=0)], Field(description="limit for pagination")] = None, search : Annotated[Optional[StrictStr], Field(description="search string across name and description")] = None, sorts : Annotated[Optional[conlist(StrictStr)], Field(description="sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List projects  # noqa: E501

        List projects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_projects_with_http_info(organization_id, workspace_ids, include_pipeline_counts, offset, limit, search, sorts, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_ids: Workspace IDs that projects belong to
        :type workspace_ids: List[str]
        :param include_pipeline_counts: Include pipeline counts for each project
        :type include_pipeline_counts: bool
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param search: search string across name and description
        :type search: str
        :param sorts: sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ProjectsPaginated, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_ids',
            'include_pipeline_counts',
            'offset',
            'limit',
            'search',
            'sorts'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_projects" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']


        # process the query parameters
        _query_params = []
        if _params.get('workspace_ids') is not None:  # noqa: E501
            _query_params.append(('workspaceIds', _params['workspace_ids']))
            _collection_formats['workspaceIds'] = 'multi'

        if _params.get('include_pipeline_counts') is not None:  # noqa: E501
            _query_params.append(('includePipelineCounts', _params['include_pipeline_counts']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('search') is not None:  # noqa: E501
            _query_params.append(('search', _params['search']))

        if _params.get('sorts') is not None:  # noqa: E501
            _query_params.append(('sorts', _params['sorts']))
            _collection_formats['sorts'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "ProjectsPaginated",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/projects', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def sync_project_include(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], include_id : Annotated[StrictStr, Field(..., description="The name of the include")], **kwargs) -> None:  # noqa: E501
        """Synchronize an include of a project  # noqa: E501

        Synchronize an include of a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sync_project_include(organization_id, workspace_id, project_id, include_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param include_id: The name of the include (required)
        :type include_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the sync_project_include_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.sync_project_include_with_http_info(organization_id, workspace_id, project_id, include_id, **kwargs)  # noqa: E501

    @validate_arguments
    def sync_project_include_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], include_id : Annotated[StrictStr, Field(..., description="The name of the include")], **kwargs) -> ApiResponse:  # noqa: E501
        """Synchronize an include of a project  # noqa: E501

        Synchronize an include of a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.sync_project_include_with_http_info(organization_id, workspace_id, project_id, include_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param include_id: The name of the include (required)
        :type include_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id',
            'include_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sync_project_include" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']

        if _params['include_id']:
            _path_params['includeId'] = _params['include_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}/includes/{includeId}/sync', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def test_connection(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], data : Annotated[TestConnectionRequest, Field(..., description="request body for testing a connection")], **kwargs) -> TestConnection:  # noqa: E501
        """Test a connection against a project  # noqa: E501

        Test a connection against a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.test_connection(organization_id, workspace_id, project_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param data: request body for testing a connection (required)
        :type data: TestConnectionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TestConnection
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the test_connection_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.test_connection_with_http_info(organization_id, workspace_id, project_id, data, **kwargs)  # noqa: E501

    @validate_arguments
    def test_connection_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], data : Annotated[TestConnectionRequest, Field(..., description="request body for testing a connection")], **kwargs) -> ApiResponse:  # noqa: E501
        """Test a connection against a project  # noqa: E501

        Test a connection against a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.test_connection_with_http_info(organization_id, workspace_id, project_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param data: request body for testing a connection (required)
        :type data: TestConnectionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TestConnection, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id',
            'data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_connection" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['data'] is not None:
            _body_params = _params['data']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "TestConnection",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}/test-connection', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def test_project_connection(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], connection_id : Annotated[StrictStr, Field(..., description="The ID of the connection")], **kwargs) -> TestConnection:  # noqa: E501
        """Test an existing project connection  # noqa: E501

        Test an existing project connection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.test_project_connection(organization_id, workspace_id, project_id, connection_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param connection_id: The ID of the connection (required)
        :type connection_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TestConnection
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the test_project_connection_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.test_project_connection_with_http_info(organization_id, workspace_id, project_id, connection_id, **kwargs)  # noqa: E501

    @validate_arguments
    def test_project_connection_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], connection_id : Annotated[StrictStr, Field(..., description="The ID of the connection")], **kwargs) -> ApiResponse:  # noqa: E501
        """Test an existing project connection  # noqa: E501

        Test an existing project connection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.test_project_connection_with_http_info(organization_id, workspace_id, project_id, connection_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param connection_id: The ID of the connection (required)
        :type connection_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TestConnection, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id',
            'connection_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_project_connection" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']

        if _params['connection_id']:
            _path_params['connectionId'] = _params['connection_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {
            '200': "TestConnection",
            '401': "Error",
            '403': "Error",
            '500': "Error",
        }

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}/connections/{connectionId}/test', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_project(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], data : Annotated[UpdateProjectRequest, Field(..., description="request body for updating a project")], **kwargs) -> None:  # noqa: E501
        """Update a project  # noqa: E501

        Update a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_project(organization_id, workspace_id, project_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param data: request body for updating a project (required)
        :type data: UpdateProjectRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the update_project_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.update_project_with_http_info(organization_id, workspace_id, project_id, data, **kwargs)  # noqa: E501

    @validate_arguments
    def update_project_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="organization ID")], workspace_id : Annotated[StrictStr, Field(..., description="workspace ID")], project_id : Annotated[StrictStr, Field(..., description="The ID of the project")], data : Annotated[UpdateProjectRequest, Field(..., description="request body for updating a project")], **kwargs) -> ApiResponse:  # noqa: E501
        """Update a project  # noqa: E501

        Update a project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_project_with_http_info(organization_id, workspace_id, project_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param project_id: The ID of the project (required)
        :type project_id: str
        :param data: request body for updating a project (required)
        :type data: UpdateProjectRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'workspace_id',
            'project_id',
            'data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_project" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']

        if _params['workspace_id']:
            _path_params['workspaceId'] = _params['workspace_id']

        if _params['project_id']:
            _path_params['projectId'] = _params['project_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['data'] is not None:
            _body_params = _params['data']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['JWT']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/organizations/{organizationId}/workspaces/{workspaceId}/projects/{projectId}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
