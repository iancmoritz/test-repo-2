# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import astronomercoreapi
from astronomercoreapi.models.project import Project  # noqa: E501
from astronomercoreapi.rest import ApiException

class TestProject(unittest.TestCase):
    """Project unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test Project
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Project`
        """
        model = astronomercoreapi.models.project.Project()  # noqa: E501
        if include_optional :
            return Project(
                connections = [
                    astronomercoreapi.models.project_connection.ProjectConnection(
                        extra = {
                            'key' : ''
                            }, 
                        host = '', 
                        id = '', 
                        login = '', 
                        port = 56, 
                        schema = '', 
                        type = '', )
                    ], 
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                created_by = '', 
                description = '', 
                git = astronomercoreapi.models.project_git.ProjectGit(
                    branch = '', 
                    dags_path = '', 
                    git_vendor_attributes = astronomercoreapi.models.project_git_vendor_attributes.ProjectGitVendorAttributes(
                        azure_dev_ops_organization = '', 
                        azure_dev_ops_project_id = '', ), 
                    repo = '', 
                    token_set = True, 
                    vendor = 'github', ), 
                id = '', 
                includes = [
                    astronomercoreapi.models.project_include.ProjectInclude(
                        auto_sync_disabled = True, 
                        git = astronomercoreapi.models.project_includes_git.ProjectIncludesGit(
                            sha = '', ), 
                        name = '', 
                        type = 'project-git', )
                    ], 
                name = '', 
                organization_id = '', 
                pipeline_count = 56, 
                requirement_dependencies = {
                    'key' : [
                        ''
                        ]
                    }, 
                requirements = [
                    ''
                    ], 
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                updated_by = '', 
                variables = [
                    astronomercoreapi.models.project_variable.ProjectVariable(
                        is_secret = True, 
                        key = '', 
                        type = 'airflow', 
                        value = '', )
                    ], 
                workspace_id = ''
            )
        else :
            return Project(
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                created_by = '',
                id = '',
                name = '',
                organization_id = '',
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_by = '',
                workspace_id = '',
        )
        """

    def testProject(self):
        """Test Project"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
