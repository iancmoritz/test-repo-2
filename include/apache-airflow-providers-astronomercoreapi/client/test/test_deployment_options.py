# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import astronomercoreapi
from astronomercoreapi.models.deployment_options import DeploymentOptions  # noqa: E501
from astronomercoreapi.rest import ApiException

class TestDeploymentOptions(unittest.TestCase):
    """DeploymentOptions unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test DeploymentOptions
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DeploymentOptions`
        """
        model = astronomercoreapi.models.deployment_options.DeploymentOptions()  # noqa: E501
        if include_optional :
            return DeploymentOptions(
                executors = [
                    ''
                    ], 
                resource_quotas = astronomercoreapi.models.resource_quota_options.ResourceQuotaOptions(
                    default_pod_size = astronomercoreapi.models.resource_option.ResourceOption(
                        cpu = astronomercoreapi.models.resource_range.ResourceRange(
                            ceiling = 56, 
                            default = 56, 
                            floor = 56, ), 
                        memory = astronomercoreapi.models.resource_range.ResourceRange(
                            ceiling = 56, 
                            default = 56, 
                            floor = 56, ), ), 
                    resource_quota = astronomercoreapi.models.resource_option.ResourceOption(
                        cpu = , 
                        memory = , ), ), 
                runtime_releases = [
                    astronomercoreapi.models.runtime_release.RuntimeRelease(
                        airflow_database_migration = True, 
                        airflow_version = '', 
                        channel = '', 
                        release_date = '', 
                        stellar_database_migration = True, 
                        version = '', )
                    ], 
                scheduler_machines = [
                    astronomercoreapi.models.scheduler_machine.SchedulerMachine(
                        name = '', 
                        spec = astronomercoreapi.models.machine_spec.MachineSpec(
                            cpu = 56, 
                            ephemeral_storage = 56, 
                            memory = 56, ), )
                    ], 
                worker_machines = [
                    astronomercoreapi.models.worker_machine.WorkerMachine(
                        concurrency = astronomercoreapi.models.resource_range.ResourceRange(
                            ceiling = 56, 
                            default = 56, 
                            floor = 56, ), 
                        name = '', 
                        spec = astronomercoreapi.models.machine_spec.MachineSpec(
                            cpu = 56, 
                            ephemeral_storage = 56, 
                            memory = 56, ), )
                    ], 
                worker_queues = astronomercoreapi.models.worker_queue_options.WorkerQueueOptions(
                    max_workers = astronomercoreapi.models.resource_range.ResourceRange(
                        ceiling = 56, 
                        default = 56, 
                        floor = 56, ), 
                    min_workers = astronomercoreapi.models.resource_range.ResourceRange(
                        ceiling = 56, 
                        default = 56, 
                        floor = 56, ), )
            )
        else :
            return DeploymentOptions(
                executors = [
                    ''
                    ],
                resource_quotas = astronomercoreapi.models.resource_quota_options.ResourceQuotaOptions(
                    default_pod_size = astronomercoreapi.models.resource_option.ResourceOption(
                        cpu = astronomercoreapi.models.resource_range.ResourceRange(
                            ceiling = 56, 
                            default = 56, 
                            floor = 56, ), 
                        memory = astronomercoreapi.models.resource_range.ResourceRange(
                            ceiling = 56, 
                            default = 56, 
                            floor = 56, ), ), 
                    resource_quota = astronomercoreapi.models.resource_option.ResourceOption(
                        cpu = , 
                        memory = , ), ),
                runtime_releases = [
                    astronomercoreapi.models.runtime_release.RuntimeRelease(
                        airflow_database_migration = True, 
                        airflow_version = '', 
                        channel = '', 
                        release_date = '', 
                        stellar_database_migration = True, 
                        version = '', )
                    ],
                scheduler_machines = [
                    astronomercoreapi.models.scheduler_machine.SchedulerMachine(
                        name = '', 
                        spec = astronomercoreapi.models.machine_spec.MachineSpec(
                            cpu = 56, 
                            ephemeral_storage = 56, 
                            memory = 56, ), )
                    ],
                worker_machines = [
                    astronomercoreapi.models.worker_machine.WorkerMachine(
                        concurrency = astronomercoreapi.models.resource_range.ResourceRange(
                            ceiling = 56, 
                            default = 56, 
                            floor = 56, ), 
                        name = '', 
                        spec = astronomercoreapi.models.machine_spec.MachineSpec(
                            cpu = 56, 
                            ephemeral_storage = 56, 
                            memory = 56, ), )
                    ],
                worker_queues = astronomercoreapi.models.worker_queue_options.WorkerQueueOptions(
                    max_workers = astronomercoreapi.models.resource_range.ResourceRange(
                        ceiling = 56, 
                        default = 56, 
                        floor = 56, ), 
                    min_workers = astronomercoreapi.models.resource_range.ResourceRange(
                        ceiling = 56, 
                        default = 56, 
                        floor = 56, ), ),
        )
        """

    def testDeploymentOptions(self):
        """Test DeploymentOptions"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
