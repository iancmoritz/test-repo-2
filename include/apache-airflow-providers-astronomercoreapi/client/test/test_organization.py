# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import astronomercoreapi
from astronomercoreapi.models.organization import Organization  # noqa: E501
from astronomercoreapi.rest import ApiException

class TestOrganization(unittest.TestCase):
    """Organization unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test Organization
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Organization`
        """
        model = astronomercoreapi.models.organization.Organization()  # noqa: E501
        if include_optional :
            return Organization(
                auth_service_id = '', 
                billing_email = '', 
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                created_by = '', 
                created_by_subject = astronomercoreapi.models.basic_subject_profile.BasicSubjectProfile(
                    api_token_name = '', 
                    avatar_url = '', 
                    full_name = '', 
                    id = '', 
                    subject_type = 'USER', 
                    username = '', ), 
                domains = [
                    ''
                    ], 
                entitlements = {
                    'key' : astronomercoreapi.models.entitlement.Entitlement(
                        enabled = True, 
                        required_tier = 'TRIAL', )
                    }, 
                id = '', 
                is_azure_managed = True, 
                is_scim_enabled = True, 
                managed_domains = [
                    astronomercoreapi.models.managed_domain.ManagedDomain(
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        enforced_logins = [
                            ''
                            ], 
                        id = '', 
                        name = '', 
                        organization_id = '', 
                        status = 'PENDING', 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ], 
                metronome_id = '', 
                metronome_plan_id = '', 
                name = '', 
                payment_method = 'CREDIT_CARD', 
                product = 'HOSTED', 
                salesforce_id = '', 
                short_name = '', 
                status = 'ACTIVE', 
                stripe_id = '', 
                stripe_payment_method_id = '', 
                support_plan = 'INTERNAL', 
                trial_expires_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                updated_by = '', 
                updated_by_subject = astronomercoreapi.models.basic_subject_profile.BasicSubjectProfile(
                    api_token_name = '', 
                    avatar_url = '', 
                    full_name = '', 
                    id = '', 
                    subject_type = 'USER', 
                    username = '', ), 
                uses_custom_metronome_plan = True
            )
        else :
            return Organization(
                auth_service_id = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                id = '',
                is_scim_enabled = True,
                name = '',
                short_name = '',
                support_plan = 'INTERNAL',
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )
        """

    def testOrganization(self):
        """Test Organization"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
