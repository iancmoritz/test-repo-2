# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import astronomercoreapi
from astronomercoreapi.models.cluster_options import ClusterOptions  # noqa: E501
from astronomercoreapi.rest import ApiException

class TestClusterOptions(unittest.TestCase):
    """ClusterOptions unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ClusterOptions
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ClusterOptions`
        """
        model = astronomercoreapi.models.cluster_options.ClusterOptions()  # noqa: E501
        if include_optional :
            return ClusterOptions(
                database_instances = [
                    astronomercoreapi.models.provider_instance_type.ProviderInstanceType(
                        cpu = 56, 
                        name = '', 
                        ram = '', )
                    ], 
                default_database_instance = astronomercoreapi.models.provider_instance_type.ProviderInstanceType(
                    cpu = 56, 
                    name = '', 
                    ram = '', ), 
                default_node_instance = astronomercoreapi.models.provider_instance_type.ProviderInstanceType(
                    cpu = 56, 
                    name = '', 
                    ram = '', ), 
                default_pod_subnet_range = '', 
                default_region = astronomercoreapi.models.provider_region.ProviderRegion(
                    banned_instances = [
                        ''
                        ], 
                    limited = True, 
                    name = '', ), 
                default_service_peering_range = '', 
                default_service_subnet_range = '', 
                default_vpc_subnet_range = '', 
                node_count_default = 56, 
                node_count_max = 56, 
                node_count_min = 56, 
                node_instances = [
                    astronomercoreapi.models.provider_instance_type.ProviderInstanceType(
                        cpu = 56, 
                        name = '', 
                        ram = '', )
                    ], 
                provider = '', 
                regions = [
                    astronomercoreapi.models.provider_region.ProviderRegion(
                        banned_instances = [
                            ''
                            ], 
                        limited = True, 
                        name = '', )
                    ], 
                template_versions = [
                    astronomercoreapi.models.template_version.TemplateVersion(
                        url = '', 
                        version = '', )
                    ]
            )
        else :
            return ClusterOptions(
                database_instances = [
                    astronomercoreapi.models.provider_instance_type.ProviderInstanceType(
                        cpu = 56, 
                        name = '', 
                        ram = '', )
                    ],
                default_database_instance = astronomercoreapi.models.provider_instance_type.ProviderInstanceType(
                    cpu = 56, 
                    name = '', 
                    ram = '', ),
                default_node_instance = astronomercoreapi.models.provider_instance_type.ProviderInstanceType(
                    cpu = 56, 
                    name = '', 
                    ram = '', ),
                default_region = astronomercoreapi.models.provider_region.ProviderRegion(
                    banned_instances = [
                        ''
                        ], 
                    limited = True, 
                    name = '', ),
                default_vpc_subnet_range = '',
                node_count_default = 56,
                node_count_max = 56,
                node_count_min = 56,
                node_instances = [
                    astronomercoreapi.models.provider_instance_type.ProviderInstanceType(
                        cpu = 56, 
                        name = '', 
                        ram = '', )
                    ],
                provider = '',
                regions = [
                    astronomercoreapi.models.provider_region.ProviderRegion(
                        banned_instances = [
                            ''
                            ], 
                        limited = True, 
                        name = '', )
                    ],
                template_versions = [
                    astronomercoreapi.models.template_version.TemplateVersion(
                        url = '', 
                        version = '', )
                    ],
        )
        """

    def testClusterOptions(self):
        """Test ClusterOptions"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
