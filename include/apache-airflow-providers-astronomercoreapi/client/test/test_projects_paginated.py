# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import astronomercoreapi
from astronomercoreapi.models.projects_paginated import ProjectsPaginated  # noqa: E501
from astronomercoreapi.rest import ApiException

class TestProjectsPaginated(unittest.TestCase):
    """ProjectsPaginated unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ProjectsPaginated
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ProjectsPaginated`
        """
        model = astronomercoreapi.models.projects_paginated.ProjectsPaginated()  # noqa: E501
        if include_optional :
            return ProjectsPaginated(
                limit = 56, 
                offset = 56, 
                projects = [
                    astronomercoreapi.models.project.Project(
                        connections = [
                            astronomercoreapi.models.project_connection.ProjectConnection(
                                extra = {
                                    'key' : ''
                                    }, 
                                host = '', 
                                id = '', 
                                login = '', 
                                port = 56, 
                                schema = '', 
                                type = '', )
                            ], 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        created_by = '', 
                        description = '', 
                        git = astronomercoreapi.models.project_git.ProjectGit(
                            branch = '', 
                            dags_path = '', 
                            git_vendor_attributes = astronomercoreapi.models.project_git_vendor_attributes.ProjectGitVendorAttributes(
                                azure_dev_ops_organization = '', 
                                azure_dev_ops_project_id = '', ), 
                            repo = '', 
                            token_set = True, 
                            vendor = 'github', ), 
                        id = '', 
                        includes = [
                            astronomercoreapi.models.project_include.ProjectInclude(
                                auto_sync_disabled = True, 
                                name = '', 
                                type = 'project-git', )
                            ], 
                        name = '', 
                        organization_id = '', 
                        pipeline_count = 56, 
                        requirement_dependencies = {
                            'key' : [
                                ''
                                ]
                            }, 
                        requirements = [
                            ''
                            ], 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_by = '', 
                        variables = [
                            astronomercoreapi.models.project_variable.ProjectVariable(
                                is_secret = True, 
                                key = '', 
                                type = 'airflow', 
                                value = '', )
                            ], 
                        workspace_id = '', )
                    ], 
                total_count = 56
            )
        else :
            return ProjectsPaginated(
                limit = 56,
                offset = 56,
                projects = [
                    astronomercoreapi.models.project.Project(
                        connections = [
                            astronomercoreapi.models.project_connection.ProjectConnection(
                                extra = {
                                    'key' : ''
                                    }, 
                                host = '', 
                                id = '', 
                                login = '', 
                                port = 56, 
                                schema = '', 
                                type = '', )
                            ], 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        created_by = '', 
                        description = '', 
                        git = astronomercoreapi.models.project_git.ProjectGit(
                            branch = '', 
                            dags_path = '', 
                            git_vendor_attributes = astronomercoreapi.models.project_git_vendor_attributes.ProjectGitVendorAttributes(
                                azure_dev_ops_organization = '', 
                                azure_dev_ops_project_id = '', ), 
                            repo = '', 
                            token_set = True, 
                            vendor = 'github', ), 
                        id = '', 
                        includes = [
                            astronomercoreapi.models.project_include.ProjectInclude(
                                auto_sync_disabled = True, 
                                name = '', 
                                type = 'project-git', )
                            ], 
                        name = '', 
                        organization_id = '', 
                        pipeline_count = 56, 
                        requirement_dependencies = {
                            'key' : [
                                ''
                                ]
                            }, 
                        requirements = [
                            ''
                            ], 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated_by = '', 
                        variables = [
                            astronomercoreapi.models.project_variable.ProjectVariable(
                                is_secret = True, 
                                key = '', 
                                type = 'airflow', 
                                value = '', )
                            ], 
                        workspace_id = '', )
                    ],
                total_count = 56,
        )
        """

    def testProjectsPaginated(self):
        """Test ProjectsPaginated"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
