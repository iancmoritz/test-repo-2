# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import astronomercoreapi
from astronomercoreapi.models.sso_connection import SsoConnection  # noqa: E501
from astronomercoreapi.rest import ApiException

class TestSsoConnection(unittest.TestCase):
    """SsoConnection unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test SsoConnection
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SsoConnection`
        """
        model = astronomercoreapi.models.sso_connection.SsoConnection()  # noqa: E501
        if include_optional :
            return SsoConnection(
                auth0_connection_id = '', 
                auth0_connection_name = '', 
                configuration = astronomercoreapi.models.sso_connection_config.SsoConnectionConfig(
                    azure_client_id = '', 
                    azure_client_secret = '', 
                    azure_domain_name = '', 
                    saml_sign_in_url = '', 
                    saml_sign_out_url = '', 
                    saml_signing_cert = '', 
                    strategy = 'samlp', ), 
                enabled = True, 
                id = '', 
                jit_policy = astronomercoreapi.models.jit_policy.JitPolicy(
                    default_org_role = '', 
                    default_workspace_roles = [
                        astronomercoreapi.models.workspace_role.WorkspaceRole(
                            workspace_id = '', 
                            workspace_role = '', )
                        ], ), 
                managed_domains = [
                    astronomercoreapi.models.managed_domain.ManagedDomain(
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        enforced_logins = [
                            ''
                            ], 
                        id = '', 
                        name = '', 
                        organization_id = '', 
                        status = 'PENDING', 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ], 
                organization_id = ''
            )
        else :
            return SsoConnection(
                auth0_connection_id = '',
                auth0_connection_name = '',
                configuration = astronomercoreapi.models.sso_connection_config.SsoConnectionConfig(
                    azure_client_id = '', 
                    azure_client_secret = '', 
                    azure_domain_name = '', 
                    saml_sign_in_url = '', 
                    saml_sign_out_url = '', 
                    saml_signing_cert = '', 
                    strategy = 'samlp', ),
                enabled = True,
                id = '',
                managed_domains = [
                    astronomercoreapi.models.managed_domain.ManagedDomain(
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        enforced_logins = [
                            ''
                            ], 
                        id = '', 
                        name = '', 
                        organization_id = '', 
                        status = 'PENDING', 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                organization_id = '',
        )
        """

    def testSsoConnection(self):
        """Test SsoConnection"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
