# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import datetime

from pydantic import Field, StrictStr, conint, conlist, validator

from typing import Optional

from astronomer_core_api.sdk.models.dags_paginated import DagsPaginated
from astronomer_core_api.sdk.models.runs_with_groups import RunsWithGroups

from astronomer_core_api.sdk.api_client import ApiClient
from astronomer_core_api.sdk.api_response import ApiResponse
from astronomer_core_api.sdk.exceptions import ApiTypeError, ApiValueError  # noqa: F401


class DagApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_runs_with_groups(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        runtime_id: Annotated[StrictStr, Field(..., description="ID of the runtime")],
        dag_id: Annotated[StrictStr, Field(..., description="ID of the dag")],
        root: Annotated[
            Optional[StrictStr],
            Field(description="name of parent task to get grid data for"),
        ] = None,
        run_state: Annotated[
            Optional[StrictStr], Field(description="run state to filter on")
        ] = None,
        run_type: Annotated[
            Optional[StrictStr], Field(description="run type to filter on")
        ] = None,
        base_date: Annotated[Optional[datetime], Field(description="base date")] = None,
        num_runs: Annotated[
            Optional[StrictStr],
            Field(description="number of runs to select grid data for"),
        ] = None,
        **kwargs
    ) -> RunsWithGroups:  # noqa: E501
        """Get grid data for a dag in a runtime  # noqa: E501

        Get grid data for a dag in a runtime  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_runs_with_groups(organization_id, workspace_id, runtime_id, dag_id, root, run_state, run_type, base_date, num_runs, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param runtime_id: ID of the runtime (required)
        :type runtime_id: str
        :param dag_id: ID of the dag (required)
        :type dag_id: str
        :param root: name of parent task to get grid data for
        :type root: str
        :param run_state: run state to filter on
        :type run_state: str
        :param run_type: run type to filter on
        :type run_type: str
        :param base_date: base date
        :type base_date: datetime
        :param num_runs: number of runs to select grid data for
        :type num_runs: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RunsWithGroups
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_runs_with_groups_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_runs_with_groups_with_http_info(
            organization_id,
            workspace_id,
            runtime_id,
            dag_id,
            root,
            run_state,
            run_type,
            base_date,
            num_runs,
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_runs_with_groups_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        runtime_id: Annotated[StrictStr, Field(..., description="ID of the runtime")],
        dag_id: Annotated[StrictStr, Field(..., description="ID of the dag")],
        root: Annotated[
            Optional[StrictStr],
            Field(description="name of parent task to get grid data for"),
        ] = None,
        run_state: Annotated[
            Optional[StrictStr], Field(description="run state to filter on")
        ] = None,
        run_type: Annotated[
            Optional[StrictStr], Field(description="run type to filter on")
        ] = None,
        base_date: Annotated[Optional[datetime], Field(description="base date")] = None,
        num_runs: Annotated[
            Optional[StrictStr],
            Field(description="number of runs to select grid data for"),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get grid data for a dag in a runtime  # noqa: E501

        Get grid data for a dag in a runtime  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_runs_with_groups_with_http_info(organization_id, workspace_id, runtime_id, dag_id, root, run_state, run_type, base_date, num_runs, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param runtime_id: ID of the runtime (required)
        :type runtime_id: str
        :param dag_id: ID of the dag (required)
        :type dag_id: str
        :param root: name of parent task to get grid data for
        :type root: str
        :param run_state: run state to filter on
        :type run_state: str
        :param run_type: run type to filter on
        :type run_type: str
        :param base_date: base date
        :type base_date: datetime
        :param num_runs: number of runs to select grid data for
        :type num_runs: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RunsWithGroups, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "organization_id",
            "workspace_id",
            "runtime_id",
            "dag_id",
            "root",
            "run_state",
            "run_type",
            "base_date",
            "num_runs",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_runs_with_groups" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["workspace_id"]:
            _path_params["workspaceId"] = _params["workspace_id"]

        if _params["runtime_id"]:
            _path_params["runtimeId"] = _params["runtime_id"]

        if _params["dag_id"]:
            _path_params["dagId"] = _params["dag_id"]

        # process the query parameters
        _query_params = []
        if _params.get("root") is not None:  # noqa: E501
            _query_params.append(("root", _params["root"]))

        if _params.get("run_state") is not None:  # noqa: E501
            _query_params.append(("runState", _params["run_state"]))

        if _params.get("run_type") is not None:  # noqa: E501
            _query_params.append(("runType", _params["run_type"]))

        if _params.get("base_date") is not None:  # noqa: E501
            if isinstance(_params["base_date"], datetime):
                _query_params.append(
                    (
                        "baseDate",
                        _params["base_date"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("baseDate", _params["base_date"]))

        if _params.get("num_runs") is not None:  # noqa: E501
            _query_params.append(("numRuns", _params["num_runs"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "RunsWithGroups",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "404": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces/{workspaceId}/runtimes/{runtimeId}/dags/{dagId}/runs-with-groups",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def list_dags(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(description="ID that defines the workspaces where dags belong to"),
        ] = None,
        deployment_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(description="ID that defines the deployments where dags belong to"),
        ] = None,
        offset: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="offset for pagination"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="limit for pagination"),
        ] = None,
        sorts: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'"
            ),
        ] = None,
        **kwargs
    ) -> DagsPaginated:  # noqa: E501
        """List dags from workspaces for the last 14 days  # noqa: E501

        List dags from workspaces for the last 14 days  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_dags(organization_id, workspace_ids, deployment_ids, offset, limit, sorts, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_ids: ID that defines the workspaces where dags belong to
        :type workspace_ids: List[str]
        :param deployment_ids: ID that defines the deployments where dags belong to
        :type deployment_ids: List[str]
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param sorts: sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DagsPaginated
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the list_dags_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.list_dags_with_http_info(
            organization_id,
            workspace_ids,
            deployment_ids,
            offset,
            limit,
            sorts,
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def list_dags_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(description="ID that defines the workspaces where dags belong to"),
        ] = None,
        deployment_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(description="ID that defines the deployments where dags belong to"),
        ] = None,
        offset: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="offset for pagination"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="limit for pagination"),
        ] = None,
        sorts: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'"
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """List dags from workspaces for the last 14 days  # noqa: E501

        List dags from workspaces for the last 14 days  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_dags_with_http_info(organization_id, workspace_ids, deployment_ids, offset, limit, sorts, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_ids: ID that defines the workspaces where dags belong to
        :type workspace_ids: List[str]
        :param deployment_ids: ID that defines the deployments where dags belong to
        :type deployment_ids: List[str]
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param sorts: sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DagsPaginated, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "organization_id",
            "workspace_ids",
            "deployment_ids",
            "offset",
            "limit",
            "sorts",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_dags" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        # process the query parameters
        _query_params = []
        if _params.get("workspace_ids") is not None:  # noqa: E501
            _query_params.append(("workspaceIds", _params["workspace_ids"]))
            _collection_formats["workspaceIds"] = "multi"

        if _params.get("deployment_ids") is not None:  # noqa: E501
            _query_params.append(("deploymentIds", _params["deployment_ids"]))
            _collection_formats["deploymentIds"] = "multi"

        if _params.get("offset") is not None:  # noqa: E501
            _query_params.append(("offset", _params["offset"]))

        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("sorts") is not None:  # noqa: E501
            _query_params.append(("sorts", _params["sorts"]))
            _collection_formats["sorts"] = "multi"

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "DagsPaginated",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "404": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/dags",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
