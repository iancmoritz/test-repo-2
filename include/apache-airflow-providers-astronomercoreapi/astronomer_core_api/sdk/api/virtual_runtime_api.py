# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import datetime

from pydantic import (
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
    conint,
    conlist,
    validator,
)

from typing import Optional, Union

from astronomer_core_api.sdk.models.connection import Connection
from astronomer_core_api.sdk.models.connections_paginated import ConnectionsPaginated
from astronomer_core_api.sdk.models.mutate_connection_request import (
    MutateConnectionRequest,
)
from astronomer_core_api.sdk.models.mutate_vr_requirements_request import (
    MutateVRRequirementsRequest,
)
from astronomer_core_api.sdk.models.mutate_vr_variables_request import (
    MutateVRVariablesRequest,
)
from astronomer_core_api.sdk.models.mutate_virtual_runtime_request import (
    MutateVirtualRuntimeRequest,
)
from astronomer_core_api.sdk.models.post_dag_run import PostDagRun
from astronomer_core_api.sdk.models.post_dag_run_request import PostDagRunRequest
from astronomer_core_api.sdk.models.update_dag import UpdateDag
from astronomer_core_api.sdk.models.vr_dag_run_task_instances_paginated import (
    VRDagRunTaskInstancesPaginated,
)
from astronomer_core_api.sdk.models.vr_dag_runs_paginated import VRDagRunsPaginated
from astronomer_core_api.sdk.models.vr_dags_paginated import VRDagsPaginated
from astronomer_core_api.sdk.models.vr_import_errors_paginated import (
    VRImportErrorsPaginated,
)
from astronomer_core_api.sdk.models.vr_requirements import VRRequirements
from astronomer_core_api.sdk.models.vr_variables import VRVariables
from astronomer_core_api.sdk.models.virtual_runtime import VirtualRuntime
from astronomer_core_api.sdk.models.virtual_runtimes_paginated import (
    VirtualRuntimesPaginated,
)

from astronomer_core_api.sdk.api_client import ApiClient
from astronomer_core_api.sdk.api_response import ApiResponse
from astronomer_core_api.sdk.exceptions import ApiTypeError, ApiValueError  # noqa: F401


class VirtualRuntimeApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_connection(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        data: Annotated[
            MutateConnectionRequest,
            Field(..., description="request body for creating a new connection"),
        ],
        **kwargs
    ) -> Connection:  # noqa: E501
        """Deprecated - Create connection  # noqa: E501

        Deprecated - Create connection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_connection(organization_id, workspace_id, virtual_runtime_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param data: request body for creating a new connection (required)
        :type data: MutateConnectionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Connection
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the create_connection_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.create_connection_with_http_info(
            organization_id, workspace_id, virtual_runtime_id, data, **kwargs
        )  # noqa: E501

    @validate_arguments
    def create_connection_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        data: Annotated[
            MutateConnectionRequest,
            Field(..., description="request body for creating a new connection"),
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Deprecated - Create connection  # noqa: E501

        Deprecated - Create connection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_connection_with_http_info(organization_id, workspace_id, virtual_runtime_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param data: request body for creating a new connection (required)
        :type data: MutateConnectionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Connection, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["organization_id", "workspace_id", "virtual_runtime_id", "data"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_connection" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["workspace_id"]:
            _path_params["workspaceId"] = _params["workspace_id"]

        if _params["virtual_runtime_id"]:
            _path_params["virtualRuntimeId"] = _params["virtual_runtime_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["data"] is not None:
            _body_params = _params["data"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "Connection",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces/{workspaceId}/virtual-runtimes/{virtualRuntimeId}/connections",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def create_virtual_runtime(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        body: Annotated[
            MutateVirtualRuntimeRequest,
            Field(..., description="request body for creating a virtual runtime"),
        ],
        **kwargs
    ) -> VirtualRuntime:  # noqa: E501
        """Deprecated - Create virtual runtime  # noqa: E501

        Deprecated - Create virtual runtime  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_virtual_runtime(organization_id, workspace_id, body, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param body: request body for creating a virtual runtime (required)
        :type body: MutateVirtualRuntimeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VirtualRuntime
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the create_virtual_runtime_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.create_virtual_runtime_with_http_info(
            organization_id, workspace_id, body, **kwargs
        )  # noqa: E501

    @validate_arguments
    def create_virtual_runtime_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        body: Annotated[
            MutateVirtualRuntimeRequest,
            Field(..., description="request body for creating a virtual runtime"),
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Deprecated - Create virtual runtime  # noqa: E501

        Deprecated - Create virtual runtime  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_virtual_runtime_with_http_info(organization_id, workspace_id, body, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param body: request body for creating a virtual runtime (required)
        :type body: MutateVirtualRuntimeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VirtualRuntime, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["organization_id", "workspace_id", "body"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_virtual_runtime" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["workspace_id"]:
            _path_params["workspaceId"] = _params["workspace_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["body"] is not None:
            _body_params = _params["body"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "VirtualRuntime",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces/{workspaceId}/virtual-runtimes",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def delete_connection(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        connection_id: Annotated[
            StrictStr, Field(..., description="ID of the connection")
        ],
        **kwargs
    ) -> None:  # noqa: E501
        """Deprecated - Delete connection  # noqa: E501

        Deprecated - Delete connection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_connection(organization_id, workspace_id, virtual_runtime_id, connection_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param connection_id: ID of the connection (required)
        :type connection_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the delete_connection_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.delete_connection_with_http_info(
            organization_id, workspace_id, virtual_runtime_id, connection_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def delete_connection_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        connection_id: Annotated[
            StrictStr, Field(..., description="ID of the connection")
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Deprecated - Delete connection  # noqa: E501

        Deprecated - Delete connection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_connection_with_http_info(organization_id, workspace_id, virtual_runtime_id, connection_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param connection_id: ID of the connection (required)
        :type connection_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            "organization_id",
            "workspace_id",
            "virtual_runtime_id",
            "connection_id",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_connection" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["workspace_id"]:
            _path_params["workspaceId"] = _params["workspace_id"]

        if _params["virtual_runtime_id"]:
            _path_params["virtualRuntimeId"] = _params["virtual_runtime_id"]

        if _params["connection_id"]:
            _path_params["connectionId"] = _params["connection_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["*/*"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces/{workspaceId}/virtual-runtimes/{virtualRuntimeId}/connections/{connectionId}",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def delete_virtual_runtime(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        **kwargs
    ) -> None:  # noqa: E501
        """Deprecated - Delete virtual runtime  # noqa: E501

        Deprecated - Delete virtual runtime  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_virtual_runtime(organization_id, workspace_id, virtual_runtime_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the delete_virtual_runtime_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.delete_virtual_runtime_with_http_info(
            organization_id, workspace_id, virtual_runtime_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def delete_virtual_runtime_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Deprecated - Delete virtual runtime  # noqa: E501

        Deprecated - Delete virtual runtime  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_virtual_runtime_with_http_info(organization_id, workspace_id, virtual_runtime_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["organization_id", "workspace_id", "virtual_runtime_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_virtual_runtime" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["workspace_id"]:
            _path_params["workspaceId"] = _params["workspace_id"]

        if _params["virtual_runtime_id"]:
            _path_params["virtualRuntimeId"] = _params["virtual_runtime_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["*/*"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces/{workspaceId}/virtual-runtimes/{virtualRuntimeId}",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_connection(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        connection_id: Annotated[
            StrictStr, Field(..., description="ID of the connection")
        ],
        **kwargs
    ) -> Connection:  # noqa: E501
        """Deprecated - Get connection  # noqa: E501

        Deprecated - Get connection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_connection(organization_id, virtual_runtime_id, connection_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param connection_id: ID of the connection (required)
        :type connection_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Connection
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_connection_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_connection_with_http_info(
            organization_id, virtual_runtime_id, connection_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_connection_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        connection_id: Annotated[
            StrictStr, Field(..., description="ID of the connection")
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Deprecated - Get connection  # noqa: E501

        Deprecated - Get connection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_connection_with_http_info(organization_id, virtual_runtime_id, connection_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param connection_id: ID of the connection (required)
        :type connection_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Connection, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["organization_id", "virtual_runtime_id", "connection_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_connection" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["virtual_runtime_id"]:
            _path_params["virtualRuntimeId"] = _params["virtual_runtime_id"]

        if _params["connection_id"]:
            _path_params["connectionId"] = _params["connection_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "Connection",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/virtual-runtimes/{virtualRuntimeId}/connections/{connectionId}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_virtual_runtime(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        **kwargs
    ) -> VirtualRuntime:  # noqa: E501
        """Deprecated - Get virtual runtime  # noqa: E501

        Deprecated - Get virtual runtime  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_virtual_runtime(organization_id, virtual_runtime_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VirtualRuntime
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_virtual_runtime_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_virtual_runtime_with_http_info(
            organization_id, virtual_runtime_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_virtual_runtime_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Deprecated - Get virtual runtime  # noqa: E501

        Deprecated - Get virtual runtime  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_virtual_runtime_with_http_info(organization_id, virtual_runtime_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VirtualRuntime, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["organization_id", "virtual_runtime_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_virtual_runtime" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["virtual_runtime_id"]:
            _path_params["virtualRuntimeId"] = _params["virtual_runtime_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["*/*"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "VirtualRuntime",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/virtual-runtimes/{virtualRuntimeId}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def list_connections(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        offset: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="offset for pagination"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="limit for pagination"),
        ] = None,
        sorts: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'"
            ),
        ] = None,
        **kwargs
    ) -> ConnectionsPaginated:  # noqa: E501
        """Deprecated - List connections for a virtual runtime  # noqa: E501

        Deprecated - List connections for a virtual runtime  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_connections(organization_id, virtual_runtime_id, offset, limit, sorts, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param sorts: sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ConnectionsPaginated
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the list_connections_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.list_connections_with_http_info(
            organization_id, virtual_runtime_id, offset, limit, sorts, **kwargs
        )  # noqa: E501

    @validate_arguments
    def list_connections_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        offset: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="offset for pagination"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="limit for pagination"),
        ] = None,
        sorts: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'"
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Deprecated - List connections for a virtual runtime  # noqa: E501

        Deprecated - List connections for a virtual runtime  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_connections_with_http_info(organization_id, virtual_runtime_id, offset, limit, sorts, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param sorts: sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ConnectionsPaginated, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "organization_id",
            "virtual_runtime_id",
            "offset",
            "limit",
            "sorts",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_connections" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["virtual_runtime_id"]:
            _path_params["virtualRuntimeId"] = _params["virtual_runtime_id"]

        # process the query parameters
        _query_params = []
        if _params.get("offset") is not None:  # noqa: E501
            _query_params.append(("offset", _params["offset"]))

        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("sorts") is not None:  # noqa: E501
            _query_params.append(("sorts", _params["sorts"]))
            _collection_formats["sorts"] = "multi"

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "ConnectionsPaginated",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/virtual-runtimes/{virtualRuntimeId}/connections",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def list_requirements(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        **kwargs
    ) -> VRRequirements:  # noqa: E501
        """Deprecated - List virtual runtime requirements  # noqa: E501

        Deprecated - List virtual runtime requirements  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_requirements(organization_id, virtual_runtime_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VRRequirements
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the list_requirements_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.list_requirements_with_http_info(
            organization_id, virtual_runtime_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def list_requirements_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Deprecated - List virtual runtime requirements  # noqa: E501

        Deprecated - List virtual runtime requirements  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_requirements_with_http_info(organization_id, virtual_runtime_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VRRequirements, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["organization_id", "virtual_runtime_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_requirements" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["virtual_runtime_id"]:
            _path_params["virtualRuntimeId"] = _params["virtual_runtime_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["*/*"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "VRRequirements",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/virtual-runtimes/{virtualRuntimeId}/requirements",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def list_variables(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        **kwargs
    ) -> VRVariables:  # noqa: E501
        """Deprecated - List virtual runtime variables  # noqa: E501

        Deprecated - List virtual runtime variables  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_variables(organization_id, virtual_runtime_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VRVariables
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the list_variables_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.list_variables_with_http_info(
            organization_id, virtual_runtime_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def list_variables_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Deprecated - List virtual runtime variables  # noqa: E501

        Deprecated - List virtual runtime variables  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_variables_with_http_info(organization_id, virtual_runtime_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VRVariables, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["organization_id", "virtual_runtime_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_variables" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["virtual_runtime_id"]:
            _path_params["virtualRuntimeId"] = _params["virtual_runtime_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["*/*"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "VRVariables",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/virtual-runtimes/{virtualRuntimeId}/variables",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def list_virtual_runtimes(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="IDs that define the workspaces where virtual runtimes belong to"
            ),
        ] = None,
        offset: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="offset for pagination"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="limit for pagination"),
        ] = None,
        sorts: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'"
            ),
        ] = None,
        **kwargs
    ) -> VirtualRuntimesPaginated:  # noqa: E501
        """Deprecated - List virtual runtimes in a workspace  # noqa: E501

        Deprecated - List virtual runtimes in a workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_virtual_runtimes(organization_id, workspace_ids, offset, limit, sorts, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_ids: IDs that define the workspaces where virtual runtimes belong to
        :type workspace_ids: List[str]
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param sorts: sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VirtualRuntimesPaginated
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the list_virtual_runtimes_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.list_virtual_runtimes_with_http_info(
            organization_id, workspace_ids, offset, limit, sorts, **kwargs
        )  # noqa: E501

    @validate_arguments
    def list_virtual_runtimes_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="IDs that define the workspaces where virtual runtimes belong to"
            ),
        ] = None,
        offset: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="offset for pagination"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="limit for pagination"),
        ] = None,
        sorts: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'"
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Deprecated - List virtual runtimes in a workspace  # noqa: E501

        Deprecated - List virtual runtimes in a workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_virtual_runtimes_with_http_info(organization_id, workspace_ids, offset, limit, sorts, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_ids: IDs that define the workspaces where virtual runtimes belong to
        :type workspace_ids: List[str]
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param sorts: sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VirtualRuntimesPaginated, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["organization_id", "workspace_ids", "offset", "limit", "sorts"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_virtual_runtimes" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        # process the query parameters
        _query_params = []
        if _params.get("workspace_ids") is not None:  # noqa: E501
            _query_params.append(("workspaceIds", _params["workspace_ids"]))
            _collection_formats["workspaceIds"] = "multi"

        if _params.get("offset") is not None:  # noqa: E501
            _query_params.append(("offset", _params["offset"]))

        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("sorts") is not None:  # noqa: E501
            _query_params.append(("sorts", _params["sorts"]))
            _collection_formats["sorts"] = "multi"

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "VirtualRuntimesPaginated",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/virtual-runtimes",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def list_vr_dag_run_task_instances(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        dag_id: Annotated[StrictStr, Field(..., description="ID of the dag")],
        dag_run_id: Annotated[StrictStr, Field(..., description="ID of the dag run")],
        offset: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="offset for pagination"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="limit for pagination"),
        ] = None,
        execution_date_gte: Annotated[
            Optional[datetime],
            Field(
                description="execution date is greater or equal to the specified date"
            ),
        ] = None,
        execution_date_lte: Annotated[
            Optional[datetime],
            Field(
                description="execution date is less than or equal to the specified date"
            ),
        ] = None,
        start_date_gte: Annotated[
            Optional[datetime],
            Field(
                description="start date is greater than or equal to the specified date"
            ),
        ] = None,
        start_date_lte: Annotated[
            Optional[datetime],
            Field(description="start date is less than or equal to the specified date"),
        ] = None,
        end_date_gte: Annotated[
            Optional[datetime],
            Field(
                description="end date is greater than or equal to the specified date"
            ),
        ] = None,
        end_date_lte: Annotated[
            Optional[datetime],
            Field(description="end date is less than or equal to the specified date"),
        ] = None,
        duration_sec_gte: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="duration is greater than or equal to the specified in seconds"
            ),
        ] = None,
        duration_sec_lte: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="duration is less than or equal to the specified in seconds"
            ),
        ] = None,
        states: Annotated[
            Optional[conlist(StrictStr)], Field(description="task states")
        ] = None,
        pools: Annotated[
            Optional[conlist(StrictStr)], Field(description="task pools")
        ] = None,
        queues: Annotated[
            Optional[conlist(StrictStr)], Field(description="task queues")
        ] = None,
        **kwargs
    ) -> VRDagRunTaskInstancesPaginated:  # noqa: E501
        """Deprecated - List task instances for dag run in a virtual runtime  # noqa: E501

        Deprecated - List task instances for dag run in a virtual runtime  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_vr_dag_run_task_instances(organization_id, workspace_id, virtual_runtime_id, dag_id, dag_run_id, offset, limit, execution_date_gte, execution_date_lte, start_date_gte, start_date_lte, end_date_gte, end_date_lte, duration_sec_gte, duration_sec_lte, states, pools, queues, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param dag_id: ID of the dag (required)
        :type dag_id: str
        :param dag_run_id: ID of the dag run (required)
        :type dag_run_id: str
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param execution_date_gte: execution date is greater or equal to the specified date
        :type execution_date_gte: datetime
        :param execution_date_lte: execution date is less than or equal to the specified date
        :type execution_date_lte: datetime
        :param start_date_gte: start date is greater than or equal to the specified date
        :type start_date_gte: datetime
        :param start_date_lte: start date is less than or equal to the specified date
        :type start_date_lte: datetime
        :param end_date_gte: end date is greater than or equal to the specified date
        :type end_date_gte: datetime
        :param end_date_lte: end date is less than or equal to the specified date
        :type end_date_lte: datetime
        :param duration_sec_gte: duration is greater than or equal to the specified in seconds
        :type duration_sec_gte: float
        :param duration_sec_lte: duration is less than or equal to the specified in seconds
        :type duration_sec_lte: float
        :param states: task states
        :type states: List[str]
        :param pools: task pools
        :type pools: List[str]
        :param queues: task queues
        :type queues: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VRDagRunTaskInstancesPaginated
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the list_vr_dag_run_task_instances_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.list_vr_dag_run_task_instances_with_http_info(
            organization_id,
            workspace_id,
            virtual_runtime_id,
            dag_id,
            dag_run_id,
            offset,
            limit,
            execution_date_gte,
            execution_date_lte,
            start_date_gte,
            start_date_lte,
            end_date_gte,
            end_date_lte,
            duration_sec_gte,
            duration_sec_lte,
            states,
            pools,
            queues,
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def list_vr_dag_run_task_instances_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        dag_id: Annotated[StrictStr, Field(..., description="ID of the dag")],
        dag_run_id: Annotated[StrictStr, Field(..., description="ID of the dag run")],
        offset: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="offset for pagination"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="limit for pagination"),
        ] = None,
        execution_date_gte: Annotated[
            Optional[datetime],
            Field(
                description="execution date is greater or equal to the specified date"
            ),
        ] = None,
        execution_date_lte: Annotated[
            Optional[datetime],
            Field(
                description="execution date is less than or equal to the specified date"
            ),
        ] = None,
        start_date_gte: Annotated[
            Optional[datetime],
            Field(
                description="start date is greater than or equal to the specified date"
            ),
        ] = None,
        start_date_lte: Annotated[
            Optional[datetime],
            Field(description="start date is less than or equal to the specified date"),
        ] = None,
        end_date_gte: Annotated[
            Optional[datetime],
            Field(
                description="end date is greater than or equal to the specified date"
            ),
        ] = None,
        end_date_lte: Annotated[
            Optional[datetime],
            Field(description="end date is less than or equal to the specified date"),
        ] = None,
        duration_sec_gte: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="duration is greater than or equal to the specified in seconds"
            ),
        ] = None,
        duration_sec_lte: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="duration is less than or equal to the specified in seconds"
            ),
        ] = None,
        states: Annotated[
            Optional[conlist(StrictStr)], Field(description="task states")
        ] = None,
        pools: Annotated[
            Optional[conlist(StrictStr)], Field(description="task pools")
        ] = None,
        queues: Annotated[
            Optional[conlist(StrictStr)], Field(description="task queues")
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Deprecated - List task instances for dag run in a virtual runtime  # noqa: E501

        Deprecated - List task instances for dag run in a virtual runtime  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_vr_dag_run_task_instances_with_http_info(organization_id, workspace_id, virtual_runtime_id, dag_id, dag_run_id, offset, limit, execution_date_gte, execution_date_lte, start_date_gte, start_date_lte, end_date_gte, end_date_lte, duration_sec_gte, duration_sec_lte, states, pools, queues, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param dag_id: ID of the dag (required)
        :type dag_id: str
        :param dag_run_id: ID of the dag run (required)
        :type dag_run_id: str
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param execution_date_gte: execution date is greater or equal to the specified date
        :type execution_date_gte: datetime
        :param execution_date_lte: execution date is less than or equal to the specified date
        :type execution_date_lte: datetime
        :param start_date_gte: start date is greater than or equal to the specified date
        :type start_date_gte: datetime
        :param start_date_lte: start date is less than or equal to the specified date
        :type start_date_lte: datetime
        :param end_date_gte: end date is greater than or equal to the specified date
        :type end_date_gte: datetime
        :param end_date_lte: end date is less than or equal to the specified date
        :type end_date_lte: datetime
        :param duration_sec_gte: duration is greater than or equal to the specified in seconds
        :type duration_sec_gte: float
        :param duration_sec_lte: duration is less than or equal to the specified in seconds
        :type duration_sec_lte: float
        :param states: task states
        :type states: List[str]
        :param pools: task pools
        :type pools: List[str]
        :param queues: task queues
        :type queues: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VRDagRunTaskInstancesPaginated, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "organization_id",
            "workspace_id",
            "virtual_runtime_id",
            "dag_id",
            "dag_run_id",
            "offset",
            "limit",
            "execution_date_gte",
            "execution_date_lte",
            "start_date_gte",
            "start_date_lte",
            "end_date_gte",
            "end_date_lte",
            "duration_sec_gte",
            "duration_sec_lte",
            "states",
            "pools",
            "queues",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_vr_dag_run_task_instances" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["workspace_id"]:
            _path_params["workspaceId"] = _params["workspace_id"]

        if _params["virtual_runtime_id"]:
            _path_params["virtualRuntimeId"] = _params["virtual_runtime_id"]

        if _params["dag_id"]:
            _path_params["dagId"] = _params["dag_id"]

        if _params["dag_run_id"]:
            _path_params["dagRunId"] = _params["dag_run_id"]

        # process the query parameters
        _query_params = []
        if _params.get("offset") is not None:  # noqa: E501
            _query_params.append(("offset", _params["offset"]))

        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("execution_date_gte") is not None:  # noqa: E501
            if isinstance(_params["execution_date_gte"], datetime):
                _query_params.append(
                    (
                        "executionDateGte",
                        _params["execution_date_gte"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(
                    ("executionDateGte", _params["execution_date_gte"])
                )

        if _params.get("execution_date_lte") is not None:  # noqa: E501
            if isinstance(_params["execution_date_lte"], datetime):
                _query_params.append(
                    (
                        "executionDateLte",
                        _params["execution_date_lte"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(
                    ("executionDateLte", _params["execution_date_lte"])
                )

        if _params.get("start_date_gte") is not None:  # noqa: E501
            if isinstance(_params["start_date_gte"], datetime):
                _query_params.append(
                    (
                        "startDateGte",
                        _params["start_date_gte"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("startDateGte", _params["start_date_gte"]))

        if _params.get("start_date_lte") is not None:  # noqa: E501
            if isinstance(_params["start_date_lte"], datetime):
                _query_params.append(
                    (
                        "startDateLte",
                        _params["start_date_lte"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("startDateLte", _params["start_date_lte"]))

        if _params.get("end_date_gte") is not None:  # noqa: E501
            if isinstance(_params["end_date_gte"], datetime):
                _query_params.append(
                    (
                        "endDateGte",
                        _params["end_date_gte"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("endDateGte", _params["end_date_gte"]))

        if _params.get("end_date_lte") is not None:  # noqa: E501
            if isinstance(_params["end_date_lte"], datetime):
                _query_params.append(
                    (
                        "endDateLte",
                        _params["end_date_lte"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("endDateLte", _params["end_date_lte"]))

        if _params.get("duration_sec_gte") is not None:  # noqa: E501
            _query_params.append(("durationSecGte", _params["duration_sec_gte"]))

        if _params.get("duration_sec_lte") is not None:  # noqa: E501
            _query_params.append(("durationSecLte", _params["duration_sec_lte"]))

        if _params.get("states") is not None:  # noqa: E501
            _query_params.append(("states", _params["states"]))
            _collection_formats["states"] = "multi"

        if _params.get("pools") is not None:  # noqa: E501
            _query_params.append(("pools", _params["pools"]))
            _collection_formats["pools"] = "multi"

        if _params.get("queues") is not None:  # noqa: E501
            _query_params.append(("queues", _params["queues"]))
            _collection_formats["queues"] = "multi"

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "VRDagRunTaskInstancesPaginated",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "404": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces/{workspaceId}/virtual-runtimes/{virtualRuntimeId}/dags/{dagId}/runs/{dagRunId}/task-instances",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def list_vr_dag_runs(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        dag_id: Annotated[StrictStr, Field(..., description="ID of the dag")],
        offset: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="offset for pagination"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="limit for pagination"),
        ] = None,
        order_by: Annotated[
            Optional[StrictStr], Field(description="order list by the field name")
        ] = None,
        state: Annotated[
            Optional[StrictStr],
            Field(
                description="list of state of dag runs, separated by comma (OR condition)"
            ),
        ] = None,
        execution_date_gte: Annotated[
            Optional[datetime],
            Field(
                description="returns runs executed on date greater than or equal to specified date"
            ),
        ] = None,
        execution_date_lte: Annotated[
            Optional[datetime],
            Field(
                description="returns runs executed on date less than or equal to specified date"
            ),
        ] = None,
        start_date_gte: Annotated[
            Optional[datetime],
            Field(
                description="returns runs started on date greater than or equal to specified date"
            ),
        ] = None,
        start_date_lte: Annotated[
            Optional[datetime],
            Field(
                description="returns runs started on date less than or equal to specified date"
            ),
        ] = None,
        end_date_gte: Annotated[
            Optional[datetime],
            Field(
                description="returns runs ended on date greater than or equal to specified date"
            ),
        ] = None,
        end_date_lte: Annotated[
            Optional[datetime],
            Field(
                description="returns runs ended on date less than or equal to specified date"
            ),
        ] = None,
        **kwargs
    ) -> VRDagRunsPaginated:  # noqa: E501
        """Deprecated - List dag runs for a dag in a virtual runtime  # noqa: E501

        Deprecated - List dag runs for a dag in a virtual runtime  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_vr_dag_runs(organization_id, workspace_id, virtual_runtime_id, dag_id, offset, limit, order_by, state, execution_date_gte, execution_date_lte, start_date_gte, start_date_lte, end_date_gte, end_date_lte, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param dag_id: ID of the dag (required)
        :type dag_id: str
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param order_by: order list by the field name
        :type order_by: str
        :param state: list of state of dag runs, separated by comma (OR condition)
        :type state: str
        :param execution_date_gte: returns runs executed on date greater than or equal to specified date
        :type execution_date_gte: datetime
        :param execution_date_lte: returns runs executed on date less than or equal to specified date
        :type execution_date_lte: datetime
        :param start_date_gte: returns runs started on date greater than or equal to specified date
        :type start_date_gte: datetime
        :param start_date_lte: returns runs started on date less than or equal to specified date
        :type start_date_lte: datetime
        :param end_date_gte: returns runs ended on date greater than or equal to specified date
        :type end_date_gte: datetime
        :param end_date_lte: returns runs ended on date less than or equal to specified date
        :type end_date_lte: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VRDagRunsPaginated
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the list_vr_dag_runs_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.list_vr_dag_runs_with_http_info(
            organization_id,
            workspace_id,
            virtual_runtime_id,
            dag_id,
            offset,
            limit,
            order_by,
            state,
            execution_date_gte,
            execution_date_lte,
            start_date_gte,
            start_date_lte,
            end_date_gte,
            end_date_lte,
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def list_vr_dag_runs_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        dag_id: Annotated[StrictStr, Field(..., description="ID of the dag")],
        offset: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="offset for pagination"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="limit for pagination"),
        ] = None,
        order_by: Annotated[
            Optional[StrictStr], Field(description="order list by the field name")
        ] = None,
        state: Annotated[
            Optional[StrictStr],
            Field(
                description="list of state of dag runs, separated by comma (OR condition)"
            ),
        ] = None,
        execution_date_gte: Annotated[
            Optional[datetime],
            Field(
                description="returns runs executed on date greater than or equal to specified date"
            ),
        ] = None,
        execution_date_lte: Annotated[
            Optional[datetime],
            Field(
                description="returns runs executed on date less than or equal to specified date"
            ),
        ] = None,
        start_date_gte: Annotated[
            Optional[datetime],
            Field(
                description="returns runs started on date greater than or equal to specified date"
            ),
        ] = None,
        start_date_lte: Annotated[
            Optional[datetime],
            Field(
                description="returns runs started on date less than or equal to specified date"
            ),
        ] = None,
        end_date_gte: Annotated[
            Optional[datetime],
            Field(
                description="returns runs ended on date greater than or equal to specified date"
            ),
        ] = None,
        end_date_lte: Annotated[
            Optional[datetime],
            Field(
                description="returns runs ended on date less than or equal to specified date"
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Deprecated - List dag runs for a dag in a virtual runtime  # noqa: E501

        Deprecated - List dag runs for a dag in a virtual runtime  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_vr_dag_runs_with_http_info(organization_id, workspace_id, virtual_runtime_id, dag_id, offset, limit, order_by, state, execution_date_gte, execution_date_lte, start_date_gte, start_date_lte, end_date_gte, end_date_lte, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param dag_id: ID of the dag (required)
        :type dag_id: str
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param order_by: order list by the field name
        :type order_by: str
        :param state: list of state of dag runs, separated by comma (OR condition)
        :type state: str
        :param execution_date_gte: returns runs executed on date greater than or equal to specified date
        :type execution_date_gte: datetime
        :param execution_date_lte: returns runs executed on date less than or equal to specified date
        :type execution_date_lte: datetime
        :param start_date_gte: returns runs started on date greater than or equal to specified date
        :type start_date_gte: datetime
        :param start_date_lte: returns runs started on date less than or equal to specified date
        :type start_date_lte: datetime
        :param end_date_gte: returns runs ended on date greater than or equal to specified date
        :type end_date_gte: datetime
        :param end_date_lte: returns runs ended on date less than or equal to specified date
        :type end_date_lte: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VRDagRunsPaginated, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "organization_id",
            "workspace_id",
            "virtual_runtime_id",
            "dag_id",
            "offset",
            "limit",
            "order_by",
            "state",
            "execution_date_gte",
            "execution_date_lte",
            "start_date_gte",
            "start_date_lte",
            "end_date_gte",
            "end_date_lte",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_vr_dag_runs" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["workspace_id"]:
            _path_params["workspaceId"] = _params["workspace_id"]

        if _params["virtual_runtime_id"]:
            _path_params["virtualRuntimeId"] = _params["virtual_runtime_id"]

        if _params["dag_id"]:
            _path_params["dagId"] = _params["dag_id"]

        # process the query parameters
        _query_params = []
        if _params.get("offset") is not None:  # noqa: E501
            _query_params.append(("offset", _params["offset"]))

        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("order_by") is not None:  # noqa: E501
            _query_params.append(("orderBy", _params["order_by"]))

        if _params.get("state") is not None:  # noqa: E501
            _query_params.append(("state", _params["state"]))

        if _params.get("execution_date_gte") is not None:  # noqa: E501
            if isinstance(_params["execution_date_gte"], datetime):
                _query_params.append(
                    (
                        "executionDateGte",
                        _params["execution_date_gte"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(
                    ("executionDateGte", _params["execution_date_gte"])
                )

        if _params.get("execution_date_lte") is not None:  # noqa: E501
            if isinstance(_params["execution_date_lte"], datetime):
                _query_params.append(
                    (
                        "executionDateLte",
                        _params["execution_date_lte"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(
                    ("executionDateLte", _params["execution_date_lte"])
                )

        if _params.get("start_date_gte") is not None:  # noqa: E501
            if isinstance(_params["start_date_gte"], datetime):
                _query_params.append(
                    (
                        "startDateGte",
                        _params["start_date_gte"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("startDateGte", _params["start_date_gte"]))

        if _params.get("start_date_lte") is not None:  # noqa: E501
            if isinstance(_params["start_date_lte"], datetime):
                _query_params.append(
                    (
                        "startDateLte",
                        _params["start_date_lte"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("startDateLte", _params["start_date_lte"]))

        if _params.get("end_date_gte") is not None:  # noqa: E501
            if isinstance(_params["end_date_gte"], datetime):
                _query_params.append(
                    (
                        "endDateGte",
                        _params["end_date_gte"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("endDateGte", _params["end_date_gte"]))

        if _params.get("end_date_lte") is not None:  # noqa: E501
            if isinstance(_params["end_date_lte"], datetime):
                _query_params.append(
                    (
                        "endDateLte",
                        _params["end_date_lte"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("endDateLte", _params["end_date_lte"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "VRDagRunsPaginated",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "404": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces/{workspaceId}/virtual-runtimes/{virtualRuntimeId}/dags/{dagId}/runs",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def list_vr_dags(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        offset: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="offset for pagination"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, ge=1)],
            Field(description="limit for pagination"),
        ] = None,
        order_by: Annotated[
            Optional[StrictStr], Field(description="order list by the field name")
        ] = None,
        tags: Annotated[Optional[StrictStr], Field(description="tags")] = None,
        only_active: Annotated[
            Optional[StrictBool], Field(description="show only active dags")
        ] = None,
        dag_id_pattern: Annotated[
            Optional[StrictStr], Field(description="show dags that match this pattern")
        ] = None,
        **kwargs
    ) -> VRDagsPaginated:  # noqa: E501
        """Deprecated - List all dags in a virtual runtime  # noqa: E501

        Deprecated - List all dags in a virtual runtime  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_vr_dags(organization_id, workspace_id, virtual_runtime_id, offset, limit, order_by, tags, only_active, dag_id_pattern, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param order_by: order list by the field name
        :type order_by: str
        :param tags: tags
        :type tags: str
        :param only_active: show only active dags
        :type only_active: bool
        :param dag_id_pattern: show dags that match this pattern
        :type dag_id_pattern: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VRDagsPaginated
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the list_vr_dags_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.list_vr_dags_with_http_info(
            organization_id,
            workspace_id,
            virtual_runtime_id,
            offset,
            limit,
            order_by,
            tags,
            only_active,
            dag_id_pattern,
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def list_vr_dags_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        offset: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="offset for pagination"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, ge=1)],
            Field(description="limit for pagination"),
        ] = None,
        order_by: Annotated[
            Optional[StrictStr], Field(description="order list by the field name")
        ] = None,
        tags: Annotated[Optional[StrictStr], Field(description="tags")] = None,
        only_active: Annotated[
            Optional[StrictBool], Field(description="show only active dags")
        ] = None,
        dag_id_pattern: Annotated[
            Optional[StrictStr], Field(description="show dags that match this pattern")
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Deprecated - List all dags in a virtual runtime  # noqa: E501

        Deprecated - List all dags in a virtual runtime  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_vr_dags_with_http_info(organization_id, workspace_id, virtual_runtime_id, offset, limit, order_by, tags, only_active, dag_id_pattern, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param order_by: order list by the field name
        :type order_by: str
        :param tags: tags
        :type tags: str
        :param only_active: show only active dags
        :type only_active: bool
        :param dag_id_pattern: show dags that match this pattern
        :type dag_id_pattern: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VRDagsPaginated, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "organization_id",
            "workspace_id",
            "virtual_runtime_id",
            "offset",
            "limit",
            "order_by",
            "tags",
            "only_active",
            "dag_id_pattern",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_vr_dags" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["workspace_id"]:
            _path_params["workspaceId"] = _params["workspace_id"]

        if _params["virtual_runtime_id"]:
            _path_params["virtualRuntimeId"] = _params["virtual_runtime_id"]

        # process the query parameters
        _query_params = []
        if _params.get("offset") is not None:  # noqa: E501
            _query_params.append(("offset", _params["offset"]))

        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("order_by") is not None:  # noqa: E501
            _query_params.append(("orderBy", _params["order_by"]))

        if _params.get("tags") is not None:  # noqa: E501
            _query_params.append(("tags", _params["tags"]))

        if _params.get("only_active") is not None:  # noqa: E501
            _query_params.append(("onlyActive", _params["only_active"]))

        if _params.get("dag_id_pattern") is not None:  # noqa: E501
            _query_params.append(("dagIdPattern", _params["dag_id_pattern"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "VRDagsPaginated",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces/{workspaceId}/virtual-runtimes/{virtualRuntimeId}/dags",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def list_vr_import_errors(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        offset: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="offset for pagination"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, ge=1)],
            Field(description="limit for pagination"),
        ] = None,
        order_by: Annotated[
            Optional[StrictStr], Field(description="order list by the field name")
        ] = None,
        **kwargs
    ) -> VRImportErrorsPaginated:  # noqa: E501
        """Deprecated - List all import errors in a virtual runtime  # noqa: E501

        Deprecated - List all import errors in a virtual runtime  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_vr_import_errors(organization_id, workspace_id, virtual_runtime_id, offset, limit, order_by, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param order_by: order list by the field name
        :type order_by: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VRImportErrorsPaginated
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the list_vr_import_errors_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.list_vr_import_errors_with_http_info(
            organization_id,
            workspace_id,
            virtual_runtime_id,
            offset,
            limit,
            order_by,
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def list_vr_import_errors_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        offset: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="offset for pagination"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, ge=1)],
            Field(description="limit for pagination"),
        ] = None,
        order_by: Annotated[
            Optional[StrictStr], Field(description="order list by the field name")
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Deprecated - List all import errors in a virtual runtime  # noqa: E501

        Deprecated - List all import errors in a virtual runtime  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_vr_import_errors_with_http_info(organization_id, workspace_id, virtual_runtime_id, offset, limit, order_by, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param order_by: order list by the field name
        :type order_by: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VRImportErrorsPaginated, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "organization_id",
            "workspace_id",
            "virtual_runtime_id",
            "offset",
            "limit",
            "order_by",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_vr_import_errors" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["workspace_id"]:
            _path_params["workspaceId"] = _params["workspace_id"]

        if _params["virtual_runtime_id"]:
            _path_params["virtualRuntimeId"] = _params["virtual_runtime_id"]

        # process the query parameters
        _query_params = []
        if _params.get("offset") is not None:  # noqa: E501
            _query_params.append(("offset", _params["offset"]))

        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("order_by") is not None:  # noqa: E501
            _query_params.append(("orderBy", _params["order_by"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "VRImportErrorsPaginated",
            "401": "Error",
            "403": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces/{workspaceId}/virtual-runtimes/{virtualRuntimeId}/import-errors",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def mutate_requirements(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        data: Annotated[
            MutateVRRequirementsRequest,
            Field(
                ...,
                description="request body for mutating virtual runtime requirements",
            ),
        ],
        **kwargs
    ) -> VRRequirements:  # noqa: E501
        """Deprecated - Mutate virtual runtime requirements  # noqa: E501

        Deprecated - Mutate virtual runtime requirements  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mutate_requirements(organization_id, workspace_id, virtual_runtime_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param data: request body for mutating virtual runtime requirements (required)
        :type data: MutateVRRequirementsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VRRequirements
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the mutate_requirements_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.mutate_requirements_with_http_info(
            organization_id, workspace_id, virtual_runtime_id, data, **kwargs
        )  # noqa: E501

    @validate_arguments
    def mutate_requirements_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        data: Annotated[
            MutateVRRequirementsRequest,
            Field(
                ...,
                description="request body for mutating virtual runtime requirements",
            ),
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Deprecated - Mutate virtual runtime requirements  # noqa: E501

        Deprecated - Mutate virtual runtime requirements  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mutate_requirements_with_http_info(organization_id, workspace_id, virtual_runtime_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param data: request body for mutating virtual runtime requirements (required)
        :type data: MutateVRRequirementsRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VRRequirements, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["organization_id", "workspace_id", "virtual_runtime_id", "data"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mutate_requirements" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["workspace_id"]:
            _path_params["workspaceId"] = _params["workspace_id"]

        if _params["virtual_runtime_id"]:
            _path_params["virtualRuntimeId"] = _params["virtual_runtime_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["data"] is not None:
            _body_params = _params["data"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "VRRequirements",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces/{workspaceId}/virtual-runtimes/{virtualRuntimeId}/requirements",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def mutate_variables(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        data: Annotated[
            MutateVRVariablesRequest,
            Field(
                ..., description="request body for mutating virtual runtime variables"
            ),
        ],
        **kwargs
    ) -> VRVariables:  # noqa: E501
        """Deprecated - Mutate virtual runtime variables  # noqa: E501

        Deprecated - Mutate virtual runtime variables  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mutate_variables(organization_id, workspace_id, virtual_runtime_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param data: request body for mutating virtual runtime variables (required)
        :type data: MutateVRVariablesRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VRVariables
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the mutate_variables_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.mutate_variables_with_http_info(
            organization_id, workspace_id, virtual_runtime_id, data, **kwargs
        )  # noqa: E501

    @validate_arguments
    def mutate_variables_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        data: Annotated[
            MutateVRVariablesRequest,
            Field(
                ..., description="request body for mutating virtual runtime variables"
            ),
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Deprecated - Mutate virtual runtime variables  # noqa: E501

        Deprecated - Mutate virtual runtime variables  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mutate_variables_with_http_info(organization_id, workspace_id, virtual_runtime_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param data: request body for mutating virtual runtime variables (required)
        :type data: MutateVRVariablesRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VRVariables, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["organization_id", "workspace_id", "virtual_runtime_id", "data"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mutate_variables" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["workspace_id"]:
            _path_params["workspaceId"] = _params["workspace_id"]

        if _params["virtual_runtime_id"]:
            _path_params["virtualRuntimeId"] = _params["virtual_runtime_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["data"] is not None:
            _body_params = _params["data"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "VRVariables",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces/{workspaceId}/virtual-runtimes/{virtualRuntimeId}/variables",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def pause_dag(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        dag_id: Annotated[StrictStr, Field(..., description="ID of the dag")],
        **kwargs
    ) -> UpdateDag:  # noqa: E501
        """Deprecated - Pause a dag  # noqa: E501

        Deprecated - API provides a simple way for a dag to be updated with is_paused: true  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pause_dag(organization_id, workspace_id, virtual_runtime_id, dag_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param dag_id: ID of the dag (required)
        :type dag_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UpdateDag
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the pause_dag_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.pause_dag_with_http_info(
            organization_id, workspace_id, virtual_runtime_id, dag_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def pause_dag_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        dag_id: Annotated[StrictStr, Field(..., description="ID of the dag")],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Deprecated - Pause a dag  # noqa: E501

        Deprecated - API provides a simple way for a dag to be updated with is_paused: true  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pause_dag_with_http_info(organization_id, workspace_id, virtual_runtime_id, dag_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param dag_id: ID of the dag (required)
        :type dag_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UpdateDag, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "organization_id",
            "workspace_id",
            "virtual_runtime_id",
            "dag_id",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pause_dag" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["workspace_id"]:
            _path_params["workspaceId"] = _params["workspace_id"]

        if _params["virtual_runtime_id"]:
            _path_params["virtualRuntimeId"] = _params["virtual_runtime_id"]

        if _params["dag_id"]:
            _path_params["dagId"] = _params["dag_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "UpdateDag",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces/{workspaceId}/virtual-runtimes/{virtualRuntimeId}/dags/{dagId}/pause",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def post_dag_run(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        dag_id: Annotated[StrictStr, Field(..., description="ID of the dag")],
        data: Annotated[
            PostDagRunRequest,
            Field(..., description="request body for trigger a dag run"),
        ],
        **kwargs
    ) -> PostDagRun:  # noqa: E501
        """Deprecated - Triggers a dag run  # noqa: E501

        Deprecated - Triggers a dag run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_dag_run(organization_id, workspace_id, virtual_runtime_id, dag_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param dag_id: ID of the dag (required)
        :type dag_id: str
        :param data: request body for trigger a dag run (required)
        :type data: PostDagRunRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PostDagRun
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the post_dag_run_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.post_dag_run_with_http_info(
            organization_id, workspace_id, virtual_runtime_id, dag_id, data, **kwargs
        )  # noqa: E501

    @validate_arguments
    def post_dag_run_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        dag_id: Annotated[StrictStr, Field(..., description="ID of the dag")],
        data: Annotated[
            PostDagRunRequest,
            Field(..., description="request body for trigger a dag run"),
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Deprecated - Triggers a dag run  # noqa: E501

        Deprecated - Triggers a dag run  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_dag_run_with_http_info(organization_id, workspace_id, virtual_runtime_id, dag_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param dag_id: ID of the dag (required)
        :type dag_id: str
        :param data: request body for trigger a dag run (required)
        :type data: PostDagRunRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PostDagRun, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "organization_id",
            "workspace_id",
            "virtual_runtime_id",
            "dag_id",
            "data",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dag_run" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["workspace_id"]:
            _path_params["workspaceId"] = _params["workspace_id"]

        if _params["virtual_runtime_id"]:
            _path_params["virtualRuntimeId"] = _params["virtual_runtime_id"]

        if _params["dag_id"]:
            _path_params["dagId"] = _params["dag_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["data"] is not None:
            _body_params = _params["data"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "PostDagRun",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces/{workspaceId}/virtual-runtimes/{virtualRuntimeId}/dags/{dagId}/run",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def resume_dag(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        dag_id: Annotated[StrictStr, Field(..., description="ID of the dag")],
        **kwargs
    ) -> UpdateDag:  # noqa: E501
        """Deprecated - Update a dag  # noqa: E501

        Deprecated - API provides a way to update the is_paused field on a Dag  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.resume_dag(organization_id, workspace_id, virtual_runtime_id, dag_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param dag_id: ID of the dag (required)
        :type dag_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UpdateDag
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the resume_dag_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.resume_dag_with_http_info(
            organization_id, workspace_id, virtual_runtime_id, dag_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def resume_dag_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        dag_id: Annotated[StrictStr, Field(..., description="ID of the dag")],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Deprecated - Update a dag  # noqa: E501

        Deprecated - API provides a way to update the is_paused field on a Dag  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.resume_dag_with_http_info(organization_id, workspace_id, virtual_runtime_id, dag_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param dag_id: ID of the dag (required)
        :type dag_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UpdateDag, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "organization_id",
            "workspace_id",
            "virtual_runtime_id",
            "dag_id",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resume_dag" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["workspace_id"]:
            _path_params["workspaceId"] = _params["workspace_id"]

        if _params["virtual_runtime_id"]:
            _path_params["virtualRuntimeId"] = _params["virtual_runtime_id"]

        if _params["dag_id"]:
            _path_params["dagId"] = _params["dag_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "UpdateDag",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces/{workspaceId}/virtual-runtimes/{virtualRuntimeId}/dags/{dagId}/resume",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def update_connection(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        connection_id: Annotated[
            StrictStr, Field(..., description="ID of the connection")
        ],
        data: Annotated[
            MutateConnectionRequest,
            Field(..., description="request body for updating a connection"),
        ],
        **kwargs
    ) -> Connection:  # noqa: E501
        """Deprecated - Update connection  # noqa: E501

        Deprecated - Update connection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_connection(organization_id, workspace_id, virtual_runtime_id, connection_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param connection_id: ID of the connection (required)
        :type connection_id: str
        :param data: request body for updating a connection (required)
        :type data: MutateConnectionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Connection
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the update_connection_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.update_connection_with_http_info(
            organization_id,
            workspace_id,
            virtual_runtime_id,
            connection_id,
            data,
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def update_connection_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        connection_id: Annotated[
            StrictStr, Field(..., description="ID of the connection")
        ],
        data: Annotated[
            MutateConnectionRequest,
            Field(..., description="request body for updating a connection"),
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Deprecated - Update connection  # noqa: E501

        Deprecated - Update connection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_connection_with_http_info(organization_id, workspace_id, virtual_runtime_id, connection_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param connection_id: ID of the connection (required)
        :type connection_id: str
        :param data: request body for updating a connection (required)
        :type data: MutateConnectionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Connection, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "organization_id",
            "workspace_id",
            "virtual_runtime_id",
            "connection_id",
            "data",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_connection" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["workspace_id"]:
            _path_params["workspaceId"] = _params["workspace_id"]

        if _params["virtual_runtime_id"]:
            _path_params["virtualRuntimeId"] = _params["virtual_runtime_id"]

        if _params["connection_id"]:
            _path_params["connectionId"] = _params["connection_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["data"] is not None:
            _body_params = _params["data"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "Connection",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces/{workspaceId}/virtual-runtimes/{virtualRuntimeId}/connections/{connectionId}",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def update_virtual_runtime(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        body: Annotated[
            MutateVirtualRuntimeRequest,
            Field(..., description="request body for updating a virtual runtime"),
        ],
        **kwargs
    ) -> VirtualRuntime:  # noqa: E501
        """Deprecated - Update virtual runtime  # noqa: E501

        Deprecated - Update virtual runtime  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_virtual_runtime(organization_id, workspace_id, virtual_runtime_id, body, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param body: request body for updating a virtual runtime (required)
        :type body: MutateVirtualRuntimeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VirtualRuntime
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the update_virtual_runtime_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.update_virtual_runtime_with_http_info(
            organization_id, workspace_id, virtual_runtime_id, body, **kwargs
        )  # noqa: E501

    @validate_arguments
    def update_virtual_runtime_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        virtual_runtime_id: Annotated[
            StrictStr, Field(..., description="ID of the virtual runtime")
        ],
        body: Annotated[
            MutateVirtualRuntimeRequest,
            Field(..., description="request body for updating a virtual runtime"),
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Deprecated - Update virtual runtime  # noqa: E501

        Deprecated - Update virtual runtime  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_virtual_runtime_with_http_info(organization_id, workspace_id, virtual_runtime_id, body, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param virtual_runtime_id: ID of the virtual runtime (required)
        :type virtual_runtime_id: str
        :param body: request body for updating a virtual runtime (required)
        :type body: MutateVirtualRuntimeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VirtualRuntime, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["organization_id", "workspace_id", "virtual_runtime_id", "body"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_virtual_runtime" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["workspace_id"]:
            _path_params["workspaceId"] = _params["workspace_id"]

        if _params["virtual_runtime_id"]:
            _path_params["virtualRuntimeId"] = _params["virtual_runtime_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["body"] is not None:
            _body_params = _params["body"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "VirtualRuntime",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces/{workspaceId}/virtual-runtimes/{virtualRuntimeId}",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
