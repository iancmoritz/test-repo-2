# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, conint, conlist, validator

from typing import List, Optional

from astronomer_core_api.sdk.models.instant_metric_per_component_status import (
    InstantMetricPerComponentStatus,
)
from astronomer_core_api.sdk.models.instant_metric_per_pool_status import (
    InstantMetricPerPoolStatus,
)
from astronomer_core_api.sdk.models.instant_metrics_paginated import (
    InstantMetricsPaginated,
)
from astronomer_core_api.sdk.models.range_metric import RangeMetric
from astronomer_core_api.sdk.models.range_metric_per_component import (
    RangeMetricPerComponent,
)
from astronomer_core_api.sdk.models.range_metric_per_component_and_queue_and_status import (
    RangeMetricPerComponentAndQueueAndStatus,
)
from astronomer_core_api.sdk.models.range_metric_per_pod import RangeMetricPerPod
from astronomer_core_api.sdk.models.range_metric_per_status import RangeMetricPerStatus
from astronomer_core_api.sdk.models.range_metrics_paginated import RangeMetricsPaginated
from astronomer_core_api.sdk.models.range_metrics_per_status_paginated import (
    RangeMetricsPerStatusPaginated,
)

from astronomer_core_api.sdk.api_client import ApiClient
from astronomer_core_api.sdk.api_response import ApiResponse
from astronomer_core_api.sdk.exceptions import ApiTypeError, ApiValueError  # noqa: F401


class DeploymentMetricsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_deployment_cpu_usage_limits(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        deployment_id: Annotated[
            StrictStr,
            Field(..., description="deployment ID corresponding to the metrics"),
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(..., description="range of the CPU usage limits metrics in seconds"),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(
                ...,
                description="step interval of the CPU usage limits metrics in seconds",
            ),
        ],
        **kwargs
    ) -> List[RangeMetricPerComponent]:  # noqa: E501
        """Get CPU usage limits metrics for a deployment  # noqa: E501

        Get CPU usage limits metrics for a deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployment_cpu_usage_limits(organization_id, deployment_id, range, step, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID corresponding to the metrics (required)
        :type deployment_id: str
        :param range: range of the CPU usage limits metrics in seconds (required)
        :type range: int
        :param step: step interval of the CPU usage limits metrics in seconds (required)
        :type step: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[RangeMetricPerComponent]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_deployment_cpu_usage_limits_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_deployment_cpu_usage_limits_with_http_info(
            organization_id, deployment_id, range, step, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_deployment_cpu_usage_limits_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        deployment_id: Annotated[
            StrictStr,
            Field(..., description="deployment ID corresponding to the metrics"),
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(..., description="range of the CPU usage limits metrics in seconds"),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(
                ...,
                description="step interval of the CPU usage limits metrics in seconds",
            ),
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get CPU usage limits metrics for a deployment  # noqa: E501

        Get CPU usage limits metrics for a deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployment_cpu_usage_limits_with_http_info(organization_id, deployment_id, range, step, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID corresponding to the metrics (required)
        :type deployment_id: str
        :param range: range of the CPU usage limits metrics in seconds (required)
        :type range: int
        :param step: step interval of the CPU usage limits metrics in seconds (required)
        :type step: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[RangeMetricPerComponent], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["organization_id", "deployment_id", "range", "step"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployment_cpu_usage_limits" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["deployment_id"]:
            _path_params["deploymentId"] = _params["deployment_id"]

        # process the query parameters
        _query_params = []
        if _params.get("range") is not None:  # noqa: E501
            _query_params.append(("range", _params["range"]))

        if _params.get("step") is not None:  # noqa: E501
            _query_params.append(("step", _params["step"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "List[RangeMetricPerComponent]",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "499": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/deployments/{deploymentId}/metrics/cpu-usage-limits",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_deployment_cpu_usages_per_pod(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        deployment_id: Annotated[
            StrictStr,
            Field(..., description="deployment ID corresponding to the metrics"),
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(..., description="range of the CPU usages metrics in seconds"),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(
                ..., description="step interval of the CPU usages metrics in seconds"
            ),
        ],
        **kwargs
    ) -> List[RangeMetricPerPod]:  # noqa: E501
        """Get CPU usages metrics per pod for a deployment  # noqa: E501

        Get CPU usages metrics per pod for a deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployment_cpu_usages_per_pod(organization_id, deployment_id, range, step, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID corresponding to the metrics (required)
        :type deployment_id: str
        :param range: range of the CPU usages metrics in seconds (required)
        :type range: int
        :param step: step interval of the CPU usages metrics in seconds (required)
        :type step: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[RangeMetricPerPod]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_deployment_cpu_usages_per_pod_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_deployment_cpu_usages_per_pod_with_http_info(
            organization_id, deployment_id, range, step, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_deployment_cpu_usages_per_pod_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        deployment_id: Annotated[
            StrictStr,
            Field(..., description="deployment ID corresponding to the metrics"),
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(..., description="range of the CPU usages metrics in seconds"),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(
                ..., description="step interval of the CPU usages metrics in seconds"
            ),
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get CPU usages metrics per pod for a deployment  # noqa: E501

        Get CPU usages metrics per pod for a deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployment_cpu_usages_per_pod_with_http_info(organization_id, deployment_id, range, step, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID corresponding to the metrics (required)
        :type deployment_id: str
        :param range: range of the CPU usages metrics in seconds (required)
        :type range: int
        :param step: step interval of the CPU usages metrics in seconds (required)
        :type step: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[RangeMetricPerPod], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["organization_id", "deployment_id", "range", "step"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployment_cpu_usages_per_pod" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["deployment_id"]:
            _path_params["deploymentId"] = _params["deployment_id"]

        # process the query parameters
        _query_params = []
        if _params.get("range") is not None:  # noqa: E501
            _query_params.append(("range", _params["range"]))

        if _params.get("step") is not None:  # noqa: E501
            _query_params.append(("step", _params["step"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "List[RangeMetricPerPod]",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/deployments/{deploymentId}/metrics/cpu-usages-per-pod",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_deployment_memory_byte_limits(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        deployment_id: Annotated[
            StrictStr,
            Field(..., description="deployment ID corresponding to the metrics"),
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(
                ..., description="range of the memory byte limits metrics in seconds"
            ),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(
                ...,
                description="step interval of the memory byte limits metrics in seconds",
            ),
        ],
        **kwargs
    ) -> List[RangeMetricPerComponent]:  # noqa: E501
        """Get memory byte limits metrics for a deployment  # noqa: E501

        Get memory byte limits metrics for a deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployment_memory_byte_limits(organization_id, deployment_id, range, step, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID corresponding to the metrics (required)
        :type deployment_id: str
        :param range: range of the memory byte limits metrics in seconds (required)
        :type range: int
        :param step: step interval of the memory byte limits metrics in seconds (required)
        :type step: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[RangeMetricPerComponent]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_deployment_memory_byte_limits_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_deployment_memory_byte_limits_with_http_info(
            organization_id, deployment_id, range, step, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_deployment_memory_byte_limits_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        deployment_id: Annotated[
            StrictStr,
            Field(..., description="deployment ID corresponding to the metrics"),
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(
                ..., description="range of the memory byte limits metrics in seconds"
            ),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(
                ...,
                description="step interval of the memory byte limits metrics in seconds",
            ),
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get memory byte limits metrics for a deployment  # noqa: E501

        Get memory byte limits metrics for a deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployment_memory_byte_limits_with_http_info(organization_id, deployment_id, range, step, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID corresponding to the metrics (required)
        :type deployment_id: str
        :param range: range of the memory byte limits metrics in seconds (required)
        :type range: int
        :param step: step interval of the memory byte limits metrics in seconds (required)
        :type step: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[RangeMetricPerComponent], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["organization_id", "deployment_id", "range", "step"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployment_memory_byte_limits" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["deployment_id"]:
            _path_params["deploymentId"] = _params["deployment_id"]

        # process the query parameters
        _query_params = []
        if _params.get("range") is not None:  # noqa: E501
            _query_params.append(("range", _params["range"]))

        if _params.get("step") is not None:  # noqa: E501
            _query_params.append(("step", _params["step"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "List[RangeMetricPerComponent]",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "499": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/deployments/{deploymentId}/metrics/memory-byte-limits",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_deployment_memory_bytes_per_pod(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        deployment_id: Annotated[
            StrictStr,
            Field(..., description="deployment ID corresponding to the metrics"),
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(..., description="range of the memory bytes metrics in seconds"),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(
                ..., description="step interval of the memory bytes metrics in seconds"
            ),
        ],
        **kwargs
    ) -> List[RangeMetricPerPod]:  # noqa: E501
        """Get memory bytes metrics per pod for a deployment  # noqa: E501

        Get memory bytes metrics per pod for a deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployment_memory_bytes_per_pod(organization_id, deployment_id, range, step, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID corresponding to the metrics (required)
        :type deployment_id: str
        :param range: range of the memory bytes metrics in seconds (required)
        :type range: int
        :param step: step interval of the memory bytes metrics in seconds (required)
        :type step: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[RangeMetricPerPod]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_deployment_memory_bytes_per_pod_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_deployment_memory_bytes_per_pod_with_http_info(
            organization_id, deployment_id, range, step, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_deployment_memory_bytes_per_pod_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        deployment_id: Annotated[
            StrictStr,
            Field(..., description="deployment ID corresponding to the metrics"),
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(..., description="range of the memory bytes metrics in seconds"),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(
                ..., description="step interval of the memory bytes metrics in seconds"
            ),
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get memory bytes metrics per pod for a deployment  # noqa: E501

        Get memory bytes metrics per pod for a deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployment_memory_bytes_per_pod_with_http_info(organization_id, deployment_id, range, step, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID corresponding to the metrics (required)
        :type deployment_id: str
        :param range: range of the memory bytes metrics in seconds (required)
        :type range: int
        :param step: step interval of the memory bytes metrics in seconds (required)
        :type step: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[RangeMetricPerPod], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["organization_id", "deployment_id", "range", "step"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployment_memory_bytes_per_pod" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["deployment_id"]:
            _path_params["deploymentId"] = _params["deployment_id"]

        # process the query parameters
        _query_params = []
        if _params.get("range") is not None:  # noqa: E501
            _query_params.append(("range", _params["range"]))

        if _params.get("step") is not None:  # noqa: E501
            _query_params.append(("step", _params["step"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "List[RangeMetricPerPod]",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/deployments/{deploymentId}/metrics/memory-bytes-per-pod",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_deployment_network_bytes_per_pod(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        deployment_id: Annotated[
            StrictStr,
            Field(..., description="deployment ID corresponding to the metrics"),
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(..., description="range of the network bytes metrics in seconds"),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(
                ..., description="step interval of the network bytes metrics in seconds"
            ),
        ],
        **kwargs
    ) -> List[RangeMetricPerPod]:  # noqa: E501
        """Get network bytes metrics per pod for a deployment  # noqa: E501

        Get network bytes metrics per pod for a deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployment_network_bytes_per_pod(organization_id, deployment_id, range, step, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID corresponding to the metrics (required)
        :type deployment_id: str
        :param range: range of the network bytes metrics in seconds (required)
        :type range: int
        :param step: step interval of the network bytes metrics in seconds (required)
        :type step: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[RangeMetricPerPod]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_deployment_network_bytes_per_pod_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_deployment_network_bytes_per_pod_with_http_info(
            organization_id, deployment_id, range, step, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_deployment_network_bytes_per_pod_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        deployment_id: Annotated[
            StrictStr,
            Field(..., description="deployment ID corresponding to the metrics"),
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(..., description="range of the network bytes metrics in seconds"),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(
                ..., description="step interval of the network bytes metrics in seconds"
            ),
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get network bytes metrics per pod for a deployment  # noqa: E501

        Get network bytes metrics per pod for a deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployment_network_bytes_per_pod_with_http_info(organization_id, deployment_id, range, step, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID corresponding to the metrics (required)
        :type deployment_id: str
        :param range: range of the network bytes metrics in seconds (required)
        :type range: int
        :param step: step interval of the network bytes metrics in seconds (required)
        :type step: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[RangeMetricPerPod], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["organization_id", "deployment_id", "range", "step"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployment_network_bytes_per_pod" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["deployment_id"]:
            _path_params["deploymentId"] = _params["deployment_id"]

        # process the query parameters
        _query_params = []
        if _params.get("range") is not None:  # noqa: E501
            _query_params.append(("range", _params["range"]))

        if _params.get("step") is not None:  # noqa: E501
            _query_params.append(("step", _params["step"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "List[RangeMetricPerPod]",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/deployments/{deploymentId}/metrics/network-bytes-per-pod",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_deployment_scheduler_heartbeat(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        deployment_id: Annotated[
            StrictStr,
            Field(..., description="deployment ID corresponding to the metrics"),
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(
                ..., description="range of the scheduler heartbeats metrics in seconds"
            ),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(
                ...,
                description="step interval to find max per-minute scheduler heartbeats metrics in seconds",
            ),
        ],
        **kwargs
    ) -> List[RangeMetric]:  # noqa: E501
        """Get scheduler heartbeats (max per-minute heartbeat count over step interval) metrics for a deployment  # noqa: E501

        Get scheduler heartbeats (max per-minute heartbeat count over step interval) metrics for a deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployment_scheduler_heartbeat(organization_id, deployment_id, range, step, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID corresponding to the metrics (required)
        :type deployment_id: str
        :param range: range of the scheduler heartbeats metrics in seconds (required)
        :type range: int
        :param step: step interval to find max per-minute scheduler heartbeats metrics in seconds (required)
        :type step: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[RangeMetric]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_deployment_scheduler_heartbeat_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_deployment_scheduler_heartbeat_with_http_info(
            organization_id, deployment_id, range, step, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_deployment_scheduler_heartbeat_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        deployment_id: Annotated[
            StrictStr,
            Field(..., description="deployment ID corresponding to the metrics"),
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(
                ..., description="range of the scheduler heartbeats metrics in seconds"
            ),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(
                ...,
                description="step interval to find max per-minute scheduler heartbeats metrics in seconds",
            ),
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get scheduler heartbeats (max per-minute heartbeat count over step interval) metrics for a deployment  # noqa: E501

        Get scheduler heartbeats (max per-minute heartbeat count over step interval) metrics for a deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployment_scheduler_heartbeat_with_http_info(organization_id, deployment_id, range, step, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID corresponding to the metrics (required)
        :type deployment_id: str
        :param range: range of the scheduler heartbeats metrics in seconds (required)
        :type range: int
        :param step: step interval to find max per-minute scheduler heartbeats metrics in seconds (required)
        :type step: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[RangeMetric], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["organization_id", "deployment_id", "range", "step"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployment_scheduler_heartbeat" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["deployment_id"]:
            _path_params["deploymentId"] = _params["deployment_id"]

        # process the query parameters
        _query_params = []
        if _params.get("range") is not None:  # noqa: E501
            _query_params.append(("range", _params["range"]))

        if _params.get("step") is not None:  # noqa: E501
            _query_params.append(("step", _params["step"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "List[RangeMetric]",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "499": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/deployments/{deploymentId}/metrics/scheduler-heartbeats",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_deployments_dag_run_durations_per_status(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        deployment_id: Annotated[
            StrictStr,
            Field(..., description="deployment ID corresponding to the metrics"),
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(..., description="range of the DAG run durations metrics in seconds"),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(
                ...,
                description="step interval of the DAG run durations metrics in seconds",
            ),
        ],
        status: Annotated[
            Optional[StrictStr], Field(description="status of dag runs")
        ] = None,
        **kwargs
    ) -> List[RangeMetricPerStatus]:  # noqa: E501
        """Get DAG run P90 durations metrics per status for a deployment  # noqa: E501

        Get DAG run P90 durations metrics per status for a deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployments_dag_run_durations_per_status(organization_id, deployment_id, range, step, status, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID corresponding to the metrics (required)
        :type deployment_id: str
        :param range: range of the DAG run durations metrics in seconds (required)
        :type range: int
        :param step: step interval of the DAG run durations metrics in seconds (required)
        :type step: int
        :param status: status of dag runs
        :type status: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[RangeMetricPerStatus]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_deployments_dag_run_durations_per_status_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_deployments_dag_run_durations_per_status_with_http_info(
            organization_id, deployment_id, range, step, status, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_deployments_dag_run_durations_per_status_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        deployment_id: Annotated[
            StrictStr,
            Field(..., description="deployment ID corresponding to the metrics"),
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(..., description="range of the DAG run durations metrics in seconds"),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(
                ...,
                description="step interval of the DAG run durations metrics in seconds",
            ),
        ],
        status: Annotated[
            Optional[StrictStr], Field(description="status of dag runs")
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get DAG run P90 durations metrics per status for a deployment  # noqa: E501

        Get DAG run P90 durations metrics per status for a deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployments_dag_run_durations_per_status_with_http_info(organization_id, deployment_id, range, step, status, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID corresponding to the metrics (required)
        :type deployment_id: str
        :param range: range of the DAG run durations metrics in seconds (required)
        :type range: int
        :param step: step interval of the DAG run durations metrics in seconds (required)
        :type step: int
        :param status: status of dag runs
        :type status: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[RangeMetricPerStatus], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["organization_id", "deployment_id", "range", "step", "status"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployments_dag_run_durations_per_status" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["deployment_id"]:
            _path_params["deploymentId"] = _params["deployment_id"]

        # process the query parameters
        _query_params = []
        if _params.get("range") is not None:  # noqa: E501
            _query_params.append(("range", _params["range"]))

        if _params.get("step") is not None:  # noqa: E501
            _query_params.append(("step", _params["step"]))

        if _params.get("status") is not None:  # noqa: E501
            _query_params.append(("status", _params["status"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "List[RangeMetricPerStatus]",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/deployments/{deploymentId}/metrics/dag-run-durations-per-status",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_deployments_dag_runs_per_status(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        deployment_id: Annotated[
            StrictStr,
            Field(..., description="deployment ID corresponding to the metrics"),
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(..., description="range of the DAG runs metrics in seconds"),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(..., description="step interval of the DAG runs metrics in seconds"),
        ],
        status: Annotated[
            Optional[StrictStr], Field(description="status of dag runs")
        ] = None,
        **kwargs
    ) -> List[RangeMetricPerStatus]:  # noqa: E501
        """Get DAG runs metrics per status for a deployment  # noqa: E501

        Get DAG runs metrics per status for a deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployments_dag_runs_per_status(organization_id, deployment_id, range, step, status, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID corresponding to the metrics (required)
        :type deployment_id: str
        :param range: range of the DAG runs metrics in seconds (required)
        :type range: int
        :param step: step interval of the DAG runs metrics in seconds (required)
        :type step: int
        :param status: status of dag runs
        :type status: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[RangeMetricPerStatus]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_deployments_dag_runs_per_status_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_deployments_dag_runs_per_status_with_http_info(
            organization_id, deployment_id, range, step, status, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_deployments_dag_runs_per_status_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        deployment_id: Annotated[
            StrictStr,
            Field(..., description="deployment ID corresponding to the metrics"),
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(..., description="range of the DAG runs metrics in seconds"),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(..., description="step interval of the DAG runs metrics in seconds"),
        ],
        status: Annotated[
            Optional[StrictStr], Field(description="status of dag runs")
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get DAG runs metrics per status for a deployment  # noqa: E501

        Get DAG runs metrics per status for a deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployments_dag_runs_per_status_with_http_info(organization_id, deployment_id, range, step, status, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID corresponding to the metrics (required)
        :type deployment_id: str
        :param range: range of the DAG runs metrics in seconds (required)
        :type range: int
        :param step: step interval of the DAG runs metrics in seconds (required)
        :type step: int
        :param status: status of dag runs
        :type status: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[RangeMetricPerStatus], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["organization_id", "deployment_id", "range", "step", "status"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployments_dag_runs_per_status" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["deployment_id"]:
            _path_params["deploymentId"] = _params["deployment_id"]

        # process the query parameters
        _query_params = []
        if _params.get("range") is not None:  # noqa: E501
            _query_params.append(("range", _params["range"]))

        if _params.get("step") is not None:  # noqa: E501
            _query_params.append(("step", _params["step"]))

        if _params.get("status") is not None:  # noqa: E501
            _query_params.append(("status", _params["status"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "List[RangeMetricPerStatus]",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "499": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/deployments/{deploymentId}/metrics/dag-runs-per-status",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_deployments_task_run_durations_per_status(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        deployment_id: Annotated[
            StrictStr,
            Field(..., description="deployment ID corresponding to the metrics"),
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(
                ..., description="range of the task run durations metrics in seconds"
            ),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(
                ...,
                description="step interval of the task run durations metrics in seconds",
            ),
        ],
        status: Annotated[
            Optional[StrictStr], Field(description="status of task runs")
        ] = None,
        **kwargs
    ) -> List[RangeMetricPerStatus]:  # noqa: E501
        """Get task run P90 durations metrics per status for a deployment  # noqa: E501

        Get task run P90 durations metrics per status for a deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployments_task_run_durations_per_status(organization_id, deployment_id, range, step, status, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID corresponding to the metrics (required)
        :type deployment_id: str
        :param range: range of the task run durations metrics in seconds (required)
        :type range: int
        :param step: step interval of the task run durations metrics in seconds (required)
        :type step: int
        :param status: status of task runs
        :type status: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[RangeMetricPerStatus]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_deployments_task_run_durations_per_status_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_deployments_task_run_durations_per_status_with_http_info(
            organization_id, deployment_id, range, step, status, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_deployments_task_run_durations_per_status_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        deployment_id: Annotated[
            StrictStr,
            Field(..., description="deployment ID corresponding to the metrics"),
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(
                ..., description="range of the task run durations metrics in seconds"
            ),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(
                ...,
                description="step interval of the task run durations metrics in seconds",
            ),
        ],
        status: Annotated[
            Optional[StrictStr], Field(description="status of task runs")
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get task run P90 durations metrics per status for a deployment  # noqa: E501

        Get task run P90 durations metrics per status for a deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployments_task_run_durations_per_status_with_http_info(organization_id, deployment_id, range, step, status, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID corresponding to the metrics (required)
        :type deployment_id: str
        :param range: range of the task run durations metrics in seconds (required)
        :type range: int
        :param step: step interval of the task run durations metrics in seconds (required)
        :type step: int
        :param status: status of task runs
        :type status: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[RangeMetricPerStatus], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["organization_id", "deployment_id", "range", "step", "status"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployments_task_run_durations_per_status" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["deployment_id"]:
            _path_params["deploymentId"] = _params["deployment_id"]

        # process the query parameters
        _query_params = []
        if _params.get("range") is not None:  # noqa: E501
            _query_params.append(("range", _params["range"]))

        if _params.get("step") is not None:  # noqa: E501
            _query_params.append(("step", _params["step"]))

        if _params.get("status") is not None:  # noqa: E501
            _query_params.append(("status", _params["status"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "List[RangeMetricPerStatus]",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/deployments/{deploymentId}/metrics/task-run-durations-per-status",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_deployments_task_runs_per_status(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        deployment_id: Annotated[
            StrictStr,
            Field(..., description="deployment ID corresponding to the metrics"),
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(..., description="range of the task runs metrics in seconds"),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(..., description="step interval of the task runs metrics in seconds"),
        ],
        status: Annotated[
            Optional[StrictStr], Field(description="status of task runs")
        ] = None,
        **kwargs
    ) -> List[RangeMetricPerStatus]:  # noqa: E501
        """Get task runs metrics per status for a deployment  # noqa: E501

        Get task runs metrics per status for a deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployments_task_runs_per_status(organization_id, deployment_id, range, step, status, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID corresponding to the metrics (required)
        :type deployment_id: str
        :param range: range of the task runs metrics in seconds (required)
        :type range: int
        :param step: step interval of the task runs metrics in seconds (required)
        :type step: int
        :param status: status of task runs
        :type status: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[RangeMetricPerStatus]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_deployments_task_runs_per_status_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_deployments_task_runs_per_status_with_http_info(
            organization_id, deployment_id, range, step, status, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_deployments_task_runs_per_status_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        deployment_id: Annotated[
            StrictStr,
            Field(..., description="deployment ID corresponding to the metrics"),
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(..., description="range of the task runs metrics in seconds"),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(..., description="step interval of the task runs metrics in seconds"),
        ],
        status: Annotated[
            Optional[StrictStr], Field(description="status of task runs")
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get task runs metrics per status for a deployment  # noqa: E501

        Get task runs metrics per status for a deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_deployments_task_runs_per_status_with_http_info(organization_id, deployment_id, range, step, status, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID corresponding to the metrics (required)
        :type deployment_id: str
        :param range: range of the task runs metrics in seconds (required)
        :type range: int
        :param step: step interval of the task runs metrics in seconds (required)
        :type step: int
        :param status: status of task runs
        :type status: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[RangeMetricPerStatus], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["organization_id", "deployment_id", "range", "step", "status"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployments_task_runs_per_status" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["deployment_id"]:
            _path_params["deploymentId"] = _params["deployment_id"]

        # process the query parameters
        _query_params = []
        if _params.get("range") is not None:  # noqa: E501
            _query_params.append(("range", _params["range"]))

        if _params.get("step") is not None:  # noqa: E501
            _query_params.append(("step", _params["step"]))

        if _params.get("status") is not None:  # noqa: E501
            _query_params.append(("status", _params["status"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "List[RangeMetricPerStatus]",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "499": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/deployments/{deploymentId}/metrics/task-runs-per-status",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_pod_count_over_time(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        deployment_id: Annotated[
            StrictStr,
            Field(..., description="deployment ID corresponding to the metrics"),
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(..., description="range of pod count metrics in seconds"),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(..., description="step of pod count metrics in seconds"),
        ],
        **kwargs
    ) -> List[RangeMetricPerComponentAndQueueAndStatus]:  # noqa: E501
        """Get pod count per component and worker queue and status over time  # noqa: E501

        Get pod count per component and worker queue and status over time  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pod_count_over_time(organization_id, deployment_id, range, step, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID corresponding to the metrics (required)
        :type deployment_id: str
        :param range: range of pod count metrics in seconds (required)
        :type range: int
        :param step: step of pod count metrics in seconds (required)
        :type step: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[RangeMetricPerComponentAndQueueAndStatus]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_pod_count_over_time_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_pod_count_over_time_with_http_info(
            organization_id, deployment_id, range, step, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_pod_count_over_time_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        deployment_id: Annotated[
            StrictStr,
            Field(..., description="deployment ID corresponding to the metrics"),
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(..., description="range of pod count metrics in seconds"),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(..., description="step of pod count metrics in seconds"),
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get pod count per component and worker queue and status over time  # noqa: E501

        Get pod count per component and worker queue and status over time  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pod_count_over_time_with_http_info(organization_id, deployment_id, range, step, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_id: deployment ID corresponding to the metrics (required)
        :type deployment_id: str
        :param range: range of pod count metrics in seconds (required)
        :type range: int
        :param step: step of pod count metrics in seconds (required)
        :type step: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[RangeMetricPerComponentAndQueueAndStatus], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["organization_id", "deployment_id", "range", "step"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pod_count_over_time" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["deployment_id"]:
            _path_params["deploymentId"] = _params["deployment_id"]

        # process the query parameters
        _query_params = []
        if _params.get("range") is not None:  # noqa: E501
            _query_params.append(("range", _params["range"]))

        if _params.get("step") is not None:  # noqa: E501
            _query_params.append(("step", _params["step"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "List[RangeMetricPerComponentAndQueueAndStatus]",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/deployments/{deploymentId}/metrics/pod-count-over-time",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def list_deployments_cpu_usages(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(..., description="range of the CPU usages metrics in seconds"),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(
                ..., description="step interval of the CPU usages metrics in seconds"
            ),
        ],
        deployment_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(description="IDs that define the deployments"),
        ] = None,
        workspace_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="IDs that define the workspaces where deployments belong to"
            ),
        ] = None,
        offset: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="offset for deployments pagination"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="limit for deployments pagination"),
        ] = None,
        sorts: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="sorting criteria for deployments, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'"
            ),
        ] = None,
        **kwargs
    ) -> RangeMetricsPaginated:  # noqa: E501
        """List CPU usages metrics for deployments  # noqa: E501

        List CPU usages metrics for deployments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_deployments_cpu_usages(organization_id, range, step, deployment_ids, workspace_ids, offset, limit, sorts, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param range: range of the CPU usages metrics in seconds (required)
        :type range: int
        :param step: step interval of the CPU usages metrics in seconds (required)
        :type step: int
        :param deployment_ids: IDs that define the deployments
        :type deployment_ids: List[str]
        :param workspace_ids: IDs that define the workspaces where deployments belong to
        :type workspace_ids: List[str]
        :param offset: offset for deployments pagination
        :type offset: int
        :param limit: limit for deployments pagination
        :type limit: int
        :param sorts: sorting criteria for deployments, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RangeMetricsPaginated
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the list_deployments_cpu_usages_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.list_deployments_cpu_usages_with_http_info(
            organization_id,
            range,
            step,
            deployment_ids,
            workspace_ids,
            offset,
            limit,
            sorts,
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def list_deployments_cpu_usages_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(..., description="range of the CPU usages metrics in seconds"),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(
                ..., description="step interval of the CPU usages metrics in seconds"
            ),
        ],
        deployment_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(description="IDs that define the deployments"),
        ] = None,
        workspace_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="IDs that define the workspaces where deployments belong to"
            ),
        ] = None,
        offset: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="offset for deployments pagination"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="limit for deployments pagination"),
        ] = None,
        sorts: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="sorting criteria for deployments, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'"
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """List CPU usages metrics for deployments  # noqa: E501

        List CPU usages metrics for deployments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_deployments_cpu_usages_with_http_info(organization_id, range, step, deployment_ids, workspace_ids, offset, limit, sorts, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param range: range of the CPU usages metrics in seconds (required)
        :type range: int
        :param step: step interval of the CPU usages metrics in seconds (required)
        :type step: int
        :param deployment_ids: IDs that define the deployments
        :type deployment_ids: List[str]
        :param workspace_ids: IDs that define the workspaces where deployments belong to
        :type workspace_ids: List[str]
        :param offset: offset for deployments pagination
        :type offset: int
        :param limit: limit for deployments pagination
        :type limit: int
        :param sorts: sorting criteria for deployments, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RangeMetricsPaginated, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "organization_id",
            "range",
            "step",
            "deployment_ids",
            "workspace_ids",
            "offset",
            "limit",
            "sorts",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_deployments_cpu_usages" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        # process the query parameters
        _query_params = []
        if _params.get("deployment_ids") is not None:  # noqa: E501
            _query_params.append(("deploymentIds", _params["deployment_ids"]))
            _collection_formats["deploymentIds"] = "multi"

        if _params.get("workspace_ids") is not None:  # noqa: E501
            _query_params.append(("workspaceIds", _params["workspace_ids"]))
            _collection_formats["workspaceIds"] = "multi"

        if _params.get("offset") is not None:  # noqa: E501
            _query_params.append(("offset", _params["offset"]))

        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("sorts") is not None:  # noqa: E501
            _query_params.append(("sorts", _params["sorts"]))
            _collection_formats["sorts"] = "multi"

        if _params.get("range") is not None:  # noqa: E501
            _query_params.append(("range", _params["range"]))

        if _params.get("step") is not None:  # noqa: E501
            _query_params.append(("step", _params["step"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "RangeMetricsPaginated",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/deployments/metrics/cpu-usages",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def list_deployments_dag_runs(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(..., description="range of the DAG runs metrics in seconds"),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(..., description="step interval of the DAG runs metrics in seconds"),
        ],
        deployment_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(description="IDs that define the deployments"),
        ] = None,
        workspace_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="IDs that define the workspaces where deployments belong to"
            ),
        ] = None,
        offset: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="offset for deployments pagination"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="limit for deployments pagination"),
        ] = None,
        sorts: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="sorting criteria for deployments, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'"
            ),
        ] = None,
        status: Annotated[
            Optional[StrictStr], Field(description="status of dag runs")
        ] = None,
        **kwargs
    ) -> RangeMetricsPerStatusPaginated:  # noqa: E501
        """List DAG runs metrics for deployments  # noqa: E501

        List DAG runs metrics for deployments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_deployments_dag_runs(organization_id, range, step, deployment_ids, workspace_ids, offset, limit, sorts, status, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param range: range of the DAG runs metrics in seconds (required)
        :type range: int
        :param step: step interval of the DAG runs metrics in seconds (required)
        :type step: int
        :param deployment_ids: IDs that define the deployments
        :type deployment_ids: List[str]
        :param workspace_ids: IDs that define the workspaces where deployments belong to
        :type workspace_ids: List[str]
        :param offset: offset for deployments pagination
        :type offset: int
        :param limit: limit for deployments pagination
        :type limit: int
        :param sorts: sorting criteria for deployments, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param status: status of dag runs
        :type status: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RangeMetricsPerStatusPaginated
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the list_deployments_dag_runs_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.list_deployments_dag_runs_with_http_info(
            organization_id,
            range,
            step,
            deployment_ids,
            workspace_ids,
            offset,
            limit,
            sorts,
            status,
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def list_deployments_dag_runs_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(..., description="range of the DAG runs metrics in seconds"),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(..., description="step interval of the DAG runs metrics in seconds"),
        ],
        deployment_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(description="IDs that define the deployments"),
        ] = None,
        workspace_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="IDs that define the workspaces where deployments belong to"
            ),
        ] = None,
        offset: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="offset for deployments pagination"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="limit for deployments pagination"),
        ] = None,
        sorts: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="sorting criteria for deployments, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'"
            ),
        ] = None,
        status: Annotated[
            Optional[StrictStr], Field(description="status of dag runs")
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """List DAG runs metrics for deployments  # noqa: E501

        List DAG runs metrics for deployments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_deployments_dag_runs_with_http_info(organization_id, range, step, deployment_ids, workspace_ids, offset, limit, sorts, status, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param range: range of the DAG runs metrics in seconds (required)
        :type range: int
        :param step: step interval of the DAG runs metrics in seconds (required)
        :type step: int
        :param deployment_ids: IDs that define the deployments
        :type deployment_ids: List[str]
        :param workspace_ids: IDs that define the workspaces where deployments belong to
        :type workspace_ids: List[str]
        :param offset: offset for deployments pagination
        :type offset: int
        :param limit: limit for deployments pagination
        :type limit: int
        :param sorts: sorting criteria for deployments, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param status: status of dag runs
        :type status: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RangeMetricsPerStatusPaginated, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "organization_id",
            "range",
            "step",
            "deployment_ids",
            "workspace_ids",
            "offset",
            "limit",
            "sorts",
            "status",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_deployments_dag_runs" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        # process the query parameters
        _query_params = []
        if _params.get("deployment_ids") is not None:  # noqa: E501
            _query_params.append(("deploymentIds", _params["deployment_ids"]))
            _collection_formats["deploymentIds"] = "multi"

        if _params.get("workspace_ids") is not None:  # noqa: E501
            _query_params.append(("workspaceIds", _params["workspace_ids"]))
            _collection_formats["workspaceIds"] = "multi"

        if _params.get("offset") is not None:  # noqa: E501
            _query_params.append(("offset", _params["offset"]))

        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("sorts") is not None:  # noqa: E501
            _query_params.append(("sorts", _params["sorts"]))
            _collection_formats["sorts"] = "multi"

        if _params.get("range") is not None:  # noqa: E501
            _query_params.append(("range", _params["range"]))

        if _params.get("step") is not None:  # noqa: E501
            _query_params.append(("step", _params["step"]))

        if _params.get("status") is not None:  # noqa: E501
            _query_params.append(("status", _params["status"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "RangeMetricsPerStatusPaginated",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "499": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/deployments/metrics/dag-runs-per-status",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def list_deployments_dagbag_sizes(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        deployment_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(description="IDs that define the deployments"),
        ] = None,
        workspace_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="IDs that define the workspaces where deployments belong to"
            ),
        ] = None,
        offset: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="offset for deployments pagination"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="limit for deployments pagination"),
        ] = None,
        sorts: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="sorting criteria for deployments, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'"
            ),
        ] = None,
        **kwargs
    ) -> InstantMetricsPaginated:  # noqa: E501
        """List DAG bag sizes for deployments  # noqa: E501

        List DAG bag sizes for deployments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_deployments_dagbag_sizes(organization_id, deployment_ids, workspace_ids, offset, limit, sorts, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_ids: IDs that define the deployments
        :type deployment_ids: List[str]
        :param workspace_ids: IDs that define the workspaces where deployments belong to
        :type workspace_ids: List[str]
        :param offset: offset for deployments pagination
        :type offset: int
        :param limit: limit for deployments pagination
        :type limit: int
        :param sorts: sorting criteria for deployments, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: InstantMetricsPaginated
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the list_deployments_dagbag_sizes_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.list_deployments_dagbag_sizes_with_http_info(
            organization_id,
            deployment_ids,
            workspace_ids,
            offset,
            limit,
            sorts,
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def list_deployments_dagbag_sizes_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        deployment_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(description="IDs that define the deployments"),
        ] = None,
        workspace_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="IDs that define the workspaces where deployments belong to"
            ),
        ] = None,
        offset: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="offset for deployments pagination"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="limit for deployments pagination"),
        ] = None,
        sorts: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="sorting criteria for deployments, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'"
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """List DAG bag sizes for deployments  # noqa: E501

        List DAG bag sizes for deployments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_deployments_dagbag_sizes_with_http_info(organization_id, deployment_ids, workspace_ids, offset, limit, sorts, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param deployment_ids: IDs that define the deployments
        :type deployment_ids: List[str]
        :param workspace_ids: IDs that define the workspaces where deployments belong to
        :type workspace_ids: List[str]
        :param offset: offset for deployments pagination
        :type offset: int
        :param limit: limit for deployments pagination
        :type limit: int
        :param sorts: sorting criteria for deployments, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(InstantMetricsPaginated, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "organization_id",
            "deployment_ids",
            "workspace_ids",
            "offset",
            "limit",
            "sorts",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_deployments_dagbag_sizes" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        # process the query parameters
        _query_params = []
        if _params.get("deployment_ids") is not None:  # noqa: E501
            _query_params.append(("deploymentIds", _params["deployment_ids"]))
            _collection_formats["deploymentIds"] = "multi"

        if _params.get("workspace_ids") is not None:  # noqa: E501
            _query_params.append(("workspaceIds", _params["workspace_ids"]))
            _collection_formats["workspaceIds"] = "multi"

        if _params.get("offset") is not None:  # noqa: E501
            _query_params.append(("offset", _params["offset"]))

        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("sorts") is not None:  # noqa: E501
            _query_params.append(("sorts", _params["sorts"]))
            _collection_formats["sorts"] = "multi"

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "InstantMetricsPaginated",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/deployments/metrics/dagbag-sizes",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def list_deployments_memory_usages(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(..., description="range of the memory usages metrics in seconds"),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(
                ..., description="step interval of the memory usages metrics in seconds"
            ),
        ],
        deployment_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(description="IDs that define the deployments"),
        ] = None,
        workspace_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="IDs that define the workspaces where deployments belong to"
            ),
        ] = None,
        offset: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="offset for deployments pagination"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="limit for deployments pagination"),
        ] = None,
        sorts: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="sorting criteria for deployments, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'"
            ),
        ] = None,
        **kwargs
    ) -> RangeMetricsPaginated:  # noqa: E501
        """List memory usages metrics for deployments  # noqa: E501

        List memory usages metrics for deployments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_deployments_memory_usages(organization_id, range, step, deployment_ids, workspace_ids, offset, limit, sorts, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param range: range of the memory usages metrics in seconds (required)
        :type range: int
        :param step: step interval of the memory usages metrics in seconds (required)
        :type step: int
        :param deployment_ids: IDs that define the deployments
        :type deployment_ids: List[str]
        :param workspace_ids: IDs that define the workspaces where deployments belong to
        :type workspace_ids: List[str]
        :param offset: offset for deployments pagination
        :type offset: int
        :param limit: limit for deployments pagination
        :type limit: int
        :param sorts: sorting criteria for deployments, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RangeMetricsPaginated
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the list_deployments_memory_usages_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.list_deployments_memory_usages_with_http_info(
            organization_id,
            range,
            step,
            deployment_ids,
            workspace_ids,
            offset,
            limit,
            sorts,
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def list_deployments_memory_usages_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(..., description="range of the memory usages metrics in seconds"),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(
                ..., description="step interval of the memory usages metrics in seconds"
            ),
        ],
        deployment_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(description="IDs that define the deployments"),
        ] = None,
        workspace_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="IDs that define the workspaces where deployments belong to"
            ),
        ] = None,
        offset: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="offset for deployments pagination"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="limit for deployments pagination"),
        ] = None,
        sorts: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="sorting criteria for deployments, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'"
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """List memory usages metrics for deployments  # noqa: E501

        List memory usages metrics for deployments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_deployments_memory_usages_with_http_info(organization_id, range, step, deployment_ids, workspace_ids, offset, limit, sorts, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param range: range of the memory usages metrics in seconds (required)
        :type range: int
        :param step: step interval of the memory usages metrics in seconds (required)
        :type step: int
        :param deployment_ids: IDs that define the deployments
        :type deployment_ids: List[str]
        :param workspace_ids: IDs that define the workspaces where deployments belong to
        :type workspace_ids: List[str]
        :param offset: offset for deployments pagination
        :type offset: int
        :param limit: limit for deployments pagination
        :type limit: int
        :param sorts: sorting criteria for deployments, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RangeMetricsPaginated, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "organization_id",
            "range",
            "step",
            "deployment_ids",
            "workspace_ids",
            "offset",
            "limit",
            "sorts",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_deployments_memory_usages" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        # process the query parameters
        _query_params = []
        if _params.get("deployment_ids") is not None:  # noqa: E501
            _query_params.append(("deploymentIds", _params["deployment_ids"]))
            _collection_formats["deploymentIds"] = "multi"

        if _params.get("workspace_ids") is not None:  # noqa: E501
            _query_params.append(("workspaceIds", _params["workspace_ids"]))
            _collection_formats["workspaceIds"] = "multi"

        if _params.get("offset") is not None:  # noqa: E501
            _query_params.append(("offset", _params["offset"]))

        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("sorts") is not None:  # noqa: E501
            _query_params.append(("sorts", _params["sorts"]))
            _collection_formats["sorts"] = "multi"

        if _params.get("range") is not None:  # noqa: E501
            _query_params.append(("range", _params["range"]))

        if _params.get("step") is not None:  # noqa: E501
            _query_params.append(("step", _params["step"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "RangeMetricsPaginated",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "499": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/deployments/metrics/memory-usages",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def list_deployments_pod_count_per_status(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization FQN")
        ],
        deployment_id: Annotated[
            StrictStr,
            Field(..., description="deployment ID corresponding to the metrics"),
        ],
        **kwargs
    ) -> List[InstantMetricPerComponentStatus]:  # noqa: E501
        """Get pod count per status for a deployment  # noqa: E501

        Get pod count per status for a deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_deployments_pod_count_per_status(organization_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization FQN (required)
        :type organization_id: str
        :param deployment_id: deployment ID corresponding to the metrics (required)
        :type deployment_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[InstantMetricPerComponentStatus]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the list_deployments_pod_count_per_status_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.list_deployments_pod_count_per_status_with_http_info(
            organization_id, deployment_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def list_deployments_pod_count_per_status_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization FQN")
        ],
        deployment_id: Annotated[
            StrictStr,
            Field(..., description="deployment ID corresponding to the metrics"),
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get pod count per status for a deployment  # noqa: E501

        Get pod count per status for a deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_deployments_pod_count_per_status_with_http_info(organization_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization FQN (required)
        :type organization_id: str
        :param deployment_id: deployment ID corresponding to the metrics (required)
        :type deployment_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[InstantMetricPerComponentStatus], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["organization_id", "deployment_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_deployments_pod_count_per_status" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["deployment_id"]:
            _path_params["deploymentId"] = _params["deployment_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "List[InstantMetricPerComponentStatus]",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "499": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/deployments/{deploymentId}/metrics/pod-count-per-status",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def list_deployments_pool_count_per_status(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization FQN")
        ],
        deployment_id: Annotated[
            StrictStr,
            Field(..., description="deployment ID corresponding to the metrics"),
        ],
        **kwargs
    ) -> List[InstantMetricPerPoolStatus]:  # noqa: E501
        """Get pool count per status for a deployment  # noqa: E501

        Get pool count per status for a deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_deployments_pool_count_per_status(organization_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization FQN (required)
        :type organization_id: str
        :param deployment_id: deployment ID corresponding to the metrics (required)
        :type deployment_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[InstantMetricPerPoolStatus]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the list_deployments_pool_count_per_status_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.list_deployments_pool_count_per_status_with_http_info(
            organization_id, deployment_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def list_deployments_pool_count_per_status_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization FQN")
        ],
        deployment_id: Annotated[
            StrictStr,
            Field(..., description="deployment ID corresponding to the metrics"),
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get pool count per status for a deployment  # noqa: E501

        Get pool count per status for a deployment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_deployments_pool_count_per_status_with_http_info(organization_id, deployment_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization FQN (required)
        :type organization_id: str
        :param deployment_id: deployment ID corresponding to the metrics (required)
        :type deployment_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[InstantMetricPerPoolStatus], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["organization_id", "deployment_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_deployments_pool_count_per_status" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["deployment_id"]:
            _path_params["deploymentId"] = _params["deployment_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "List[InstantMetricPerPoolStatus]",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "499": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/deployments/{deploymentId}/metrics/pool-count-per-status",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def list_deployments_task_runs(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(..., description="range of the task runs metric in seconds"),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(..., description="step interval of task runs metric in seconds"),
        ],
        deployment_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(description="IDs that define the deployments"),
        ] = None,
        workspace_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="IDs that define the workspaces where deployments belong to"
            ),
        ] = None,
        offset: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="offset for deployments pagination"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="limit for deployments pagination"),
        ] = None,
        sorts: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="sorting criteria for deployments, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'"
            ),
        ] = None,
        status: Annotated[
            Optional[StrictStr], Field(description="status of task runs")
        ] = None,
        include_deleted_deployments: Annotated[
            Optional[StrictBool],
            Field(
                description="results should include data from soft deleted deployments"
            ),
        ] = None,
        **kwargs
    ) -> RangeMetricsPerStatusPaginated:  # noqa: E501
        """List task runs metrics for deployments  # noqa: E501

        List task runs metrics for deployments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_deployments_task_runs(organization_id, range, step, deployment_ids, workspace_ids, offset, limit, sorts, status, include_deleted_deployments, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param range: range of the task runs metric in seconds (required)
        :type range: int
        :param step: step interval of task runs metric in seconds (required)
        :type step: int
        :param deployment_ids: IDs that define the deployments
        :type deployment_ids: List[str]
        :param workspace_ids: IDs that define the workspaces where deployments belong to
        :type workspace_ids: List[str]
        :param offset: offset for deployments pagination
        :type offset: int
        :param limit: limit for deployments pagination
        :type limit: int
        :param sorts: sorting criteria for deployments, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param status: status of task runs
        :type status: str
        :param include_deleted_deployments: results should include data from soft deleted deployments
        :type include_deleted_deployments: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RangeMetricsPerStatusPaginated
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the list_deployments_task_runs_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.list_deployments_task_runs_with_http_info(
            organization_id,
            range,
            step,
            deployment_ids,
            workspace_ids,
            offset,
            limit,
            sorts,
            status,
            include_deleted_deployments,
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def list_deployments_task_runs_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(..., description="range of the task runs metric in seconds"),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(..., description="step interval of task runs metric in seconds"),
        ],
        deployment_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(description="IDs that define the deployments"),
        ] = None,
        workspace_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="IDs that define the workspaces where deployments belong to"
            ),
        ] = None,
        offset: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="offset for deployments pagination"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="limit for deployments pagination"),
        ] = None,
        sorts: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="sorting criteria for deployments, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'"
            ),
        ] = None,
        status: Annotated[
            Optional[StrictStr], Field(description="status of task runs")
        ] = None,
        include_deleted_deployments: Annotated[
            Optional[StrictBool],
            Field(
                description="results should include data from soft deleted deployments"
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """List task runs metrics for deployments  # noqa: E501

        List task runs metrics for deployments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_deployments_task_runs_with_http_info(organization_id, range, step, deployment_ids, workspace_ids, offset, limit, sorts, status, include_deleted_deployments, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param range: range of the task runs metric in seconds (required)
        :type range: int
        :param step: step interval of task runs metric in seconds (required)
        :type step: int
        :param deployment_ids: IDs that define the deployments
        :type deployment_ids: List[str]
        :param workspace_ids: IDs that define the workspaces where deployments belong to
        :type workspace_ids: List[str]
        :param offset: offset for deployments pagination
        :type offset: int
        :param limit: limit for deployments pagination
        :type limit: int
        :param sorts: sorting criteria for deployments, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param status: status of task runs
        :type status: str
        :param include_deleted_deployments: results should include data from soft deleted deployments
        :type include_deleted_deployments: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RangeMetricsPerStatusPaginated, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "organization_id",
            "range",
            "step",
            "deployment_ids",
            "workspace_ids",
            "offset",
            "limit",
            "sorts",
            "status",
            "include_deleted_deployments",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_deployments_task_runs" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        # process the query parameters
        _query_params = []
        if _params.get("deployment_ids") is not None:  # noqa: E501
            _query_params.append(("deploymentIds", _params["deployment_ids"]))
            _collection_formats["deploymentIds"] = "multi"

        if _params.get("workspace_ids") is not None:  # noqa: E501
            _query_params.append(("workspaceIds", _params["workspace_ids"]))
            _collection_formats["workspaceIds"] = "multi"

        if _params.get("offset") is not None:  # noqa: E501
            _query_params.append(("offset", _params["offset"]))

        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("sorts") is not None:  # noqa: E501
            _query_params.append(("sorts", _params["sorts"]))
            _collection_formats["sorts"] = "multi"

        if _params.get("range") is not None:  # noqa: E501
            _query_params.append(("range", _params["range"]))

        if _params.get("step") is not None:  # noqa: E501
            _query_params.append(("step", _params["step"]))

        if _params.get("status") is not None:  # noqa: E501
            _query_params.append(("status", _params["status"]))

        if _params.get("include_deleted_deployments") is not None:  # noqa: E501
            _query_params.append(
                ("includeDeletedDeployments", _params["include_deleted_deployments"])
            )

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "RangeMetricsPerStatusPaginated",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/deployments/metrics/task-runs-per-status",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
