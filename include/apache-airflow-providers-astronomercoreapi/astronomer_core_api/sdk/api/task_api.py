# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import datetime

from pydantic import (
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    conint,
    conlist,
    validator,
)

from typing import Optional, Union

from astronomer_core_api.sdk.models.clear_task_instances_request import (
    ClearTaskInstancesRequest,
)
from astronomer_core_api.sdk.models.task_instance import TaskInstance
from astronomer_core_api.sdk.models.task_instance_reference import TaskInstanceReference
from astronomer_core_api.sdk.models.task_instance_references import (
    TaskInstanceReferences,
)
from astronomer_core_api.sdk.models.task_instances_paginated import (
    TaskInstancesPaginated,
)
from astronomer_core_api.sdk.models.update_task_instance_request import (
    UpdateTaskInstanceRequest,
)
from astronomer_core_api.sdk.models.update_task_instances_state_request import (
    UpdateTaskInstancesStateRequest,
)

from astronomer_core_api.sdk.api_client import ApiClient
from astronomer_core_api.sdk.api_response import ApiResponse
from astronomer_core_api.sdk.exceptions import ApiTypeError, ApiValueError  # noqa: F401


class TaskApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def clear_task_instances(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        runtime_id: Annotated[StrictStr, Field(..., description="ID of the runtime")],
        dag_id: Annotated[StrictStr, Field(..., description="dag ID")],
        data: Annotated[
            ClearTaskInstancesRequest,
            Field(..., description="request body for clearing a dag run tasks"),
        ],
        **kwargs
    ) -> TaskInstanceReferences:  # noqa: E501
        """Clear task instances for a dag  # noqa: E501

        Clear task instances for a dag  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.clear_task_instances(organization_id, workspace_id, runtime_id, dag_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param runtime_id: ID of the runtime (required)
        :type runtime_id: str
        :param dag_id: dag ID (required)
        :type dag_id: str
        :param data: request body for clearing a dag run tasks (required)
        :type data: ClearTaskInstancesRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TaskInstanceReferences
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the clear_task_instances_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.clear_task_instances_with_http_info(
            organization_id, workspace_id, runtime_id, dag_id, data, **kwargs
        )  # noqa: E501

    @validate_arguments
    def clear_task_instances_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        runtime_id: Annotated[StrictStr, Field(..., description="ID of the runtime")],
        dag_id: Annotated[StrictStr, Field(..., description="dag ID")],
        data: Annotated[
            ClearTaskInstancesRequest,
            Field(..., description="request body for clearing a dag run tasks"),
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Clear task instances for a dag  # noqa: E501

        Clear task instances for a dag  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.clear_task_instances_with_http_info(organization_id, workspace_id, runtime_id, dag_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param runtime_id: ID of the runtime (required)
        :type runtime_id: str
        :param dag_id: dag ID (required)
        :type dag_id: str
        :param data: request body for clearing a dag run tasks (required)
        :type data: ClearTaskInstancesRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TaskInstanceReferences, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "organization_id",
            "workspace_id",
            "runtime_id",
            "dag_id",
            "data",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clear_task_instances" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["workspace_id"]:
            _path_params["workspaceId"] = _params["workspace_id"]

        if _params["runtime_id"]:
            _path_params["runtimeId"] = _params["runtime_id"]

        if _params["dag_id"]:
            _path_params["dagId"] = _params["dag_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["data"] is not None:
            _body_params = _params["data"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "TaskInstanceReferences",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "404": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces/{workspaceId}/runtimes/{runtimeId}/dags/{dagId}/clear-task-instances",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_mapped_task_instance(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        runtime_id: Annotated[StrictStr, Field(..., description="ID of the runtime")],
        dag_id: Annotated[StrictStr, Field(..., description="dag ID")],
        dag_run_id: Annotated[StrictStr, Field(..., description="dag run ID")],
        task_id: Annotated[StrictStr, Field(..., description="task ID")],
        map_index: Annotated[StrictStr, Field(..., description="task map index")],
        **kwargs
    ) -> TaskInstance:  # noqa: E501
        """Get details of a mapped task instance  # noqa: E501

        Get details of a mapped task instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_mapped_task_instance(organization_id, workspace_id, runtime_id, dag_id, dag_run_id, task_id, map_index, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param runtime_id: ID of the runtime (required)
        :type runtime_id: str
        :param dag_id: dag ID (required)
        :type dag_id: str
        :param dag_run_id: dag run ID (required)
        :type dag_run_id: str
        :param task_id: task ID (required)
        :type task_id: str
        :param map_index: task map index (required)
        :type map_index: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TaskInstance
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_mapped_task_instance_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_mapped_task_instance_with_http_info(
            organization_id,
            workspace_id,
            runtime_id,
            dag_id,
            dag_run_id,
            task_id,
            map_index,
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_mapped_task_instance_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        runtime_id: Annotated[StrictStr, Field(..., description="ID of the runtime")],
        dag_id: Annotated[StrictStr, Field(..., description="dag ID")],
        dag_run_id: Annotated[StrictStr, Field(..., description="dag run ID")],
        task_id: Annotated[StrictStr, Field(..., description="task ID")],
        map_index: Annotated[StrictStr, Field(..., description="task map index")],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get details of a mapped task instance  # noqa: E501

        Get details of a mapped task instance  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_mapped_task_instance_with_http_info(organization_id, workspace_id, runtime_id, dag_id, dag_run_id, task_id, map_index, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param runtime_id: ID of the runtime (required)
        :type runtime_id: str
        :param dag_id: dag ID (required)
        :type dag_id: str
        :param dag_run_id: dag run ID (required)
        :type dag_run_id: str
        :param task_id: task ID (required)
        :type task_id: str
        :param map_index: task map index (required)
        :type map_index: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TaskInstance, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "organization_id",
            "workspace_id",
            "runtime_id",
            "dag_id",
            "dag_run_id",
            "task_id",
            "map_index",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mapped_task_instance" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["workspace_id"]:
            _path_params["workspaceId"] = _params["workspace_id"]

        if _params["runtime_id"]:
            _path_params["runtimeId"] = _params["runtime_id"]

        if _params["dag_id"]:
            _path_params["dagId"] = _params["dag_id"]

        if _params["dag_run_id"]:
            _path_params["dagRunId"] = _params["dag_run_id"]

        if _params["task_id"]:
            _path_params["taskId"] = _params["task_id"]

        if _params["map_index"]:
            _path_params["mapIndex"] = _params["map_index"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "TaskInstance",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "404": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces/{workspaceId}/runtimes/{runtimeId}/dags/{dagId}/runs/{dagRunId}/tasks/{taskId}/mapped-tasks/{mapIndex}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def list_mapped_task_instances(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        task_id: Annotated[StrictStr, Field(..., description="ID of the task")],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        runtime_id: Annotated[StrictStr, Field(..., description="ID of the runtime")],
        dag_id: Annotated[StrictStr, Field(..., description="ID of the dag")],
        dag_run_id: Annotated[StrictStr, Field(..., description="ID of the dag run")],
        offset: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="offset for pagination"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, le=100, ge=0)],
            Field(description="limit for pagination"),
        ] = None,
        execution_date_gte: Annotated[
            Optional[datetime],
            Field(
                description="execution date is greater or equal to the specified date"
            ),
        ] = None,
        execution_date_lte: Annotated[
            Optional[datetime],
            Field(
                description="execution date is less than or equal to the specified date"
            ),
        ] = None,
        start_date_gte: Annotated[
            Optional[datetime],
            Field(
                description="start date is greater than or equal to the specified date"
            ),
        ] = None,
        start_date_lte: Annotated[
            Optional[datetime],
            Field(description="start date is less than or equal to the specified date"),
        ] = None,
        end_date_gte: Annotated[
            Optional[datetime],
            Field(
                description="end date is greater than or equal to the specified date"
            ),
        ] = None,
        end_date_lte: Annotated[
            Optional[datetime],
            Field(description="end date is less than or equal to the specified date"),
        ] = None,
        duration_gte: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="duration is greater than or equal to the specified in seconds"
            ),
        ] = None,
        duration_lte: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="duration is less than or equal to the specified in seconds"
            ),
        ] = None,
        states: Annotated[
            Optional[conlist(StrictStr)], Field(description="task states")
        ] = None,
        pools: Annotated[
            Optional[conlist(StrictStr)], Field(description="task pools")
        ] = None,
        queues: Annotated[
            Optional[conlist(StrictStr)], Field(description="task queues")
        ] = None,
        order_by: Annotated[
            Optional[StrictStr],
            Field(
                description="The name of the field to order the results by. Prefix a field name with - to reverse the sort order."
            ),
        ] = None,
        **kwargs
    ) -> TaskInstancesPaginated:  # noqa: E501
        """List mapped task instances  # noqa: E501

        List mapped task instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_mapped_task_instances(organization_id, task_id, workspace_id, runtime_id, dag_id, dag_run_id, offset, limit, execution_date_gte, execution_date_lte, start_date_gte, start_date_lte, end_date_gte, end_date_lte, duration_gte, duration_lte, states, pools, queues, order_by, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param task_id: ID of the task (required)
        :type task_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param runtime_id: ID of the runtime (required)
        :type runtime_id: str
        :param dag_id: ID of the dag (required)
        :type dag_id: str
        :param dag_run_id: ID of the dag run (required)
        :type dag_run_id: str
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param execution_date_gte: execution date is greater or equal to the specified date
        :type execution_date_gte: datetime
        :param execution_date_lte: execution date is less than or equal to the specified date
        :type execution_date_lte: datetime
        :param start_date_gte: start date is greater than or equal to the specified date
        :type start_date_gte: datetime
        :param start_date_lte: start date is less than or equal to the specified date
        :type start_date_lte: datetime
        :param end_date_gte: end date is greater than or equal to the specified date
        :type end_date_gte: datetime
        :param end_date_lte: end date is less than or equal to the specified date
        :type end_date_lte: datetime
        :param duration_gte: duration is greater than or equal to the specified in seconds
        :type duration_gte: float
        :param duration_lte: duration is less than or equal to the specified in seconds
        :type duration_lte: float
        :param states: task states
        :type states: List[str]
        :param pools: task pools
        :type pools: List[str]
        :param queues: task queues
        :type queues: List[str]
        :param order_by: The name of the field to order the results by. Prefix a field name with - to reverse the sort order.
        :type order_by: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TaskInstancesPaginated
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the list_mapped_task_instances_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.list_mapped_task_instances_with_http_info(
            organization_id,
            task_id,
            workspace_id,
            runtime_id,
            dag_id,
            dag_run_id,
            offset,
            limit,
            execution_date_gte,
            execution_date_lte,
            start_date_gte,
            start_date_lte,
            end_date_gte,
            end_date_lte,
            duration_gte,
            duration_lte,
            states,
            pools,
            queues,
            order_by,
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def list_mapped_task_instances_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        task_id: Annotated[StrictStr, Field(..., description="ID of the task")],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        runtime_id: Annotated[StrictStr, Field(..., description="ID of the runtime")],
        dag_id: Annotated[StrictStr, Field(..., description="ID of the dag")],
        dag_run_id: Annotated[StrictStr, Field(..., description="ID of the dag run")],
        offset: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="offset for pagination"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, le=100, ge=0)],
            Field(description="limit for pagination"),
        ] = None,
        execution_date_gte: Annotated[
            Optional[datetime],
            Field(
                description="execution date is greater or equal to the specified date"
            ),
        ] = None,
        execution_date_lte: Annotated[
            Optional[datetime],
            Field(
                description="execution date is less than or equal to the specified date"
            ),
        ] = None,
        start_date_gte: Annotated[
            Optional[datetime],
            Field(
                description="start date is greater than or equal to the specified date"
            ),
        ] = None,
        start_date_lte: Annotated[
            Optional[datetime],
            Field(description="start date is less than or equal to the specified date"),
        ] = None,
        end_date_gte: Annotated[
            Optional[datetime],
            Field(
                description="end date is greater than or equal to the specified date"
            ),
        ] = None,
        end_date_lte: Annotated[
            Optional[datetime],
            Field(description="end date is less than or equal to the specified date"),
        ] = None,
        duration_gte: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="duration is greater than or equal to the specified in seconds"
            ),
        ] = None,
        duration_lte: Annotated[
            Optional[Union[StrictFloat, StrictInt]],
            Field(
                description="duration is less than or equal to the specified in seconds"
            ),
        ] = None,
        states: Annotated[
            Optional[conlist(StrictStr)], Field(description="task states")
        ] = None,
        pools: Annotated[
            Optional[conlist(StrictStr)], Field(description="task pools")
        ] = None,
        queues: Annotated[
            Optional[conlist(StrictStr)], Field(description="task queues")
        ] = None,
        order_by: Annotated[
            Optional[StrictStr],
            Field(
                description="The name of the field to order the results by. Prefix a field name with - to reverse the sort order."
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """List mapped task instances  # noqa: E501

        List mapped task instances  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_mapped_task_instances_with_http_info(organization_id, task_id, workspace_id, runtime_id, dag_id, dag_run_id, offset, limit, execution_date_gte, execution_date_lte, start_date_gte, start_date_lte, end_date_gte, end_date_lte, duration_gte, duration_lte, states, pools, queues, order_by, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param task_id: ID of the task (required)
        :type task_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param runtime_id: ID of the runtime (required)
        :type runtime_id: str
        :param dag_id: ID of the dag (required)
        :type dag_id: str
        :param dag_run_id: ID of the dag run (required)
        :type dag_run_id: str
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param execution_date_gte: execution date is greater or equal to the specified date
        :type execution_date_gte: datetime
        :param execution_date_lte: execution date is less than or equal to the specified date
        :type execution_date_lte: datetime
        :param start_date_gte: start date is greater than or equal to the specified date
        :type start_date_gte: datetime
        :param start_date_lte: start date is less than or equal to the specified date
        :type start_date_lte: datetime
        :param end_date_gte: end date is greater than or equal to the specified date
        :type end_date_gte: datetime
        :param end_date_lte: end date is less than or equal to the specified date
        :type end_date_lte: datetime
        :param duration_gte: duration is greater than or equal to the specified in seconds
        :type duration_gte: float
        :param duration_lte: duration is less than or equal to the specified in seconds
        :type duration_lte: float
        :param states: task states
        :type states: List[str]
        :param pools: task pools
        :type pools: List[str]
        :param queues: task queues
        :type queues: List[str]
        :param order_by: The name of the field to order the results by. Prefix a field name with - to reverse the sort order.
        :type order_by: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TaskInstancesPaginated, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "organization_id",
            "task_id",
            "workspace_id",
            "runtime_id",
            "dag_id",
            "dag_run_id",
            "offset",
            "limit",
            "execution_date_gte",
            "execution_date_lte",
            "start_date_gte",
            "start_date_lte",
            "end_date_gte",
            "end_date_lte",
            "duration_gte",
            "duration_lte",
            "states",
            "pools",
            "queues",
            "order_by",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_mapped_task_instances" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["task_id"]:
            _path_params["taskId"] = _params["task_id"]

        if _params["workspace_id"]:
            _path_params["workspaceId"] = _params["workspace_id"]

        if _params["runtime_id"]:
            _path_params["runtimeId"] = _params["runtime_id"]

        if _params["dag_id"]:
            _path_params["dagId"] = _params["dag_id"]

        if _params["dag_run_id"]:
            _path_params["dagRunId"] = _params["dag_run_id"]

        # process the query parameters
        _query_params = []
        if _params.get("offset") is not None:  # noqa: E501
            _query_params.append(("offset", _params["offset"]))

        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("execution_date_gte") is not None:  # noqa: E501
            if isinstance(_params["execution_date_gte"], datetime):
                _query_params.append(
                    (
                        "executionDateGte",
                        _params["execution_date_gte"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(
                    ("executionDateGte", _params["execution_date_gte"])
                )

        if _params.get("execution_date_lte") is not None:  # noqa: E501
            if isinstance(_params["execution_date_lte"], datetime):
                _query_params.append(
                    (
                        "executionDateLte",
                        _params["execution_date_lte"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(
                    ("executionDateLte", _params["execution_date_lte"])
                )

        if _params.get("start_date_gte") is not None:  # noqa: E501
            if isinstance(_params["start_date_gte"], datetime):
                _query_params.append(
                    (
                        "startDateGte",
                        _params["start_date_gte"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("startDateGte", _params["start_date_gte"]))

        if _params.get("start_date_lte") is not None:  # noqa: E501
            if isinstance(_params["start_date_lte"], datetime):
                _query_params.append(
                    (
                        "startDateLte",
                        _params["start_date_lte"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("startDateLte", _params["start_date_lte"]))

        if _params.get("end_date_gte") is not None:  # noqa: E501
            if isinstance(_params["end_date_gte"], datetime):
                _query_params.append(
                    (
                        "endDateGte",
                        _params["end_date_gte"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("endDateGte", _params["end_date_gte"]))

        if _params.get("end_date_lte") is not None:  # noqa: E501
            if isinstance(_params["end_date_lte"], datetime):
                _query_params.append(
                    (
                        "endDateLte",
                        _params["end_date_lte"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("endDateLte", _params["end_date_lte"]))

        if _params.get("duration_gte") is not None:  # noqa: E501
            _query_params.append(("durationGte", _params["duration_gte"]))

        if _params.get("duration_lte") is not None:  # noqa: E501
            _query_params.append(("durationLte", _params["duration_lte"]))

        if _params.get("states") is not None:  # noqa: E501
            _query_params.append(("states", _params["states"]))
            _collection_formats["states"] = "multi"

        if _params.get("pools") is not None:  # noqa: E501
            _query_params.append(("pools", _params["pools"]))
            _collection_formats["pools"] = "multi"

        if _params.get("queues") is not None:  # noqa: E501
            _query_params.append(("queues", _params["queues"]))
            _collection_formats["queues"] = "multi"

        if _params.get("order_by") is not None:  # noqa: E501
            _query_params.append(("orderBy", _params["order_by"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "TaskInstancesPaginated",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "404": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces/{workspaceId}/runtimes/{runtimeId}/dags/{dagId}/runs/{dagRunId}/tasks/{taskId}/mapped-tasks",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def update_task_instance(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        runtime_id: Annotated[StrictStr, Field(..., description="ID of the runtime")],
        dag_id: Annotated[StrictStr, Field(..., description="dag ID")],
        dag_run_id: Annotated[StrictStr, Field(..., description="dag run ID")],
        task_id: Annotated[StrictStr, Field(..., description="task ID")],
        data: Annotated[
            UpdateTaskInstanceRequest,
            Field(..., description="request body for updating a task"),
        ],
        **kwargs
    ) -> TaskInstanceReference:  # noqa: E501
        """Set the state of a task  # noqa: E501

        Set the state of a task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_task_instance(organization_id, workspace_id, runtime_id, dag_id, dag_run_id, task_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param runtime_id: ID of the runtime (required)
        :type runtime_id: str
        :param dag_id: dag ID (required)
        :type dag_id: str
        :param dag_run_id: dag run ID (required)
        :type dag_run_id: str
        :param task_id: task ID (required)
        :type task_id: str
        :param data: request body for updating a task (required)
        :type data: UpdateTaskInstanceRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TaskInstanceReference
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the update_task_instance_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.update_task_instance_with_http_info(
            organization_id,
            workspace_id,
            runtime_id,
            dag_id,
            dag_run_id,
            task_id,
            data,
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def update_task_instance_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        runtime_id: Annotated[StrictStr, Field(..., description="ID of the runtime")],
        dag_id: Annotated[StrictStr, Field(..., description="dag ID")],
        dag_run_id: Annotated[StrictStr, Field(..., description="dag run ID")],
        task_id: Annotated[StrictStr, Field(..., description="task ID")],
        data: Annotated[
            UpdateTaskInstanceRequest,
            Field(..., description="request body for updating a task"),
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Set the state of a task  # noqa: E501

        Set the state of a task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_task_instance_with_http_info(organization_id, workspace_id, runtime_id, dag_id, dag_run_id, task_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param runtime_id: ID of the runtime (required)
        :type runtime_id: str
        :param dag_id: dag ID (required)
        :type dag_id: str
        :param dag_run_id: dag run ID (required)
        :type dag_run_id: str
        :param task_id: task ID (required)
        :type task_id: str
        :param data: request body for updating a task (required)
        :type data: UpdateTaskInstanceRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TaskInstanceReference, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "organization_id",
            "workspace_id",
            "runtime_id",
            "dag_id",
            "dag_run_id",
            "task_id",
            "data",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_task_instance" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["workspace_id"]:
            _path_params["workspaceId"] = _params["workspace_id"]

        if _params["runtime_id"]:
            _path_params["runtimeId"] = _params["runtime_id"]

        if _params["dag_id"]:
            _path_params["dagId"] = _params["dag_id"]

        if _params["dag_run_id"]:
            _path_params["dagRunId"] = _params["dag_run_id"]

        if _params["task_id"]:
            _path_params["taskId"] = _params["task_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["data"] is not None:
            _body_params = _params["data"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "TaskInstanceReference",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "404": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces/{workspaceId}/runtimes/{runtimeId}/dags/{dagId}/runs/{dagRunId}/tasks/{taskId}",
            "PATCH",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def update_task_instances_state(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        runtime_id: Annotated[StrictStr, Field(..., description="ID of the runtime")],
        dag_id: Annotated[StrictStr, Field(..., description="dag ID")],
        data: Annotated[
            UpdateTaskInstancesStateRequest,
            Field(..., description="request body for clearing a dag run tasks"),
        ],
        **kwargs
    ) -> TaskInstanceReferences:  # noqa: E501
        """Update task instances state  # noqa: E501

        Update task instances state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_task_instances_state(organization_id, workspace_id, runtime_id, dag_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param runtime_id: ID of the runtime (required)
        :type runtime_id: str
        :param dag_id: dag ID (required)
        :type dag_id: str
        :param data: request body for clearing a dag run tasks (required)
        :type data: UpdateTaskInstancesStateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TaskInstanceReferences
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the update_task_instances_state_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.update_task_instances_state_with_http_info(
            organization_id, workspace_id, runtime_id, dag_id, data, **kwargs
        )  # noqa: E501

    @validate_arguments
    def update_task_instances_state_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        runtime_id: Annotated[StrictStr, Field(..., description="ID of the runtime")],
        dag_id: Annotated[StrictStr, Field(..., description="dag ID")],
        data: Annotated[
            UpdateTaskInstancesStateRequest,
            Field(..., description="request body for clearing a dag run tasks"),
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Update task instances state  # noqa: E501

        Update task instances state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_task_instances_state_with_http_info(organization_id, workspace_id, runtime_id, dag_id, data, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param runtime_id: ID of the runtime (required)
        :type runtime_id: str
        :param dag_id: dag ID (required)
        :type dag_id: str
        :param data: request body for clearing a dag run tasks (required)
        :type data: UpdateTaskInstancesStateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TaskInstanceReferences, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "organization_id",
            "workspace_id",
            "runtime_id",
            "dag_id",
            "data",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_task_instances_state" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["workspace_id"]:
            _path_params["workspaceId"] = _params["workspace_id"]

        if _params["runtime_id"]:
            _path_params["runtimeId"] = _params["runtime_id"]

        if _params["dag_id"]:
            _path_params["dagId"] = _params["dag_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["data"] is not None:
            _body_params = _params["data"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "TaskInstanceReferences",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "404": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces/{workspaceId}/runtimes/{runtimeId}/dags/{dagId}/update-task-instances-state",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
