# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from datetime import datetime

from pydantic import Field, StrictBool, StrictStr, conint, conlist, validator

from typing import Optional

from astronomer_core_api.sdk.models.create_workspace_request import (
    CreateWorkspaceRequest,
)
from astronomer_core_api.sdk.models.dag_filters import DagFilters
from astronomer_core_api.sdk.models.list_workspace_dags import ListWorkspaceDags
from astronomer_core_api.sdk.models.update_workspace_request import (
    UpdateWorkspaceRequest,
)
from astronomer_core_api.sdk.models.workspace import Workspace
from astronomer_core_api.sdk.models.workspaces_paginated import WorkspacesPaginated

from astronomer_core_api.sdk.api_client import ApiClient
from astronomer_core_api.sdk.api_response import ApiResponse
from astronomer_core_api.sdk.exceptions import ApiTypeError, ApiValueError  # noqa: F401


class WorkspaceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_workspace(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        body: Annotated[
            CreateWorkspaceRequest,
            Field(..., description="request body for creating a new workspace"),
        ],
        **kwargs
    ) -> Workspace:  # noqa: E501
        """Create workspace  # noqa: E501

        Create workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_workspace(organization_id, body, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param body: request body for creating a new workspace (required)
        :type body: CreateWorkspaceRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Workspace
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the create_workspace_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.create_workspace_with_http_info(
            organization_id, body, **kwargs
        )  # noqa: E501

    @validate_arguments
    def create_workspace_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        body: Annotated[
            CreateWorkspaceRequest,
            Field(..., description="request body for creating a new workspace"),
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Create workspace  # noqa: E501

        Create workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_workspace_with_http_info(organization_id, body, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param body: request body for creating a new workspace (required)
        :type body: CreateWorkspaceRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Workspace, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["organization_id", "body"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_workspace" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["body"] is not None:
            _body_params = _params["body"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "Workspace",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "404": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def delete_workspace(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        **kwargs
    ) -> None:  # noqa: E501
        """Delete workspace  # noqa: E501

        Delete workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workspace(organization_id, workspace_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the delete_workspace_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.delete_workspace_with_http_info(
            organization_id, workspace_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def delete_workspace_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Delete workspace  # noqa: E501

        Delete workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_workspace_with_http_info(organization_id, workspace_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["organization_id", "workspace_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_workspace" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["workspace_id"]:
            _path_params["workspaceId"] = _params["workspace_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces/{workspaceId}",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_workspace(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        **kwargs
    ) -> Workspace:  # noqa: E501
        """Get workspace with id  # noqa: E501

        Get workspace with id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workspace(organization_id, workspace_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Workspace
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_workspace_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_workspace_with_http_info(
            organization_id, workspace_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_workspace_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID of the workspace")
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get workspace with id  # noqa: E501

        Get workspace with id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workspace_with_http_info(organization_id, workspace_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID of the workspace (required)
        :type workspace_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Workspace, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["organization_id", "workspace_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workspace" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["workspace_id"]:
            _path_params["workspaceId"] = _params["workspace_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "Workspace",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "404": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces/{workspaceId}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def list_workspace_dag_filters(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[StrictStr, Field(..., description="workspace ID")],
        **kwargs
    ) -> DagFilters:  # noqa: E501
        """List all tag, owner and deployment names/IDs  # noqa: E501

        List all tag, owner and deployment names/IDs by which DAGs can be filtered  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_workspace_dag_filters(organization_id, workspace_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DagFilters
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the list_workspace_dag_filters_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.list_workspace_dag_filters_with_http_info(
            organization_id, workspace_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def list_workspace_dag_filters_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[StrictStr, Field(..., description="workspace ID")],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """List all tag, owner and deployment names/IDs  # noqa: E501

        List all tag, owner and deployment names/IDs by which DAGs can be filtered  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_workspace_dag_filters_with_http_info(organization_id, workspace_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DagFilters, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["organization_id", "workspace_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_workspace_dag_filters" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["workspace_id"]:
            _path_params["workspaceId"] = _params["workspace_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "DagFilters",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "404": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces/{workspaceId}/dag-filters",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def list_workspace_dags(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[StrictStr, Field(..., description="workspace ID")],
        page_size: Annotated[
            Optional[conint(strict=True, le=100, ge=1)],
            Field(description="page size, default of 20"),
        ] = None,
        order_by: Annotated[
            Optional[conlist(StrictStr)],
            Field(description="order-by fields, comma separated"),
        ] = None,
        cursor: Annotated[
            Optional[StrictStr], Field(description="pagination cursor")
        ] = None,
        num_runs: Annotated[
            Optional[conint(strict=True, le=50, ge=0)],
            Field(description="number of runs to include per dag, default of 0"),
        ] = None,
        name: Annotated[
            Optional[StrictStr], Field(description="filter by name of DAG (dagId)")
        ] = None,
        name__like: Annotated[
            Optional[StrictStr],
            Field(
                description="filter by pattern for name of DAG (dagId),  SQL  syntax"
            ),
        ] = None,
        owner: Annotated[
            Optional[StrictStr], Field(description="filter by an owner of the dag")
        ] = None,
        is_paused: Annotated[
            Optional[StrictBool], Field(description="filter by paused dags")
        ] = None,
        is_active: Annotated[
            Optional[StrictBool], Field(description="filter by active dags")
        ] = None,
        last_run_state__in: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="filter by dag runs with any of these run states for its last run"
            ),
        ] = None,
        run_state__in: Annotated[
            Optional[conlist(StrictStr)],
            Field(description="filter by dag runs with any of these run states"),
        ] = None,
        run_after: Annotated[
            Optional[datetime],
            Field(
                description="filter by dag run after specified datetime (RFC3339 format)"
            ),
        ] = None,
        tag__in: Annotated[
            Optional[conlist(StrictStr)],
            Field(description="filter by any of these tags"),
        ] = None,
        deployment_id__in: Annotated[
            Optional[conlist(StrictStr)],
            Field(description="filter by any of these deployment IDs"),
        ] = None,
        **kwargs
    ) -> ListWorkspaceDags:  # noqa: E501
        """List all dags in a workspace  # noqa: E501

        List all dags in a workspace for all deployments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_workspace_dags(organization_id, workspace_id, page_size, order_by, cursor, num_runs, name, name__like, owner, is_paused, is_active, last_run_state__in, run_state__in, run_after, tag__in, deployment_id__in, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param page_size: page size, default of 20
        :type page_size: int
        :param order_by: order-by fields, comma separated
        :type order_by: List[str]
        :param cursor: pagination cursor
        :type cursor: str
        :param num_runs: number of runs to include per dag, default of 0
        :type num_runs: int
        :param name: filter by name of DAG (dagId)
        :type name: str
        :param name__like: filter by pattern for name of DAG (dagId),  SQL  syntax
        :type name__like: str
        :param owner: filter by an owner of the dag
        :type owner: str
        :param is_paused: filter by paused dags
        :type is_paused: bool
        :param is_active: filter by active dags
        :type is_active: bool
        :param last_run_state__in: filter by dag runs with any of these run states for its last run
        :type last_run_state__in: List[str]
        :param run_state__in: filter by dag runs with any of these run states
        :type run_state__in: List[str]
        :param run_after: filter by dag run after specified datetime (RFC3339 format)
        :type run_after: datetime
        :param tag__in: filter by any of these tags
        :type tag__in: List[str]
        :param deployment_id__in: filter by any of these deployment IDs
        :type deployment_id__in: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListWorkspaceDags
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the list_workspace_dags_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.list_workspace_dags_with_http_info(
            organization_id,
            workspace_id,
            page_size,
            order_by,
            cursor,
            num_runs,
            name,
            name__like,
            owner,
            is_paused,
            is_active,
            last_run_state__in,
            run_state__in,
            run_after,
            tag__in,
            deployment_id__in,
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def list_workspace_dags_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[StrictStr, Field(..., description="workspace ID")],
        page_size: Annotated[
            Optional[conint(strict=True, le=100, ge=1)],
            Field(description="page size, default of 20"),
        ] = None,
        order_by: Annotated[
            Optional[conlist(StrictStr)],
            Field(description="order-by fields, comma separated"),
        ] = None,
        cursor: Annotated[
            Optional[StrictStr], Field(description="pagination cursor")
        ] = None,
        num_runs: Annotated[
            Optional[conint(strict=True, le=50, ge=0)],
            Field(description="number of runs to include per dag, default of 0"),
        ] = None,
        name: Annotated[
            Optional[StrictStr], Field(description="filter by name of DAG (dagId)")
        ] = None,
        name__like: Annotated[
            Optional[StrictStr],
            Field(
                description="filter by pattern for name of DAG (dagId),  SQL  syntax"
            ),
        ] = None,
        owner: Annotated[
            Optional[StrictStr], Field(description="filter by an owner of the dag")
        ] = None,
        is_paused: Annotated[
            Optional[StrictBool], Field(description="filter by paused dags")
        ] = None,
        is_active: Annotated[
            Optional[StrictBool], Field(description="filter by active dags")
        ] = None,
        last_run_state__in: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="filter by dag runs with any of these run states for its last run"
            ),
        ] = None,
        run_state__in: Annotated[
            Optional[conlist(StrictStr)],
            Field(description="filter by dag runs with any of these run states"),
        ] = None,
        run_after: Annotated[
            Optional[datetime],
            Field(
                description="filter by dag run after specified datetime (RFC3339 format)"
            ),
        ] = None,
        tag__in: Annotated[
            Optional[conlist(StrictStr)],
            Field(description="filter by any of these tags"),
        ] = None,
        deployment_id__in: Annotated[
            Optional[conlist(StrictStr)],
            Field(description="filter by any of these deployment IDs"),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """List all dags in a workspace  # noqa: E501

        List all dags in a workspace for all deployments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_workspace_dags_with_http_info(organization_id, workspace_id, page_size, order_by, cursor, num_runs, name, name__like, owner, is_paused, is_active, last_run_state__in, run_state__in, run_after, tag__in, deployment_id__in, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param page_size: page size, default of 20
        :type page_size: int
        :param order_by: order-by fields, comma separated
        :type order_by: List[str]
        :param cursor: pagination cursor
        :type cursor: str
        :param num_runs: number of runs to include per dag, default of 0
        :type num_runs: int
        :param name: filter by name of DAG (dagId)
        :type name: str
        :param name__like: filter by pattern for name of DAG (dagId),  SQL  syntax
        :type name__like: str
        :param owner: filter by an owner of the dag
        :type owner: str
        :param is_paused: filter by paused dags
        :type is_paused: bool
        :param is_active: filter by active dags
        :type is_active: bool
        :param last_run_state__in: filter by dag runs with any of these run states for its last run
        :type last_run_state__in: List[str]
        :param run_state__in: filter by dag runs with any of these run states
        :type run_state__in: List[str]
        :param run_after: filter by dag run after specified datetime (RFC3339 format)
        :type run_after: datetime
        :param tag__in: filter by any of these tags
        :type tag__in: List[str]
        :param deployment_id__in: filter by any of these deployment IDs
        :type deployment_id__in: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListWorkspaceDags, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "organization_id",
            "workspace_id",
            "page_size",
            "order_by",
            "cursor",
            "num_runs",
            "name",
            "name__like",
            "owner",
            "is_paused",
            "is_active",
            "last_run_state__in",
            "run_state__in",
            "run_after",
            "tag__in",
            "deployment_id__in",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_workspace_dags" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["workspace_id"]:
            _path_params["workspaceId"] = _params["workspace_id"]

        # process the query parameters
        _query_params = []
        if _params.get("page_size") is not None:  # noqa: E501
            _query_params.append(("pageSize", _params["page_size"]))

        if _params.get("order_by") is not None:  # noqa: E501
            _query_params.append(("orderBy", _params["order_by"]))
            _collection_formats["orderBy"] = "csv"

        if _params.get("cursor") is not None:  # noqa: E501
            _query_params.append(("cursor", _params["cursor"]))

        if _params.get("num_runs") is not None:  # noqa: E501
            _query_params.append(("numRuns", _params["num_runs"]))

        if _params.get("name") is not None:  # noqa: E501
            _query_params.append(("name", _params["name"]))

        if _params.get("name__like") is not None:  # noqa: E501
            _query_params.append(("name__like", _params["name__like"]))

        if _params.get("owner") is not None:  # noqa: E501
            _query_params.append(("owner", _params["owner"]))

        if _params.get("is_paused") is not None:  # noqa: E501
            _query_params.append(("isPaused", _params["is_paused"]))

        if _params.get("is_active") is not None:  # noqa: E501
            _query_params.append(("isActive", _params["is_active"]))

        if _params.get("last_run_state__in") is not None:  # noqa: E501
            _query_params.append(("lastRunState__in", _params["last_run_state__in"]))
            _collection_formats["lastRunState__in"] = "multi"

        if _params.get("run_state__in") is not None:  # noqa: E501
            _query_params.append(("runState__in", _params["run_state__in"]))
            _collection_formats["runState__in"] = "multi"

        if _params.get("run_after") is not None:  # noqa: E501
            if isinstance(_params["run_after"], datetime):
                _query_params.append(
                    (
                        "runAfter",
                        _params["run_after"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("runAfter", _params["run_after"]))

        if _params.get("tag__in") is not None:  # noqa: E501
            _query_params.append(("tag__in", _params["tag__in"]))
            _collection_formats["tag__in"] = "multi"

        if _params.get("deployment_id__in") is not None:  # noqa: E501
            _query_params.append(("deploymentId__in", _params["deployment_id__in"]))
            _collection_formats["deploymentId__in"] = "multi"

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "ListWorkspaceDags",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "404": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces/{workspaceId}/dags",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def list_workspaces(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(description="list of workspace ids to get detail of"),
        ] = None,
        offset: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="offset for pagination"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="limit for pagination"),
        ] = None,
        sorts: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'"
            ),
        ] = None,
        search: Annotated[
            Optional[StrictStr],
            Field(description="string to search for when listing workspaces"),
        ] = None,
        **kwargs
    ) -> WorkspacesPaginated:  # noqa: E501
        """List Workspaces  # noqa: E501

        List Workspaces  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_workspaces(organization_id, workspace_ids, offset, limit, sorts, search, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_ids: list of workspace ids to get detail of
        :type workspace_ids: List[str]
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param sorts: sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param search: string to search for when listing workspaces
        :type search: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WorkspacesPaginated
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the list_workspaces_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.list_workspaces_with_http_info(
            organization_id, workspace_ids, offset, limit, sorts, search, **kwargs
        )  # noqa: E501

    @validate_arguments
    def list_workspaces_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_ids: Annotated[
            Optional[conlist(StrictStr)],
            Field(description="list of workspace ids to get detail of"),
        ] = None,
        offset: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="offset for pagination"),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, ge=0)],
            Field(description="limit for pagination"),
        ] = None,
        sorts: Annotated[
            Optional[conlist(StrictStr)],
            Field(
                description="sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'"
            ),
        ] = None,
        search: Annotated[
            Optional[StrictStr],
            Field(description="string to search for when listing workspaces"),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """List Workspaces  # noqa: E501

        List Workspaces  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_workspaces_with_http_info(organization_id, workspace_ids, offset, limit, sorts, search, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_ids: list of workspace ids to get detail of
        :type workspace_ids: List[str]
        :param offset: offset for pagination
        :type offset: int
        :param limit: limit for pagination
        :type limit: int
        :param sorts: sorting criteria, each criterion should conform to format 'fieldName:asc' or 'fieldName:desc'
        :type sorts: List[str]
        :param search: string to search for when listing workspaces
        :type search: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WorkspacesPaginated, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "organization_id",
            "workspace_ids",
            "offset",
            "limit",
            "sorts",
            "search",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_workspaces" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        # process the query parameters
        _query_params = []
        if _params.get("workspace_ids") is not None:  # noqa: E501
            _query_params.append(("workspaceIds", _params["workspace_ids"]))
            _collection_formats["workspaceIds"] = "multi"

        if _params.get("offset") is not None:  # noqa: E501
            _query_params.append(("offset", _params["offset"]))

        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("sorts") is not None:  # noqa: E501
            _query_params.append(("sorts", _params["sorts"]))
            _collection_formats["sorts"] = "multi"

        if _params.get("search") is not None:  # noqa: E501
            _query_params.append(("search", _params["search"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "WorkspacesPaginated",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def update_workspace(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[StrictStr, Field(..., description="workspace ID")],
        body: Annotated[
            UpdateWorkspaceRequest,
            Field(..., description="request body for updating a workspace"),
        ],
        **kwargs
    ) -> Workspace:  # noqa: E501
        """Update workspace  # noqa: E501

        Update workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_workspace(organization_id, workspace_id, body, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param body: request body for updating a workspace (required)
        :type body: UpdateWorkspaceRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Workspace
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the update_workspace_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.update_workspace_with_http_info(
            organization_id, workspace_id, body, **kwargs
        )  # noqa: E501

    @validate_arguments
    def update_workspace_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[StrictStr, Field(..., description="workspace ID")],
        body: Annotated[
            UpdateWorkspaceRequest,
            Field(..., description="request body for updating a workspace"),
        ],
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Update workspace  # noqa: E501

        Update workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_workspace_with_http_info(organization_id, workspace_id, body, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: workspace ID (required)
        :type workspace_id: str
        :param body: request body for updating a workspace (required)
        :type body: UpdateWorkspaceRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Workspace, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["organization_id", "workspace_id", "body"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_workspace" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["workspace_id"]:
            _path_params["workspaceId"] = _params["workspace_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["body"] is not None:
            _body_params = _params["body"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "Workspace",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "404": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces/{workspaceId}",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
