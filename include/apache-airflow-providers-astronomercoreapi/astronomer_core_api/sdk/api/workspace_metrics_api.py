# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, conint

from typing import List, Optional

from astronomer_core_api.sdk.models.workspace_range_metric_per_status import (
    WorkspaceRangeMetricPerStatus,
)

from astronomer_core_api.sdk.api_client import ApiClient
from astronomer_core_api.sdk.api_response import ApiResponse
from astronomer_core_api.sdk.exceptions import ApiTypeError, ApiValueError  # noqa: F401


class WorkspaceMetricsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_workspace_dag_runs(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID that defines the workspace")
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(..., description="range of the DAG runs metrics in seconds"),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(..., description="step interval of the DAG runs metrics in seconds"),
        ],
        deployment_ids: Annotated[
            Optional[StrictStr],
            Field(description="IDs that define the deployments, separated by comma"),
        ] = None,
        virtual_runtime_ids: Annotated[
            Optional[StrictStr],
            Field(
                description="IDs that define the virtual runtimes, separated by comma"
            ),
        ] = None,
        runtime_type: Annotated[
            Optional[StrictStr], Field(description="type of runtime")
        ] = None,
        status: Annotated[
            Optional[StrictStr], Field(description="status of dag runs")
        ] = None,
        **kwargs
    ) -> List[WorkspaceRangeMetricPerStatus]:  # noqa: E501
        """Get DAG runs metrics for a workspace  # noqa: E501

        Get DAG runs metrics for a workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workspace_dag_runs(organization_id, workspace_id, range, step, deployment_ids, virtual_runtime_ids, runtime_type, status, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID that defines the workspace (required)
        :type workspace_id: str
        :param range: range of the DAG runs metrics in seconds (required)
        :type range: int
        :param step: step interval of the DAG runs metrics in seconds (required)
        :type step: int
        :param deployment_ids: IDs that define the deployments, separated by comma
        :type deployment_ids: str
        :param virtual_runtime_ids: IDs that define the virtual runtimes, separated by comma
        :type virtual_runtime_ids: str
        :param runtime_type: type of runtime
        :type runtime_type: str
        :param status: status of dag runs
        :type status: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[WorkspaceRangeMetricPerStatus]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_workspace_dag_runs_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_workspace_dag_runs_with_http_info(
            organization_id,
            workspace_id,
            range,
            step,
            deployment_ids,
            virtual_runtime_ids,
            runtime_type,
            status,
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_workspace_dag_runs_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID that defines the workspace")
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(..., description="range of the DAG runs metrics in seconds"),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(..., description="step interval of the DAG runs metrics in seconds"),
        ],
        deployment_ids: Annotated[
            Optional[StrictStr],
            Field(description="IDs that define the deployments, separated by comma"),
        ] = None,
        virtual_runtime_ids: Annotated[
            Optional[StrictStr],
            Field(
                description="IDs that define the virtual runtimes, separated by comma"
            ),
        ] = None,
        runtime_type: Annotated[
            Optional[StrictStr], Field(description="type of runtime")
        ] = None,
        status: Annotated[
            Optional[StrictStr], Field(description="status of dag runs")
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get DAG runs metrics for a workspace  # noqa: E501

        Get DAG runs metrics for a workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workspace_dag_runs_with_http_info(organization_id, workspace_id, range, step, deployment_ids, virtual_runtime_ids, runtime_type, status, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID that defines the workspace (required)
        :type workspace_id: str
        :param range: range of the DAG runs metrics in seconds (required)
        :type range: int
        :param step: step interval of the DAG runs metrics in seconds (required)
        :type step: int
        :param deployment_ids: IDs that define the deployments, separated by comma
        :type deployment_ids: str
        :param virtual_runtime_ids: IDs that define the virtual runtimes, separated by comma
        :type virtual_runtime_ids: str
        :param runtime_type: type of runtime
        :type runtime_type: str
        :param status: status of dag runs
        :type status: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[WorkspaceRangeMetricPerStatus], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "organization_id",
            "workspace_id",
            "range",
            "step",
            "deployment_ids",
            "virtual_runtime_ids",
            "runtime_type",
            "status",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workspace_dag_runs" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["workspace_id"]:
            _path_params["workspaceId"] = _params["workspace_id"]

        # process the query parameters
        _query_params = []
        if _params.get("deployment_ids") is not None:  # noqa: E501
            _query_params.append(("deploymentIds", _params["deployment_ids"]))

        if _params.get("virtual_runtime_ids") is not None:  # noqa: E501
            _query_params.append(("virtualRuntimeIds", _params["virtual_runtime_ids"]))

        if _params.get("range") is not None:  # noqa: E501
            _query_params.append(("range", _params["range"]))

        if _params.get("step") is not None:  # noqa: E501
            _query_params.append(("step", _params["step"]))

        if _params.get("runtime_type") is not None:  # noqa: E501
            _query_params.append(("runtimeType", _params["runtime_type"]))

        if _params.get("status") is not None:  # noqa: E501
            _query_params.append(("status", _params["status"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "List[WorkspaceRangeMetricPerStatus]",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "499": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces/{workspaceId}/metrics/dag-runs-per-status",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_workspace_task_runs(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID that defines the workspace")
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(..., description="range of the task runs metric in seconds"),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(..., description="step interval of task runs metric in seconds"),
        ],
        deployment_ids: Annotated[
            Optional[StrictStr],
            Field(description="IDs that define the deployments, separated by comma"),
        ] = None,
        virtual_runtime_ids: Annotated[
            Optional[StrictStr],
            Field(
                description="IDs that define the virtual runtimes, separated by comma"
            ),
        ] = None,
        runtime_type: Annotated[
            Optional[StrictStr], Field(description="type of runtime")
        ] = None,
        status: Annotated[
            Optional[StrictStr], Field(description="status of task runs")
        ] = None,
        include_deleted_deployments: Annotated[
            Optional[StrictBool],
            Field(
                description="results should include data from soft deleted deployments"
            ),
        ] = None,
        **kwargs
    ) -> List[WorkspaceRangeMetricPerStatus]:  # noqa: E501
        """Get task runs metrics for a workspace  # noqa: E501

        Get task runs metrics for a workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workspace_task_runs(organization_id, workspace_id, range, step, deployment_ids, virtual_runtime_ids, runtime_type, status, include_deleted_deployments, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID that defines the workspace (required)
        :type workspace_id: str
        :param range: range of the task runs metric in seconds (required)
        :type range: int
        :param step: step interval of task runs metric in seconds (required)
        :type step: int
        :param deployment_ids: IDs that define the deployments, separated by comma
        :type deployment_ids: str
        :param virtual_runtime_ids: IDs that define the virtual runtimes, separated by comma
        :type virtual_runtime_ids: str
        :param runtime_type: type of runtime
        :type runtime_type: str
        :param status: status of task runs
        :type status: str
        :param include_deleted_deployments: results should include data from soft deleted deployments
        :type include_deleted_deployments: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[WorkspaceRangeMetricPerStatus]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_workspace_task_runs_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_workspace_task_runs_with_http_info(
            organization_id,
            workspace_id,
            range,
            step,
            deployment_ids,
            virtual_runtime_ids,
            runtime_type,
            status,
            include_deleted_deployments,
            **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_workspace_task_runs_with_http_info(
        self,
        organization_id: Annotated[
            StrictStr, Field(..., description="organization ID")
        ],
        workspace_id: Annotated[
            StrictStr, Field(..., description="ID that defines the workspace")
        ],
        range: Annotated[
            conint(strict=True, ge=1800),
            Field(..., description="range of the task runs metric in seconds"),
        ],
        step: Annotated[
            conint(strict=True, ge=60),
            Field(..., description="step interval of task runs metric in seconds"),
        ],
        deployment_ids: Annotated[
            Optional[StrictStr],
            Field(description="IDs that define the deployments, separated by comma"),
        ] = None,
        virtual_runtime_ids: Annotated[
            Optional[StrictStr],
            Field(
                description="IDs that define the virtual runtimes, separated by comma"
            ),
        ] = None,
        runtime_type: Annotated[
            Optional[StrictStr], Field(description="type of runtime")
        ] = None,
        status: Annotated[
            Optional[StrictStr], Field(description="status of task runs")
        ] = None,
        include_deleted_deployments: Annotated[
            Optional[StrictBool],
            Field(
                description="results should include data from soft deleted deployments"
            ),
        ] = None,
        **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Get task runs metrics for a workspace  # noqa: E501

        Get task runs metrics for a workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_workspace_task_runs_with_http_info(organization_id, workspace_id, range, step, deployment_ids, virtual_runtime_ids, runtime_type, status, include_deleted_deployments, async_req=True)
        >>> result = thread.get()

        :param organization_id: organization ID (required)
        :type organization_id: str
        :param workspace_id: ID that defines the workspace (required)
        :type workspace_id: str
        :param range: range of the task runs metric in seconds (required)
        :type range: int
        :param step: step interval of task runs metric in seconds (required)
        :type step: int
        :param deployment_ids: IDs that define the deployments, separated by comma
        :type deployment_ids: str
        :param virtual_runtime_ids: IDs that define the virtual runtimes, separated by comma
        :type virtual_runtime_ids: str
        :param runtime_type: type of runtime
        :type runtime_type: str
        :param status: status of task runs
        :type status: str
        :param include_deleted_deployments: results should include data from soft deleted deployments
        :type include_deleted_deployments: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[WorkspaceRangeMetricPerStatus], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "organization_id",
            "workspace_id",
            "range",
            "step",
            "deployment_ids",
            "virtual_runtime_ids",
            "runtime_type",
            "status",
            "include_deleted_deployments",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_workspace_task_runs" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["organization_id"]:
            _path_params["organizationId"] = _params["organization_id"]

        if _params["workspace_id"]:
            _path_params["workspaceId"] = _params["workspace_id"]

        # process the query parameters
        _query_params = []
        if _params.get("deployment_ids") is not None:  # noqa: E501
            _query_params.append(("deploymentIds", _params["deployment_ids"]))

        if _params.get("virtual_runtime_ids") is not None:  # noqa: E501
            _query_params.append(("virtualRuntimeIds", _params["virtual_runtime_ids"]))

        if _params.get("range") is not None:  # noqa: E501
            _query_params.append(("range", _params["range"]))

        if _params.get("step") is not None:  # noqa: E501
            _query_params.append(("step", _params["step"]))

        if _params.get("runtime_type") is not None:  # noqa: E501
            _query_params.append(("runtimeType", _params["runtime_type"]))

        if _params.get("status") is not None:  # noqa: E501
            _query_params.append(("status", _params["status"]))

        if _params.get("include_deleted_deployments") is not None:  # noqa: E501
            _query_params.append(
                ("includeDeletedDeployments", _params["include_deleted_deployments"])
            )

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["JWT"]  # noqa: E501

        _response_types_map = {
            "200": "List[WorkspaceRangeMetricPerStatus]",
            "400": "Error",
            "401": "Error",
            "403": "Error",
            "500": "Error",
        }

        return self.api_client.call_api(
            "/organizations/{organizationId}/workspaces/{workspaceId}/metrics/task-runs-per-status",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
