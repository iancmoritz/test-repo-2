# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from astronomer_core_api.sdk.models.internal_task import InternalTask


class InternalTaskGroupChildrenInner(BaseModel):
    """
    InternalTaskGroupChildrenInner
    """

    task: Optional[InternalTask] = None
    task_group: Optional[InternalTaskGroup] = Field(None, alias="taskGroup")
    __properties = ["task", "taskGroup"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InternalTaskGroupChildrenInner:
        """Create an instance of InternalTaskGroupChildrenInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of task
        if self.task:
            _dict["task"] = self.task.to_dict()
        # override the default output from pydantic by calling `to_dict()` of task_group
        if self.task_group:
            _dict["taskGroup"] = self.task_group.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InternalTaskGroupChildrenInner:
        """Create an instance of InternalTaskGroupChildrenInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InternalTaskGroupChildrenInner.parse_obj(obj)

        _obj = InternalTaskGroupChildrenInner.parse_obj(
            {
                "task": InternalTask.from_dict(obj.get("task"))
                if obj.get("task") is not None
                else None,
                "task_group": InternalTaskGroup.from_dict(obj.get("taskGroup"))
                if obj.get("taskGroup") is not None
                else None,
            }
        )
        return _obj
