# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from astronomer_core_api.sdk.models.feature_flag import FeatureFlag
from astronomer_core_api.sdk.models.invite import Invite
from astronomer_core_api.sdk.models.user_role import UserRole


class ModelSelf(BaseModel):
    """
    ModelSelf
    """

    avatar_url: StrictStr = Field(..., alias="avatarUrl")
    color_mode_preference: Optional[StrictStr] = Field(
        None, alias="colorModePreference"
    )
    created_at: datetime = Field(..., alias="createdAt")
    feature_flags: Optional[conlist(FeatureFlag)] = Field(None, alias="featureFlags")
    full_name: StrictStr = Field(..., alias="fullName")
    id: StrictStr = Field(...)
    intercom_user_hash: Optional[StrictStr] = Field(None, alias="intercomUserHash")
    invites: Optional[conlist(Invite)] = None
    organization_id: Optional[StrictStr] = Field(None, alias="organizationId")
    roles: Optional[conlist(UserRole)] = None
    status: StrictStr = Field(...)
    system_role: Optional[StrictStr] = Field(None, alias="systemRole")
    updated_at: datetime = Field(..., alias="updatedAt")
    username: StrictStr = Field(...)
    __properties = [
        "avatarUrl",
        "colorModePreference",
        "createdAt",
        "featureFlags",
        "fullName",
        "id",
        "intercomUserHash",
        "invites",
        "organizationId",
        "roles",
        "status",
        "systemRole",
        "updatedAt",
        "username",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ModelSelf:
        """Create an instance of ModelSelf from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in feature_flags (list)
        _items = []
        if self.feature_flags:
            for _item in self.feature_flags:
                if _item:
                    _items.append(_item.to_dict())
            _dict["featureFlags"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in invites (list)
        _items = []
        if self.invites:
            for _item in self.invites:
                if _item:
                    _items.append(_item.to_dict())
            _dict["invites"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in roles (list)
        _items = []
        if self.roles:
            for _item in self.roles:
                if _item:
                    _items.append(_item.to_dict())
            _dict["roles"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ModelSelf:
        """Create an instance of ModelSelf from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ModelSelf.parse_obj(obj)

        _obj = ModelSelf.parse_obj(
            {
                "avatar_url": obj.get("avatarUrl"),
                "color_mode_preference": obj.get("colorModePreference"),
                "created_at": obj.get("createdAt"),
                "feature_flags": [
                    FeatureFlag.from_dict(_item) for _item in obj.get("featureFlags")
                ]
                if obj.get("featureFlags") is not None
                else None,
                "full_name": obj.get("fullName"),
                "id": obj.get("id"),
                "intercom_user_hash": obj.get("intercomUserHash"),
                "invites": [Invite.from_dict(_item) for _item in obj.get("invites")]
                if obj.get("invites") is not None
                else None,
                "organization_id": obj.get("organizationId"),
                "roles": [UserRole.from_dict(_item) for _item in obj.get("roles")]
                if obj.get("roles") is not None
                else None,
                "status": obj.get("status"),
                "system_role": obj.get("systemRole"),
                "updated_at": obj.get("updatedAt"),
                "username": obj.get("username"),
            }
        )
        return _obj
