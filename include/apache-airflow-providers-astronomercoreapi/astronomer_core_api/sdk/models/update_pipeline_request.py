# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint, conlist
from astronomer_core_api.sdk.models.default_args_request import DefaultArgsRequest


class UpdatePipelineRequest(BaseModel):
    """
    UpdatePipelineRequest
    """

    catchup: Optional[StrictBool] = None
    cell_positions: Optional[conlist(StrictStr)] = Field(None, alias="cellPositions")
    concurrency: Optional[conint(strict=True, ge=0)] = None
    dag_run_timeout_seconds: Optional[conint(strict=True, ge=0)] = Field(
        None, alias="dagRunTimeoutSeconds"
    )
    default_args: Optional[DefaultArgsRequest] = Field(None, alias="defaultArgs")
    description: Optional[StrictStr] = None
    imports: Optional[conlist(StrictStr)] = None
    is_paused_upon_creation: Optional[StrictBool] = Field(
        None, alias="isPausedUponCreation"
    )
    max_active_runs: Optional[conint(strict=True, ge=0)] = Field(
        None, alias="maxActiveRuns"
    )
    max_active_tasks: Optional[conint(strict=True, ge=0)] = Field(
        None, alias="maxActiveTasks"
    )
    name: StrictStr = Field(...)
    params: Optional[Dict[str, StrictStr]] = None
    schedule_interval: Optional[StrictStr] = Field(None, alias="scheduleInterval")
    start_date: Optional[StrictStr] = Field(None, alias="startDate")
    tags: Optional[conlist(StrictStr, unique_items=True)] = None
    timezone: Optional[StrictStr] = None
    __properties = [
        "catchup",
        "cellPositions",
        "concurrency",
        "dagRunTimeoutSeconds",
        "defaultArgs",
        "description",
        "imports",
        "isPausedUponCreation",
        "maxActiveRuns",
        "maxActiveTasks",
        "name",
        "params",
        "scheduleInterval",
        "startDate",
        "tags",
        "timezone",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdatePipelineRequest:
        """Create an instance of UpdatePipelineRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of default_args
        if self.default_args:
            _dict["defaultArgs"] = self.default_args.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdatePipelineRequest:
        """Create an instance of UpdatePipelineRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdatePipelineRequest.parse_obj(obj)

        _obj = UpdatePipelineRequest.parse_obj(
            {
                "catchup": obj.get("catchup"),
                "cell_positions": obj.get("cellPositions"),
                "concurrency": obj.get("concurrency"),
                "dag_run_timeout_seconds": obj.get("dagRunTimeoutSeconds"),
                "default_args": DefaultArgsRequest.from_dict(obj.get("defaultArgs"))
                if obj.get("defaultArgs") is not None
                else None,
                "description": obj.get("description"),
                "imports": obj.get("imports"),
                "is_paused_upon_creation": obj.get("isPausedUponCreation"),
                "max_active_runs": obj.get("maxActiveRuns"),
                "max_active_tasks": obj.get("maxActiveTasks"),
                "name": obj.get("name"),
                "params": obj.get("params"),
                "schedule_interval": obj.get("scheduleInterval"),
                "start_date": obj.get("startDate"),
                "tags": obj.get("tags"),
                "timezone": obj.get("timezone"),
            }
        )
        return _obj
