# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class SsoBypassKey(BaseModel):
    """
    SsoBypassKey
    """
    bypass_key: Optional[StrictStr] = Field(None, alias="bypassKey")
    created_at: Optional[StrictStr] = Field(None, alias="createdAt")
    deleted_at: Optional[StrictStr] = Field(None, alias="deletedAt")
    org_short_name: Optional[StrictStr] = Field(None, alias="orgShortName", description="Deprecated: orgShortName has been replaced with organizationShortName")
    organization_id: StrictStr = Field(..., alias="organizationId")
    organization_short_name: Optional[StrictStr] = Field(None, alias="organizationShortName")
    updated_at: Optional[StrictStr] = Field(None, alias="updatedAt")
    __properties = ["bypassKey", "createdAt", "deletedAt", "orgShortName", "organizationId", "organizationShortName", "updatedAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SsoBypassKey:
        """Create an instance of SsoBypassKey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SsoBypassKey:
        """Create an instance of SsoBypassKey from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SsoBypassKey.parse_obj(obj)

        _obj = SsoBypassKey.parse_obj({
            "bypass_key": obj.get("bypassKey"),
            "created_at": obj.get("createdAt"),
            "deleted_at": obj.get("deletedAt"),
            "org_short_name": obj.get("orgShortName"),
            "organization_id": obj.get("organizationId"),
            "organization_short_name": obj.get("organizationShortName"),
            "updated_at": obj.get("updatedAt")
        })
        return _obj

