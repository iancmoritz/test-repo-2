# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from astronomer_core_api.sdk.models.resource_range import ResourceRange


class WorkerQueueOptions(BaseModel):
    """
    WorkerQueueOptions
    """

    max_workers: Optional[ResourceRange] = Field(None, alias="maxWorkers")
    min_workers: Optional[ResourceRange] = Field(None, alias="minWorkers")
    __properties = ["maxWorkers", "minWorkers"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorkerQueueOptions:
        """Create an instance of WorkerQueueOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of max_workers
        if self.max_workers:
            _dict["maxWorkers"] = self.max_workers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min_workers
        if self.min_workers:
            _dict["minWorkers"] = self.min_workers.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorkerQueueOptions:
        """Create an instance of WorkerQueueOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkerQueueOptions.parse_obj(obj)

        _obj = WorkerQueueOptions.parse_obj(
            {
                "max_workers": ResourceRange.from_dict(obj.get("maxWorkers"))
                if obj.get("maxWorkers") is not None
                else None,
                "min_workers": ResourceRange.from_dict(obj.get("minWorkers"))
                if obj.get("minWorkers") is not None
                else None,
            }
        )
        return _obj
