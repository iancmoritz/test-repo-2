# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from astronomer_core_api.sdk.models.basic_subject_profile import BasicSubjectProfile
from astronomer_core_api.sdk.models.team_member import TeamMember
from astronomer_core_api.sdk.models.team_role import TeamRole


class Team(BaseModel):
    """
    Team
    """

    created_at: datetime = Field(..., alias="createdAt")
    created_by: Optional[BasicSubjectProfile] = Field(None, alias="createdBy")
    description: Optional[StrictStr] = None
    id: StrictStr = Field(...)
    is_idp_managed: StrictBool = Field(..., alias="isIdpManaged")
    members: Optional[conlist(TeamMember)] = None
    members_count: Optional[StrictInt] = Field(None, alias="membersCount")
    name: StrictStr = Field(...)
    organization_id: StrictStr = Field(..., alias="organizationId")
    organization_role: StrictStr = Field(..., alias="organizationRole")
    roles: Optional[conlist(TeamRole)] = None
    roles_count: Optional[StrictInt] = Field(None, alias="rolesCount")
    updated_at: datetime = Field(..., alias="updatedAt")
    updated_by: Optional[BasicSubjectProfile] = Field(None, alias="updatedBy")
    __properties = [
        "createdAt",
        "createdBy",
        "description",
        "id",
        "isIdpManaged",
        "members",
        "membersCount",
        "name",
        "organizationId",
        "organizationRole",
        "roles",
        "rolesCount",
        "updatedAt",
        "updatedBy",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Team:
        """Create an instance of Team from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict["createdBy"] = self.created_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in members (list)
        _items = []
        if self.members:
            for _item in self.members:
                if _item:
                    _items.append(_item.to_dict())
            _dict["members"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in roles (list)
        _items = []
        if self.roles:
            for _item in self.roles:
                if _item:
                    _items.append(_item.to_dict())
            _dict["roles"] = _items
        # override the default output from pydantic by calling `to_dict()` of updated_by
        if self.updated_by:
            _dict["updatedBy"] = self.updated_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Team:
        """Create an instance of Team from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Team.parse_obj(obj)

        _obj = Team.parse_obj(
            {
                "created_at": obj.get("createdAt"),
                "created_by": BasicSubjectProfile.from_dict(obj.get("createdBy"))
                if obj.get("createdBy") is not None
                else None,
                "description": obj.get("description"),
                "id": obj.get("id"),
                "is_idp_managed": obj.get("isIdpManaged"),
                "members": [TeamMember.from_dict(_item) for _item in obj.get("members")]
                if obj.get("members") is not None
                else None,
                "members_count": obj.get("membersCount"),
                "name": obj.get("name"),
                "organization_id": obj.get("organizationId"),
                "organization_role": obj.get("organizationRole"),
                "roles": [TeamRole.from_dict(_item) for _item in obj.get("roles")]
                if obj.get("roles") is not None
                else None,
                "roles_count": obj.get("rolesCount"),
                "updated_at": obj.get("updatedAt"),
                "updated_by": BasicSubjectProfile.from_dict(obj.get("updatedBy"))
                if obj.get("updatedBy") is not None
                else None,
            }
        )
        return _obj
