# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from pydantic import BaseModel, Field, constr
from astronomer_core_api.sdk.models.update_organization_api_token_roles import (
    UpdateOrganizationApiTokenRoles,
)


class UpdateOrganizationApiTokenRequest(BaseModel):
    """
    UpdateOrganizationApiTokenRequest
    """

    description: constr(strict=True, max_length=500) = Field(...)
    name: constr(strict=True, max_length=256, min_length=1) = Field(...)
    roles: UpdateOrganizationApiTokenRoles = Field(...)
    __properties = ["description", "name", "roles"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateOrganizationApiTokenRequest:
        """Create an instance of UpdateOrganizationApiTokenRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of roles
        if self.roles:
            _dict["roles"] = self.roles.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateOrganizationApiTokenRequest:
        """Create an instance of UpdateOrganizationApiTokenRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateOrganizationApiTokenRequest.parse_obj(obj)

        _obj = UpdateOrganizationApiTokenRequest.parse_obj(
            {
                "description": obj.get("description"),
                "name": obj.get("name"),
                "roles": UpdateOrganizationApiTokenRoles.from_dict(obj.get("roles"))
                if obj.get("roles") is not None
                else None,
            }
        )
        return _obj
