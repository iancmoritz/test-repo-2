# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from pydantic import BaseModel, Field, StrictStr, validator
from astronomer_core_api.sdk.models.ctm_value import CtmValue


class CtmClause(BaseModel):
    """
    CtmClause
    """

    key: StrictStr = Field(...)
    operator: StrictStr = Field(...)
    value: CtmValue = Field(...)
    __properties = ["key", "operator", "value"]

    @validator("operator")
    def operator_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ("eq", "neq", "in", "nin"):
            raise ValueError("must be one of enum values ('eq', 'neq', 'in', 'nin')")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CtmClause:
        """Create an instance of CtmClause from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of value
        if self.value:
            _dict["value"] = self.value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CtmClause:
        """Create an instance of CtmClause from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CtmClause.parse_obj(obj)

        _obj = CtmClause.parse_obj(
            {
                "key": obj.get("key"),
                "operator": obj.get("operator"),
                "value": CtmValue.from_dict(obj.get("value"))
                if obj.get("value") is not None
                else None,
            }
        )
        return _obj
