# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from astronomer_core_api.sdk.models.project_connection import ProjectConnection
from astronomer_core_api.sdk.models.project_git import ProjectGit
from astronomer_core_api.sdk.models.project_include import ProjectInclude
from astronomer_core_api.sdk.models.project_variable import ProjectVariable


class Project(BaseModel):
    """
    Project
    """

    connections: Optional[conlist(ProjectConnection)] = None
    created_at: datetime = Field(..., alias="createdAt")
    created_by: StrictStr = Field(..., alias="createdBy")
    description: Optional[StrictStr] = None
    git: Optional[ProjectGit] = None
    id: StrictStr = Field(...)
    includes: Optional[conlist(ProjectInclude)] = None
    name: StrictStr = Field(...)
    organization_id: StrictStr = Field(..., alias="organizationId")
    pipeline_count: Optional[StrictInt] = Field(None, alias="pipelineCount")
    requirement_dependencies: Optional[Dict[str, conlist(StrictStr)]] = Field(
        None, alias="requirementDependencies"
    )
    requirements: Optional[conlist(StrictStr)] = None
    updated_at: datetime = Field(..., alias="updatedAt")
    updated_by: StrictStr = Field(..., alias="updatedBy")
    variables: Optional[conlist(ProjectVariable)] = None
    workspace_id: StrictStr = Field(..., alias="workspaceId")
    __properties = [
        "connections",
        "createdAt",
        "createdBy",
        "description",
        "git",
        "id",
        "includes",
        "name",
        "organizationId",
        "pipelineCount",
        "requirementDependencies",
        "requirements",
        "updatedAt",
        "updatedBy",
        "variables",
        "workspaceId",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Project:
        """Create an instance of Project from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in connections (list)
        _items = []
        if self.connections:
            for _item in self.connections:
                if _item:
                    _items.append(_item.to_dict())
            _dict["connections"] = _items
        # override the default output from pydantic by calling `to_dict()` of git
        if self.git:
            _dict["git"] = self.git.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in includes (list)
        _items = []
        if self.includes:
            for _item in self.includes:
                if _item:
                    _items.append(_item.to_dict())
            _dict["includes"] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in requirement_dependencies (dict of array)
        _field_dict_of_array = {}
        if self.requirement_dependencies:
            for _key in self.requirement_dependencies:
                if self.requirement_dependencies[_key]:
                    _field_dict_of_array[_key] = [
                        _item.to_dict() for _item in self.requirement_dependencies[_key]
                    ]
            _dict["requirementDependencies"] = _field_dict_of_array
        # override the default output from pydantic by calling `to_dict()` of each item in variables (list)
        _items = []
        if self.variables:
            for _item in self.variables:
                if _item:
                    _items.append(_item.to_dict())
            _dict["variables"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Project:
        """Create an instance of Project from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Project.parse_obj(obj)

        _obj = Project.parse_obj(
            {
                "connections": [
                    ProjectConnection.from_dict(_item)
                    for _item in obj.get("connections")
                ]
                if obj.get("connections") is not None
                else None,
                "created_at": obj.get("createdAt"),
                "created_by": obj.get("createdBy"),
                "description": obj.get("description"),
                "git": ProjectGit.from_dict(obj.get("git"))
                if obj.get("git") is not None
                else None,
                "id": obj.get("id"),
                "includes": [
                    ProjectInclude.from_dict(_item) for _item in obj.get("includes")
                ]
                if obj.get("includes") is not None
                else None,
                "name": obj.get("name"),
                "organization_id": obj.get("organizationId"),
                "pipeline_count": obj.get("pipelineCount"),
                "requirement_dependencies": obj.get("requirementDependencies"),
                "requirements": obj.get("requirements"),
                "updated_at": obj.get("updatedAt"),
                "updated_by": obj.get("updatedBy"),
                "variables": [
                    ProjectVariable.from_dict(_item) for _item in obj.get("variables")
                ]
                if obj.get("variables") is not None
                else None,
                "workspace_id": obj.get("workspaceId"),
            }
        )
        return _obj
