# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class InternalUnmappedTaskInstance(BaseModel):
    """
    InternalUnmappedTaskInstance
    """
    end_date: Optional[StrictStr] = Field(None, alias="endDate")
    start_date: Optional[StrictStr] = Field(None, alias="startDate")
    state: Optional[StrictStr] = None
    task_id: Optional[StrictStr] = Field(None, alias="taskId")
    try_number: Optional[StrictInt] = Field(None, alias="tryNumber")
    __properties = ["endDate", "startDate", "state", "taskId", "tryNumber"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InternalUnmappedTaskInstance:
        """Create an instance of InternalUnmappedTaskInstance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InternalUnmappedTaskInstance:
        """Create an instance of InternalUnmappedTaskInstance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InternalUnmappedTaskInstance.parse_obj(obj)

        _obj = InternalUnmappedTaskInstance.parse_obj({
            "end_date": obj.get("endDate"),
            "start_date": obj.get("startDate"),
            "state": obj.get("state"),
            "task_id": obj.get("taskId"),
            "try_number": obj.get("tryNumber")
        })
        return _obj

