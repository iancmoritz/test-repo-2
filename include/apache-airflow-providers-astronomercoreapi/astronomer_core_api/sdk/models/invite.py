# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from astronomer_core_api.sdk.models.basic_subject_profile import BasicSubjectProfile


class Invite(BaseModel):
    """
    Invite
    """

    expires_at: StrictStr = Field(..., alias="expiresAt")
    invite_id: StrictStr = Field(..., alias="inviteId")
    invitee: BasicSubjectProfile = Field(...)
    inviter: BasicSubjectProfile = Field(...)
    o_auth_invite_id: Optional[StrictStr] = Field(None, alias="oAuthInviteId")
    org_name: Optional[StrictStr] = Field(
        None,
        alias="orgName",
        description="Deprecated: orgName has been replaced with organizationName",
    )
    org_short_name: Optional[StrictStr] = Field(
        None,
        alias="orgShortName",
        description="Deprecated: orgShortName has been replaced with organizationShortName",
    )
    organization_id: StrictStr = Field(..., alias="organizationId")
    organization_name: Optional[StrictStr] = Field(None, alias="organizationName")
    organization_short_name: Optional[StrictStr] = Field(
        None, alias="organizationShortName"
    )
    ticket_id: Optional[StrictStr] = Field(None, alias="ticketId")
    user_id: Optional[StrictStr] = Field(None, alias="userId")
    __properties = [
        "expiresAt",
        "inviteId",
        "invitee",
        "inviter",
        "oAuthInviteId",
        "orgName",
        "orgShortName",
        "organizationId",
        "organizationName",
        "organizationShortName",
        "ticketId",
        "userId",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Invite:
        """Create an instance of Invite from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of invitee
        if self.invitee:
            _dict["invitee"] = self.invitee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inviter
        if self.inviter:
            _dict["inviter"] = self.inviter.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Invite:
        """Create an instance of Invite from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Invite.parse_obj(obj)

        _obj = Invite.parse_obj(
            {
                "expires_at": obj.get("expiresAt"),
                "invite_id": obj.get("inviteId"),
                "invitee": BasicSubjectProfile.from_dict(obj.get("invitee"))
                if obj.get("invitee") is not None
                else None,
                "inviter": BasicSubjectProfile.from_dict(obj.get("inviter"))
                if obj.get("inviter") is not None
                else None,
                "o_auth_invite_id": obj.get("oAuthInviteId"),
                "org_name": obj.get("orgName"),
                "org_short_name": obj.get("orgShortName"),
                "organization_id": obj.get("organizationId"),
                "organization_name": obj.get("organizationName"),
                "organization_short_name": obj.get("organizationShortName"),
                "ticket_id": obj.get("ticketId"),
                "user_id": obj.get("userId"),
            }
        )
        return _obj
