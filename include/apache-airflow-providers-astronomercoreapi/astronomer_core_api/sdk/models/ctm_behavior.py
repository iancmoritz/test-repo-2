# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator

class CtmBehavior(BaseModel):
    """
    CtmBehavior
    """
    exclude_from_graph: Optional[StrictBool] = Field(None, alias="excludeFromGraph")
    generates_data: Optional[StrictBool] = Field(None, alias="generatesData")
    naming_strategy: Optional[StrictStr] = Field(None, alias="namingStrategy")
    returns_raw_value: Optional[StrictBool] = Field(None, alias="returnsRawValue")
    runnable: Optional[StrictBool] = None
    __properties = ["excludeFromGraph", "generatesData", "namingStrategy", "returnsRawValue", "runnable"]

    @validator('naming_strategy')
    def naming_strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('increment', 'uuid'):
            raise ValueError("must be one of enum values ('increment', 'uuid')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CtmBehavior:
        """Create an instance of CtmBehavior from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CtmBehavior:
        """Create an instance of CtmBehavior from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CtmBehavior.parse_obj(obj)

        _obj = CtmBehavior.parse_obj({
            "exclude_from_graph": obj.get("excludeFromGraph"),
            "generates_data": obj.get("generatesData"),
            "naming_strategy": obj.get("namingStrategy"),
            "returns_raw_value": obj.get("returnsRawValue"),
            "runnable": obj.get("runnable")
        })
        return _obj

