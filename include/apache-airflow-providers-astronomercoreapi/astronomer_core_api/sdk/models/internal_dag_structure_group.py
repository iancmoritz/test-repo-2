# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from astronomer_core_api.sdk.models.internal_task_group_children_inner import (
    InternalTaskGroupChildrenInner,
)


class InternalDagStructureGroup(BaseModel):
    """
    InternalDagStructureGroup
    """

    children: Optional[conlist(InternalTaskGroupChildrenInner)] = None
    id: Optional[StrictStr] = None
    is_mapped: Optional[StrictBool] = Field(None, alias="isMapped")
    label: Optional[StrictStr] = None
    tooltip: Optional[StrictStr] = None
    __properties = ["children", "id", "isMapped", "label", "tooltip"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> InternalDagStructureGroup:
        """Create an instance of InternalDagStructureGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item in self.children:
                if _item:
                    _items.append(_item.to_dict())
            _dict["children"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> InternalDagStructureGroup:
        """Create an instance of InternalDagStructureGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InternalDagStructureGroup.parse_obj(obj)

        _obj = InternalDagStructureGroup.parse_obj(
            {
                "children": [
                    InternalTaskGroupChildrenInner.from_dict(_item)
                    for _item in obj.get("children")
                ]
                if obj.get("children") is not None
                else None,
                "id": obj.get("id"),
                "is_mapped": obj.get("isMapped"),
                "label": obj.get("label"),
                "tooltip": obj.get("tooltip"),
            }
        )
        return _obj
