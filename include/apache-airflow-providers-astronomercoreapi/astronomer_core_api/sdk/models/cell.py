# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from astronomer_core_api.sdk.models.cell_cache import CellCache


class Cell(BaseModel):
    """
    Cell
    """

    cache: CellCache = Field(...)
    created_at: StrictStr = Field(..., alias="createdAt")
    created_by: StrictStr = Field(..., alias="createdBy")
    dependencies_explicit: conlist(StrictStr) = Field(..., alias="dependenciesExplicit")
    id: StrictStr = Field(...)
    name: StrictStr = Field(...)
    organization_id: StrictStr = Field(..., alias="organizationId")
    pipeline_id: StrictStr = Field(..., alias="pipelineId")
    project_id: StrictStr = Field(..., alias="projectId")
    type: StrictStr = Field(...)
    type_config_forms: Optional[Dict[str, StrictStr]] = Field(
        None, alias="typeConfigForms"
    )
    type_configs: Dict[str, Any] = Field(..., alias="typeConfigs")
    type_not_found: Optional[StrictBool] = Field(None, alias="typeNotFound")
    updated_at: StrictStr = Field(..., alias="updatedAt")
    updated_by: StrictStr = Field(..., alias="updatedBy")
    workspace_id: StrictStr = Field(..., alias="workspaceId")
    __properties = [
        "cache",
        "createdAt",
        "createdBy",
        "dependenciesExplicit",
        "id",
        "name",
        "organizationId",
        "pipelineId",
        "projectId",
        "type",
        "typeConfigForms",
        "typeConfigs",
        "typeNotFound",
        "updatedAt",
        "updatedBy",
        "workspaceId",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Cell:
        """Create an instance of Cell from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of cache
        if self.cache:
            _dict["cache"] = self.cache.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Cell:
        """Create an instance of Cell from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Cell.parse_obj(obj)

        _obj = Cell.parse_obj(
            {
                "cache": CellCache.from_dict(obj.get("cache"))
                if obj.get("cache") is not None
                else None,
                "created_at": obj.get("createdAt"),
                "created_by": obj.get("createdBy"),
                "dependencies_explicit": obj.get("dependenciesExplicit"),
                "id": obj.get("id"),
                "name": obj.get("name"),
                "organization_id": obj.get("organizationId"),
                "pipeline_id": obj.get("pipelineId"),
                "project_id": obj.get("projectId"),
                "type": obj.get("type"),
                "type_config_forms": obj.get("typeConfigForms"),
                "type_configs": obj.get("typeConfigs"),
                "type_not_found": obj.get("typeNotFound"),
                "updated_at": obj.get("updatedAt"),
                "updated_by": obj.get("updatedBy"),
                "workspace_id": obj.get("workspaceId"),
            }
        )
        return _obj
