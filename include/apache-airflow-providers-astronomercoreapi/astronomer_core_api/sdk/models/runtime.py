# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator
from astronomer_core_api.sdk.models.runtime_api_capabilities import (
    RuntimeApiCapabilities,
)


class Runtime(BaseModel):
    """
    Runtime
    """

    api_capabilities: RuntimeApiCapabilities = Field(..., alias="apiCapabilities")
    cluster_id: StrictStr = Field(..., alias="clusterId")
    created_at: datetime = Field(..., alias="createdAt")
    deleted_at: Optional[datetime] = Field(None, alias="deletedAt")
    description: StrictStr = Field(...)
    id: StrictStr = Field(...)
    name: StrictStr = Field(...)
    organization_id: StrictStr = Field(..., alias="organizationId")
    release_name: StrictStr = Field(..., alias="releaseName")
    runtime_version: Optional[StrictStr] = Field(None, alias="runtimeVersion")
    type: StrictStr = Field(...)
    updated_at: datetime = Field(..., alias="updatedAt")
    workspace_id: StrictStr = Field(..., alias="workspaceId")
    __properties = [
        "apiCapabilities",
        "clusterId",
        "createdAt",
        "deletedAt",
        "description",
        "id",
        "name",
        "organizationId",
        "releaseName",
        "runtimeVersion",
        "type",
        "updatedAt",
        "workspaceId",
    ]

    @validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ("HYBRID", "VIRTUAL", "HOSTED_SHARED", "HOSTED_DEDICATED"):
            raise ValueError(
                "must be one of enum values ('HYBRID', 'VIRTUAL', 'HOSTED_SHARED', 'HOSTED_DEDICATED')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Runtime:
        """Create an instance of Runtime from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of api_capabilities
        if self.api_capabilities:
            _dict["apiCapabilities"] = self.api_capabilities.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Runtime:
        """Create an instance of Runtime from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Runtime.parse_obj(obj)

        _obj = Runtime.parse_obj(
            {
                "api_capabilities": RuntimeApiCapabilities.from_dict(
                    obj.get("apiCapabilities")
                )
                if obj.get("apiCapabilities") is not None
                else None,
                "cluster_id": obj.get("clusterId"),
                "created_at": obj.get("createdAt"),
                "deleted_at": obj.get("deletedAt"),
                "description": obj.get("description"),
                "id": obj.get("id"),
                "name": obj.get("name"),
                "organization_id": obj.get("organizationId"),
                "release_name": obj.get("releaseName"),
                "runtime_version": obj.get("runtimeVersion"),
                "type": obj.get("type"),
                "updated_at": obj.get("updatedAt"),
                "workspace_id": obj.get("workspaceId"),
            }
        )
        return _obj
