# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr

class ProjectGitCommit(BaseModel):
    """
    ProjectGitCommit
    """
    author_name: StrictStr = Field(..., alias="authorName")
    var_date: StrictStr = Field(..., alias="date")
    message: StrictStr = Field(...)
    sha: StrictStr = Field(...)
    url: StrictStr = Field(...)
    __properties = ["authorName", "date", "message", "sha", "url"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProjectGitCommit:
        """Create an instance of ProjectGitCommit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProjectGitCommit:
        """Create an instance of ProjectGitCommit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProjectGitCommit.parse_obj(obj)

        _obj = ProjectGitCommit.parse_obj({
            "author_name": obj.get("authorName"),
            "var_date": obj.get("date"),
            "message": obj.get("message"),
            "sha": obj.get("sha"),
            "url": obj.get("url")
        })
        return _obj

