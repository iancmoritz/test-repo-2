# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator
from astronomer_core_api.sdk.models.cluster_metadata import ClusterMetadata


class SharedCluster(BaseModel):
    """
    SharedCluster
    """

    cloud_provider: StrictStr = Field(..., alias="cloudProvider")
    created_at: datetime = Field(..., alias="createdAt")
    db_instance_type: StrictStr = Field(..., alias="dbInstanceType")
    id: StrictStr = Field(...)
    is_cordoned: Optional[StrictBool] = Field(None, alias="isCordoned")
    is_dry_run: StrictBool = Field(..., alias="isDryRun")
    metadata: ClusterMetadata = Field(...)
    name: StrictStr = Field(...)
    pod_subnet_range: StrictStr = Field(..., alias="podSubnetRange")
    region: StrictStr = Field(...)
    service_peering_range: StrictStr = Field(..., alias="servicePeeringRange")
    service_subnet_range: StrictStr = Field(..., alias="serviceSubnetRange")
    status: StrictStr = Field(...)
    template_version: StrictStr = Field(..., alias="templateVersion")
    updated_at: datetime = Field(..., alias="updatedAt")
    vpc_subnet_range: StrictStr = Field(..., alias="vpcSubnetRange")
    __properties = [
        "cloudProvider",
        "createdAt",
        "dbInstanceType",
        "id",
        "isCordoned",
        "isDryRun",
        "metadata",
        "name",
        "podSubnetRange",
        "region",
        "servicePeeringRange",
        "serviceSubnetRange",
        "status",
        "templateVersion",
        "updatedAt",
        "vpcSubnetRange",
    ]

    @validator("cloud_provider")
    def cloud_provider_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ("aws", "gcp", "azure"):
            raise ValueError("must be one of enum values ('aws', 'gcp', 'azure')")
        return value

    @validator("status")
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in (
            "CREATING",
            "CREATED",
            "CREATE_FAILED",
            "UPDATING",
            "DELETING",
            "DELETED",
            "DELETE_FAILED",
            "FORCE_DELETED",
        ):
            raise ValueError(
                "must be one of enum values ('CREATING', 'CREATED', 'CREATE_FAILED', 'UPDATING', 'DELETING', 'DELETED', 'DELETE_FAILED', 'FORCE_DELETED')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SharedCluster:
        """Create an instance of SharedCluster from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict["metadata"] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SharedCluster:
        """Create an instance of SharedCluster from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SharedCluster.parse_obj(obj)

        _obj = SharedCluster.parse_obj(
            {
                "cloud_provider": obj.get("cloudProvider"),
                "created_at": obj.get("createdAt"),
                "db_instance_type": obj.get("dbInstanceType"),
                "id": obj.get("id"),
                "is_cordoned": obj.get("isCordoned"),
                "is_dry_run": obj.get("isDryRun"),
                "metadata": ClusterMetadata.from_dict(obj.get("metadata"))
                if obj.get("metadata") is not None
                else None,
                "name": obj.get("name"),
                "pod_subnet_range": obj.get("podSubnetRange"),
                "region": obj.get("region"),
                "service_peering_range": obj.get("servicePeeringRange"),
                "service_subnet_range": obj.get("serviceSubnetRange"),
                "status": obj.get("status"),
                "template_version": obj.get("templateVersion"),
                "updated_at": obj.get("updatedAt"),
                "vpc_subnet_range": obj.get("vpcSubnetRange"),
            }
        )
        return _obj
