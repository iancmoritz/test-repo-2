# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class UpdateCellRequest(BaseModel):
    """
    UpdateCellRequest
    """
    dependencies_explicit: Optional[conlist(StrictStr)] = Field(None, alias="dependenciesExplicit")
    name: StrictStr = Field(...)
    type: StrictStr = Field(...)
    type_config_forms: Optional[Dict[str, StrictStr]] = Field(None, alias="typeConfigForms")
    type_configs: Optional[Dict[str, Any]] = Field(None, alias="typeConfigs")
    __properties = ["dependenciesExplicit", "name", "type", "typeConfigForms", "typeConfigs"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateCellRequest:
        """Create an instance of UpdateCellRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateCellRequest:
        """Create an instance of UpdateCellRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateCellRequest.parse_obj(obj)

        _obj = UpdateCellRequest.parse_obj({
            "dependencies_explicit": obj.get("dependenciesExplicit"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "type_config_forms": obj.get("typeConfigForms"),
            "type_configs": obj.get("typeConfigs")
        })
        return _obj

