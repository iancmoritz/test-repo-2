# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from pydantic import BaseModel, Field, StrictStr
from astronomer_core_api.sdk.models.scope import Scope
from astronomer_core_api.sdk.models.subject import Subject


class UserRole(BaseModel):
    """
    UserRole
    """

    role: StrictStr = Field(...)
    scope: Scope = Field(...)
    subject: Subject = Field(...)
    __properties = ["role", "scope", "subject"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserRole:
        """Create an instance of UserRole from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of scope
        if self.scope:
            _dict["scope"] = self.scope.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subject
        if self.subject:
            _dict["subject"] = self.subject.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserRole:
        """Create an instance of UserRole from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserRole.parse_obj(obj)

        _obj = UserRole.parse_obj(
            {
                "role": obj.get("role"),
                "scope": Scope.from_dict(obj.get("scope"))
                if obj.get("scope") is not None
                else None,
                "subject": Subject.from_dict(obj.get("subject"))
                if obj.get("subject") is not None
                else None,
            }
        )
        return _obj
