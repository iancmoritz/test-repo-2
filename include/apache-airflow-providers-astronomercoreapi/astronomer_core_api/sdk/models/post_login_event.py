# coding: utf-8

"""
    Astro Core API

    Astro Core API  # noqa: E501

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field
from astronomer_core_api.sdk.models.event_client import EventClient
from astronomer_core_api.sdk.models.event_connection import EventConnection
from astronomer_core_api.sdk.models.event_organization import EventOrganization
from astronomer_core_api.sdk.models.event_request import EventRequest
from astronomer_core_api.sdk.models.event_user import EventUser


class PostLoginEvent(BaseModel):
    """
    PostLoginEvent
    """

    client: Optional[EventClient] = None
    connection: EventConnection = Field(...)
    organization: Optional[EventOrganization] = None
    request: Optional[EventRequest] = None
    transaction: Optional[Dict[str, Any]] = None
    user: EventUser = Field(...)
    __properties = [
        "client",
        "connection",
        "organization",
        "request",
        "transaction",
        "user",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PostLoginEvent:
        """Create an instance of PostLoginEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of client
        if self.client:
            _dict["client"] = self.client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of connection
        if self.connection:
            _dict["connection"] = self.connection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict["organization"] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request
        if self.request:
            _dict["request"] = self.request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict["user"] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PostLoginEvent:
        """Create an instance of PostLoginEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PostLoginEvent.parse_obj(obj)

        _obj = PostLoginEvent.parse_obj(
            {
                "client": EventClient.from_dict(obj.get("client"))
                if obj.get("client") is not None
                else None,
                "connection": EventConnection.from_dict(obj.get("connection"))
                if obj.get("connection") is not None
                else None,
                "organization": EventOrganization.from_dict(obj.get("organization"))
                if obj.get("organization") is not None
                else None,
                "request": EventRequest.from_dict(obj.get("request"))
                if obj.get("request") is not None
                else None,
                "transaction": obj.get("transaction"),
                "user": EventUser.from_dict(obj.get("user"))
                if obj.get("user") is not None
                else None,
            }
        )
        return _obj
